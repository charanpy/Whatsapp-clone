{"version":3,"sources":["pages/Home/Home.style.js","redux-sagas/channels/channels.selector.js","components/ChatContainer/ChatContainer.state.js","components/Chat/Chat.style.js","redux-sagas/message/message.selector.js","components/Notification/Notification.state.js","components/Notification/Notification.js","components/Chat/Chat.js","components/ChatContainer/DisplayUsers.state.js","components/ChatContainer/DisplayUsers.js","components/ChatContainer/ChatContainer.js","components/shared/Header/Header.style.js","components/ActiveUser/ActiveUser.state.js","components/ActiveUser/ActiveUser.js","components/shared/Header/Header.js","components/ChatList/ChatList.style.js","components/ChatList/ChatList.js","components/TestPanel/TestPanel.style.js","components/TestPanel/TestPanel.js","helpers/PropTypeValues.js","pages/Messages/Messages.state.js","assets/chat-light.png","assets/chat-dark.png","pages/Messages/Messages.style.js","components/MessageInput/MessageInput.style.js","components/MessageInput/MessageInput.state.js","components/MessageInput/MessageInput.js","components/Message/Message.state.js","components/Message/Message.style.js","components/Message/MessageList.js","components/Message/Message.js","components/Message/Message.container.js","pages/Messages/Messages.js","pages/Messages/Messages.container.js","pages/ChatPanel/ChatPanel.js","pages/Home/Home.state.js","pages/Home/Home.js","components/shared/Button/Button.styles.js","components/shared/Button/Button.js","components/shared/Icon/Icon.style.js","components/shared/Icon/Icon.js","components/shared/context/Modal.js","components/shared/Modal/Modal.style.js","components/shared/Modal/Modal.js","components/shared/Input/Input.js","components/shared/Input/Input.style.js","components/Spinner/Spinner.js","components/shared/ImageView/ImageView.js","components/shared/ProfileImage/ProfileImage.style.js","components/shared/ProfileImage/ProfileImage.js","components/shared/Image/Image.style.js","components/shared/Image/Image.js","components/shared/Navigate/Navigate.js","components/shared/ImageEditor/Image.state.js","components/shared/ImageEditor/ImageEditor.style.js","components/shared/ImageEditor/ImageEditor.js"],"names":["HomeContainer","styled","main","selectChannels","state","channels","selectChannelLoading","createSelector","channel","loading","selectChatList","chatList","selectCurrentChannelLoading","currentChannelLoading","selectCurrentChannel","currentChannel","selectCurrentChannelId","uid","selectCurrentChannelGroupId","groupId","ChatContainerState","useState","searchField","setSearchField","setChatList","intervalRef","useRef","input","useEffect","current","setTimeout","searchUser","then","res","chatListKey","Object","keys","sort","responseKey","JSON","stringify","compareChatList","alert","catch","e","console","log","clearTimeout","target","value","ChatContainer","div","props","theme","border","statusHover","ImageContainer","ChatDetail","ChatName","span","color","Notification","Unseen","selectMessages","messages","selectIsLoading","message","selectMessage","msg","NotificationState","getNotification","currentGroup","getRealtimeNotification","auth","currentUser","groupRef","getRef","listenToMsg","listen","child","orderByChild","startAt","Date","now","on","snapshot","val","createdBy","seen","off","getNotificationStart","getRealtimeNotificationStart","getRealtimeNotify","UseNotificationState","length","substring","defaultProps","connect","otherProps","notifications","dispatch","currentUserId","Chat","displayName","photoURL","setCurrentChannelStart","setChannel","groupInfo","onClick","tabindex","ProfileImage","height","chatProfile","React","memo","channelInfo","DisplayUsersState","users","filter","key","mapStateToProps","createStructuredSelector","selectUserId","chatLists","UseDisplayState","filteredUsers","map","isLoading","UseChatState","onHandleChange","Input","onChange","name","icon","placeholder","autoComplete","ref","entries","ChatDetailWrapper","HeaderContainer","header","OptionsContainer","Menu","button","ActiveUserState","id","status","setStatus","statusRef","useActiveState","formatDistanceToNow","last_changed","Header","icon1","icon2","text","label","position","Modal","Navigate","navigateTo","iconName","as","Icon","className","ChatListContainer","section","chatContainer","ChatList","TestPanelContainer","sideContainer","signOutStart","setThemeStart","setThemeLightStart","PropTypes","shape","string","isRequired","MessageState","createChannel","getMessages","getRealtime","setSeen","deleteNotification","snap","updateSeen","MessageContainer","mode","chatDark","chatLight","Footer","footer","SendMessage","i","MessageInputState","addMessageStart","setModal","editor","setImage","setLoading","imageFile","unMountModal","addImageMessage","downloadURL","fileChange","setCroppedImage","sendImageFb","MessageInput","addMessage","UseEditorState","visible","file","OnMountModal","OnUnMountModal","croppedImage","blob","UseMessageInputState","submitHandler","handleFileChange","handleCroppedImage","sendImageFile","htmlFor","type","ImageEditor","closeModal","image","content","editorRef","handleCrop","sendImage","receiverId","messagesEndRef","scrollIntoView","behaviour","block","inline","scrollToBottom","SeenIcon","Message","currentUserChat","receiverChat","Tail","MessageList","timestamp","formatISO","representation","slice","includes","Image","src","messagesArray","values","UseMsgState","createdAt","MessagesContainer","compose","Spinner","Messages","createChannelStart","getMessagesStart","getRealtimeMessagesStart","getRealtimeMsg","setSeenStart","deleteNotificationStart","setCurrentChannelNullStart","setChannelNull","UseMessageState","chat","ChatPanel","Home","userId","displayChat","userStatusDatabaseRef","listenToRef","onDisconnect","set","isOfflineForDatabase","isOnlineForDatabase","channelRef","displayChatListStart","UseHomeState","Button","danger","style","fontSize","marginRight","IconContainer","ModalContext","createContext","setModalVisible","ModalProvider","children","setVisible","Provider","show","ModalContainer","CSSTransition","in","timeout","classNames","unmountOnExit","InputContainer","forwardRef","InputWrapper","width","search","textLight","WithSpinner","WrappedComponent","ImageView","action","img","profilePic","useContext","alt","selectProfilePhoto","to","ImageEditorState","modal","isVisible","photo","info","ButtonContainer","Editor","CloseButton","Close","scale"],"mappings":"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","file":"static/js/5.23ce4ed6.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst HomeContainer = styled.main`\r\n  display: flex;\r\n  width: 100%;\r\n  min-height: 100vh;\r\n`;\r\n\r\nexport default HomeContainer;\r\n","import { createSelector } from 'reselect';\r\n\r\nconst selectChannels = (state) => state.channels;\r\n\r\nexport const selectChannelLoading = createSelector(\r\n  [selectChannels],\r\n  (channel) => channel.loading\r\n);\r\n\r\nexport const selectChatList = createSelector(\r\n  [selectChannels],\r\n  (channel) => channel.chatList\r\n);\r\n\r\nexport const selectCurrentChannelLoading = createSelector(\r\n  [selectChannels],\r\n  (channel) => channel.currentChannelLoading\r\n);\r\n\r\nexport const selectCurrentChannel = createSelector(\r\n  [selectChannels],\r\n  (channel) => channel.currentChannel\r\n);\r\n\r\nexport const selectCurrentChannelId = createSelector(\r\n  [selectChannels],\r\n  (channel) => channel.currentChannel.uid\r\n);\r\n\r\nexport const selectCurrentChannelGroupId = createSelector(\r\n  [selectChannels],\r\n  (channel) => channel.currentChannel?.groupId\r\n);\r\n","import { useState, useEffect, useRef } from 'react';\r\nimport { searchUser } from '../../firebase/firebase';\r\n\r\nconst ChatContainerState = () => {\r\n  const [searchField, setSearchField] = useState('');\r\n  const [chatList, setChatList] = useState({});\r\n  const intervalRef = useRef(null);\r\n  const input = useRef(null);\r\n\r\n  const onHandleChange = (e) => {\r\n    setSearchField(e.target.value);\r\n  };\r\n\r\n  const compareChatList = (res) => {\r\n    const chatListKey = Object.keys(chatList).sort();\r\n    const responseKey = Object.keys(res).sort();\r\n    return JSON.stringify(chatListKey) === JSON.stringify(responseKey);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (searchField) {\r\n      intervalRef.current = setTimeout(() => {\r\n        searchUser(searchField)\r\n          .then((res) => {\r\n            if (!res) {\r\n              alert('no users found');\r\n            } else if (!compareChatList(res)) {\r\n              setChatList(res);\r\n            }\r\n          })\r\n          .catch((e) => console.log(e));\r\n      }, 500);\r\n    } else {\r\n      setChatList({});\r\n\r\n      clearTimeout(intervalRef.current);\r\n    }\r\n\r\n    return () => {\r\n      clearTimeout(intervalRef.current);\r\n    };\r\n  }, [searchField]); // eslint-disable-line\r\n\r\n  return [searchField, onHandleChange, chatList, input];\r\n};\r\n\r\nexport default ChatContainerState;\r\n","import styled from 'styled-components';\r\n\r\nexport const ChatContainer = styled.div`\r\n  display: flex;\r\n  height: 8rem;\r\n  align-items: center;\r\n  padding: 0 1.3rem;\r\n  // justify-content: space-between;\r\n  border-bottom: 1px solid ${(props) => props.theme.border};\r\n  transition: all 500ms linear;\r\n  cursor: pointer;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background: ${(props) => props.theme.statusHover};\r\n  }\r\n`;\r\n\r\nexport const ImageContainer = styled.div`\r\n  margin-right: 2rem;\r\n`;\r\nexport const ChatDetail = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const ChatName = styled.span`\r\n  font-size: 2.2rem;\r\n  color: ${(props) => props.theme.color};\r\n  font-family: 'NimbusSanTW01Con';\r\n  font-weight: 500;\r\n  letter-spacing: 1px;\r\n  text-transform: capitalize;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nexport const Notification = styled.span`\r\n  font-size: 1.3rem;\r\n  color: #25d366;\r\n  font-family: sans-serif;\r\n`;\r\n\r\nexport const Unseen = styled.div`\r\n  height: 2rem;\r\n  width: 2rem;\r\n  border-radius: 50%;\r\n  background: #25d366;\r\n  /* padding: 1rem; */\r\n  margin-left: 0.8rem;\r\n  color: white;\r\n  display: inline-flex;\r\n  text-align: center;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n","import { createSelector } from 'reselect';\r\n\r\nconst selectMessages = (state) => state.messages;\r\n\r\nexport const selectIsLoading = createSelector(\r\n  [selectMessages],\r\n  (message) => message.loading\r\n);\r\n\r\nexport const selectMessage = createSelector(\r\n  [selectMessages],\r\n  (msg) => msg.messages\r\n);\r\n\r\nexport const selectNotification = (groupId) => createSelector(\r\n  [selectMessages],\r\n  (msg) => (msg.notifications ? msg.notifications[groupId] : null)\r\n);\r\n","import { useEffect } from 'react';\r\nimport { getRef, auth } from '../../firebase/firebase';\r\n\r\nconst NotificationState = (\r\n  getNotification,\r\n  groupId,\r\n  uid = null,\r\n  currentGroup,\r\n  getRealtimeNotification\r\n) => {\r\n  useEffect(() => {\r\n    if (auth?.currentUser?.uid) {\r\n      getNotification(groupId, uid);\r\n    }\r\n  }, [getNotification, groupId, uid]);\r\n\r\n  useEffect(() => {\r\n    if (!groupId) return false;\r\n    const groupRef = getRef(`groups/${groupId}`);\r\n    let listenToMsg;\r\n    let listen;\r\n    if (currentGroup !== groupId) {\r\n      listenToMsg = groupRef\r\n        .child('messages')\r\n        .orderByChild('createdAt')\r\n        .startAt(Date.now());\r\n      listen = listenToMsg.on('child_added', (snapshot) => {\r\n        console.log(snapshot.val());\r\n        if (snapshot.val() && snapshot.val()?.createdBy !== uid) {\r\n          if (!snapshot.val().seen) {\r\n            getRealtimeNotification(groupId, snapshot.val());\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return () => listenToMsg && listenToMsg.off('child_added', listen);\r\n  }, [currentGroup, groupId, uid, getRealtimeNotification]);\r\n};\r\n\r\nexport default NotificationState;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n// import { createStructuredSelector } from 'reselect';\r\nimport { selectCurrentChannelGroupId } from '../../redux-sagas/channels/channels.selector';\r\nimport { selectNotification } from '../../redux-sagas/message/message.selector';\r\nimport {\r\n  getNotificationStart,\r\n  getRealtimeNotificationStart,\r\n} from '../../redux-sagas/message/message.action';\r\nimport { auth } from '../../firebase/firebase';\r\nimport { Notification as Notify, Unseen } from '../Chat/Chat.style';\r\nimport UseNotificationState from './Notification.state';\r\n\r\nconst Notification = ({\r\n  getNotificationStart: getNotification,\r\n  groupId,\r\n  currentGroup,\r\n  getRealtimeNotificationStart: getRealtimeNotify,\r\n  // eslint-disable-next-line\r\n  msg,\r\n}) => {\r\n  UseNotificationState(\r\n    getNotification,\r\n    groupId,\r\n    auth?.currentUser?.uid,\r\n    currentGroup,\r\n    getRealtimeNotify\r\n  );\r\n\r\n  return (\r\n    <Notify>\r\n      {msg && msg.length ? msg[msg.length - 1].message.substring(0, 5) : ''}\r\n      {msg && msg.length > 0 && <Unseen> {msg.length}</Unseen>}\r\n    </Notify>\r\n  );\r\n};\r\n\r\nNotification.propTypes = {\r\n  getNotificationStart: PropTypes.func.isRequired,\r\n  groupId: PropTypes.string,\r\n  currentGroup: PropTypes.string,\r\n  getRealtimeNotificationStart: PropTypes.func.isRequired,\r\n};\r\n\r\nNotification.defaultProps = {\r\n  currentGroup: null,\r\n  groupId: null,\r\n};\r\n/* eslint-disable */\r\nconst mapStateToProps = (state, otherProps) => ({\r\n  currentGroup: selectCurrentChannelGroupId(state),\r\n  msg: selectNotification(otherProps.groupId)(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getNotificationStart: (groupId, currentUserId) =>\r\n    dispatch(getNotificationStart({ groupId, currentUserId })),\r\n  getRealtimeNotificationStart: (groupId, message) =>\r\n    dispatch(getRealtimeNotificationStart({ groupId, message })),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Notification);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { setCurrentChannelStart } from '../../redux-sagas/channels/channels.action';\r\nimport {\r\n  ChatContainer,\r\n  ChatDetail,\r\n  ChatName,\r\n  ImageContainer,\r\n} from './Chat.style';\r\nimport ProfileImage from '../shared/ProfileImage/ProfileImage';\r\nimport Notification from '../Notification/Notification';\r\n\r\nconst Chat = ({\r\n  displayName,\r\n  uid,\r\n  photoURL,\r\n  groupId,\r\n  setCurrentChannelStart: setChannel,\r\n}) => {\r\n  const groupInfo = {\r\n    groupId,\r\n    displayName,\r\n    uid,\r\n    photoURL,\r\n  };\r\n  return (\r\n    <>\r\n      <ChatContainer onClick={() => setChannel(groupInfo)} tabindex='0'>\r\n        <ImageContainer>\r\n          <ProfileImage height={5} chatProfile={photoURL} />\r\n        </ImageContainer>\r\n        <ChatDetail>\r\n          <ChatName>{displayName}</ChatName>\r\n          <Notification groupId={groupId} />\r\n        </ChatDetail>\r\n      </ChatContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nChat.propTypes = {\r\n  displayName: PropTypes.string.isRequired,\r\n  uid: PropTypes.string.isRequired,\r\n  photoURL: PropTypes.string.isRequired,\r\n  groupId: PropTypes.string,\r\n  setCurrentChannelStart: PropTypes.func.isRequired,\r\n};\r\n\r\nChat.defaultProps = {\r\n  groupId: null,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setCurrentChannelStart: (channelInfo) =>\r\n    // eslint-disable-next-line\r\n    dispatch(setCurrentChannelStart(channelInfo)),\r\n});\r\n\r\nexport default React.memo(connect(null, mapDispatchToProps)(Chat));\r\n","const DisplayUsersState = (users, uid) => {\r\n  const filteredUsers = users.filter(([key]) => key !== uid);\r\n  return [filteredUsers];\r\n};\r\n\r\nexport default DisplayUsersState;\r\n","/* eslint-disable */\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUserId } from '../../redux-sagas/user/user.selector';\r\nimport Chat from '../Chat/Chat';\r\nimport UseDisplayState from './DisplayUsers.state';\r\n\r\nconst DisplayUsers = ({ users, uid, chatLists }) => {\r\n  const [filteredUsers] = UseDisplayState(users, uid);\r\n\r\n  return users.length > 0\r\n    ? filteredUsers.map(([key, value]) => (\r\n        <Chat\r\n          displayName={value.displayName}\r\n          uid={value.uid}\r\n          photoURL={value.photoURL}\r\n          key={key}\r\n        />\r\n      ))\r\n    : chatLists.length &&\r\n        chatLists.map(({ displayName, uid, photoURL, groupId }) => (\r\n          <Chat\r\n            displayName={displayName}\r\n            uid={uid}\r\n            photoURL={photoURL}\r\n            key={uid}\r\n            groupId={groupId}\r\n          />\r\n        ));\r\n};\r\n\r\nDisplayUsers.propTypes = {\r\n  users: PropTypes.array,\r\n  uid: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  uid: selectUserId,\r\n});\r\n\r\nexport default React.memo(connect(mapStateToProps)(DisplayUsers));\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  selectChatList,\r\n  selectChannelLoading,\r\n} from '../../redux-sagas/channels/channels.selector';\r\nimport UseChatState from './ChatContainer.state';\r\nimport DisplayUsers from './DisplayUsers';\r\nimport Input from '../shared/Input/Input';\r\nimport { InputWrapper } from '../shared/Input/Input.style';\r\n\r\nconst ChatContainer = ({ channels, isLoading }) => {\r\n  const [searchField, onHandleChange, chatList, input] = UseChatState();\r\n  return (\r\n    <>\r\n      <InputWrapper>\r\n        <Input\r\n          value={searchField}\r\n          onChange={onHandleChange}\r\n          name='search'\r\n          icon\r\n          placeholder='Search users'\r\n          autoComplete='off'\r\n          ref={input}\r\n        />\r\n      </InputWrapper>\r\n      {!isLoading && (\r\n        <DisplayUsers\r\n          users={Object.entries(chatList) && Object.entries(chatList)}\r\n          chatLists={channels}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nChatContainer.propTypes = {\r\n  channels: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      displayName: PropTypes.string.isRequired,\r\n      uid: PropTypes.string.isRequired,\r\n      photoURL: PropTypes.string.isRequired,\r\n      groupId: PropTypes.string,\r\n    })\r\n  ).isRequired,\r\n  isLoading: PropTypes.bool.isRequired,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  channels: selectChatList,\r\n  isLoading: selectChannelLoading,\r\n});\r\n\r\nexport default React.memo(connect(mapStateToProps)(ChatContainer));\r\n","/* eslint-disable */\r\nimport styled from 'styled-components';\r\nimport { ChatDetail } from '../../Chat/Chat.style';\r\n\r\nexport const ChatDetailWrapper = styled(ChatDetail)`\r\n  margin-left: 2rem;\r\n  display: flex;\r\n`;\r\n\r\nexport const HeaderContainer = styled.header`\r\n  padding: 1rem 1.6rem;\r\n  background: ${(props) => props.theme.header};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: calc(100% - 3.2rem);\r\n  z-index: 1;\r\n`;\r\n\r\nexport const OptionsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Menu = styled.button`\r\n  background: transparent;\r\n  border: none;\r\n  outline: none;\r\n`;\r\n\r\nexport const ImageContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n","import { useState, useEffect } from 'react';\r\nimport { getRef } from '../../firebase/firebase';\r\n\r\nconst ActiveUserState = (id) => {\r\n  const [status, setStatus] = useState(null);\r\n  useEffect(() => {\r\n    const statusRef = getRef(`status/${id}`);\r\n    const listen = statusRef.on('value', (snapshot) => {\r\n      if (snapshot.val()) {\r\n        setStatus(snapshot.val());\r\n        return;\r\n      }\r\n      setStatus(null);\r\n    });\r\n    return () => statusRef.off('value', listen);\r\n  }, [id]);\r\n  return status;\r\n};\r\n\r\nexport default ActiveUserState;\r\n","import React from 'react';\r\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { selectCurrentChannelId } from '../../redux-sagas/channels/channels.selector';\r\nimport { Notification } from '../Chat/Chat.style';\r\nimport useActiveState from './ActiveUser.state';\r\n\r\nconst ActiveUser = ({ id }) => {\r\n  const status = useActiveState(id);\r\n  return (\r\n    <Notification>\r\n      {status &&\r\n        (status.state === 'online'\r\n          ? status.state\r\n          : formatDistanceToNow(status.last_changed))}\r\n    </Notification>\r\n  );\r\n};\r\n\r\nActiveUser.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  id: selectCurrentChannelId,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ActiveUser);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  HeaderContainer,\r\n  OptionsContainer,\r\n  Menu,\r\n  ImageContainer,\r\n  ChatDetailWrapper,\r\n} from './Header.style';\r\nimport ProfileImage from '../ProfileImage/ProfileImage';\r\nimport IconContainer from '../Icon/Icon';\r\nimport { ChatName } from '../../Chat/Chat.style';\r\nimport ActiveUser from '../../ActiveUser/ActiveUser';\r\nimport Navigate from '../Navigate/Navigate';\r\nimport ModalProvider from '../context/Modal';\r\n\r\nconst Header = ({\r\n  icon1,\r\n  icon2,\r\n  text,\r\n  label,\r\n  chatProfile,\r\n  position,\r\n  onClick,\r\n}) => {\r\n  return (\r\n    <ModalProvider>\r\n      <HeaderContainer position={position}>\r\n        <ImageContainer>\r\n          <ProfileImage chatProfile={chatProfile} />\r\n          {text && (\r\n            <ChatDetailWrapper>\r\n              <ChatName>{label}</ChatName>\r\n              <ActiveUser />\r\n            </ChatDetailWrapper>\r\n          )}\r\n        </ImageContainer>\r\n        <OptionsContainer>\r\n          <Navigate navigateTo='/edit' iconName={icon1} />\r\n          <Menu as='button' onClick={onClick}>\r\n            <IconContainer as='button' className={icon2} />\r\n          </Menu>\r\n        </OptionsContainer>\r\n      </HeaderContainer>\r\n    </ModalProvider>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  icon1: PropTypes.string,\r\n  icon2: PropTypes.string,\r\n  text: PropTypes.bool,\r\n  label: PropTypes.string,\r\n  chatProfile: PropTypes.string,\r\n  position: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nHeader.defaultProps = {\r\n  text: false,\r\n  label: null,\r\n  chatProfile: null,\r\n  icon1: 'none',\r\n  icon2: 'none',\r\n  onClick: () => {},\r\n};\r\n\r\nexport default React.memo(Header);\r\n","import styled from 'styled-components';\r\n\r\nconst ChatListContainer = styled.section`\r\n  display: flex;\r\n  background: ${(props) => props.theme.chatContainer};\r\n  width: 30%;\r\n  min-height: 100vh;\r\n  flex-direction: column;\r\n  position: relative;\r\n\r\n  @media (max-width: 650px) {\r\n    width: 100vw;\r\n  }\r\n`;\r\n\r\nexport default ChatListContainer;\r\n","import React from 'react';\r\nimport ChatContainer from '../ChatContainer/ChatContainer';\r\nimport Header from '../shared/Header/Header';\r\nimport ChatListContainer from './ChatList.style';\r\n\r\nconst ChatList = () => {\r\n  return (\r\n    <ChatListContainer>\r\n      <Header icon1='fas fa-user' position='left' />\r\n      <ChatContainer />\r\n    </ChatListContainer>\r\n  );\r\n};\r\n\r\nexport default ChatList;\r\n","import styled from 'styled-components';\r\n\r\nconst TestPanelContainer = styled.section`\r\n  display: flex;\r\n  min-height: 100%;\r\n  width: 70%;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: ${(props) => props.theme.sideContainer};\r\n\r\n  @media(max-width: 650px){\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport default TestPanelContainer;\r\n","/* eslint-disable */\r\nimport { connect } from 'react-redux';\r\nimport { signOutStart } from '../../redux-sagas/user/user.action';\r\nimport {\r\n  setThemeStart,\r\n  setThemeLightStart,\r\n} from '../../redux-sagas/theme/theme.action';\r\nimport TestPanelContainer from './TestPanel.style';\r\n\r\nconst TestPanel = ({ signOutStart, setThemeStart, setThemeLightStart }) => (\r\n  <TestPanelContainer>\r\n    <button onClick={signOutStart}>Sign out </button>\r\n    <button onClick={setThemeStart}>Dark </button>\r\n    <button onClick={setThemeLightStart}>Light</button>\r\n  </TestPanelContainer>\r\n);\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  signOutStart: () => dispatch(signOutStart()),\r\n  setThemeStart: () => dispatch(setThemeStart()),\r\n  setThemeLightStart: () => dispatch(setThemeLightStart()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(TestPanel);\r\n","import PropTypes from 'prop-types';\r\n\r\nexport const ChannelPropTypes = PropTypes.shape({\r\n  groupId: PropTypes.string,\r\n  displayName: PropTypes.string,\r\n  uid: PropTypes.string,\r\n  photoURL: PropTypes.string,\r\n});\r\n\r\nexport const CurrentUserIdPropTypes = PropTypes.string.isRequired;\r\n","import { useEffect } from 'react';\r\nimport { getRef } from '../../firebase/firebase';\r\nimport { setSeen as updateSeen } from '../../firebase/channels';\r\n\r\nconst MessageState = (\r\n  channel,\r\n  currentUserId,\r\n  createChannel,\r\n  getMessages,\r\n  getRealtime,\r\n  setSeen,\r\n  deleteNotification\r\n) => {\r\n  const { groupId, uid } = channel;\r\n  useEffect(() => {\r\n    if (!groupId) {\r\n      createChannel(currentUserId, uid);\r\n    } else {\r\n      getMessages(groupId);\r\n      deleteNotification(groupId);\r\n    }\r\n  }, [\r\n    createChannel,\r\n    groupId,\r\n    uid,\r\n    currentUserId,\r\n    getMessages,\r\n    deleteNotification,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const groupRef = getRef('groups');\r\n    let listen;\r\n    if (groupId) {\r\n      listen = groupRef\r\n        .child(`${groupId}/messages`)\r\n        .orderByChild('createdAt')\r\n        .startAt(Date.now())\r\n        .on('child_added', (snap) => {\r\n          if (snap.val()) {\r\n            getRealtime({\r\n              [snap.key]: snap.val(),\r\n            });\r\n            updateSeen(channel, currentUserId);\r\n          }\r\n        });\r\n    }\r\n    return () =>\r\n      groupId &&\r\n      groupRef.child(`${groupId}/messages`).off('child_added', listen);\r\n  }, [channel, groupId, getRealtime, currentUserId]);\r\n\r\n  useEffect(() => {\r\n    const groupRef = getRef(`groups/${groupId}/messages`);\r\n    let listen;\r\n    if (groupId) {\r\n      listen = groupRef.orderByChild('seen').on('child_changed', (snap) => {\r\n        if (snap.val()?.seen) {\r\n          setSeen(snap.val().key);\r\n        }\r\n      });\r\n    }\r\n    return () =>\r\n      groupId &&\r\n      groupRef.child(`${groupId}/messages`).off('child_changed', listen);\r\n  }, [channel, groupId, getRealtime, setSeen]);\r\n};\r\n\r\nexport default MessageState;\r\n","export default __webpack_public_path__ + \"static/media/chat-light.bded4f44.png\";","export default __webpack_public_path__ + \"static/media/chat-dark.8cbc68b3.png\";","import styled from 'styled-components';\r\nimport chatLight from '../../assets/chat-light.png';\r\nimport chatDark from '../../assets/chat-dark.png';\r\n/* eslint-disable*/\r\nconst MessageContainer = styled.section`\r\n  min-height: 100%;\r\n  width: 70%;\r\n  background: url(${(props) => (props.theme.mode ? chatDark : chatLight)});\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-left: ${(props) =>\r\n    props.theme.mode ? '1px solid #EDEDED' : '1px solid #2A2F32'};\r\n  background-position: center;\r\n  background-size: contain;\r\n  opacity: 1;\r\n  transition: all 500ms linear;\r\n\r\n  @media (max-width: 650px) {\r\n    ${({ channel }) =>\r\n      channel\r\n        ? `\r\n      position: absolute;\r\n      width: 100vw;\r\n      height: 100vh;\r\n      opacity: 1;\r\n  transition: all 500ms linear;\r\n\r\n    `\r\n        : `\r\n  transition: all 500ms linear;\r\n\r\n    opacity: 0;\r\n      display: none;\r\n    `}\r\n  }\r\n\r\n  @media (max-width: 650px) and (orientation: landscape) {\r\n    ${({ channel }) =>\r\n      channel\r\n        ? `\r\n      position: absolute;\r\n      width: 100vw;\r\n      opacity: 1;\r\n      transition: all 500ms linear;\r\n       `\r\n        : `\r\n      display: none;\r\n    `}\r\n  }\r\n`;\r\n\r\nexport default MessageContainer;\r\n","import styled from 'styled-components';\r\n\r\nexport const Footer = styled.footer`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 1.6rem 1.6rem;\r\n  background: ${(props) => props.theme.header};\r\n  width: calc(100% - 3.2rem);\r\n  margin-top: auto;\r\n  z-index: 100;\r\n`;\r\n\r\nexport const SendMessage = styled.button`\r\n  outline: none;\r\n  border: none;\r\n  margin-left: 1rem;\r\n  background: transparent;\r\n`;\r\n\r\nexport const InputContainer = styled.div``;\r\nexport const IconContainer = styled.i``;\r\n","import { useRef } from 'react';\r\nimport { fileChange, setCroppedImage } from '../../helpers/helpers';\r\nimport { sendImageFb } from '../../firebase/channels';\r\n\r\nconst MessageInputState = (\r\n  channel,\r\n  currentUserId,\r\n  addMessageStart,\r\n  setModal,\r\n  editor,\r\n  setImage,\r\n  setLoading,\r\n  imageFile,\r\n  unMountModal\r\n) => {\r\n  const message = useRef(null);\r\n  const { groupId, uid } = channel;\r\n\r\n  const submitHandler = () => {\r\n    if (message?.current?.value) {\r\n      addMessageStart(groupId, currentUserId, uid, message.current.value);\r\n      message.current.value = '';\r\n    }\r\n  };\r\n\r\n  const handleFileChange = (e) => {\r\n    const file = fileChange(e, setModal);\r\n    if (!file) {\r\n      alert('Please select jpeg/.png file');\r\n    }\r\n  };\r\n\r\n  const handleCroppedImage = () => {\r\n    if (editor) {\r\n      setCroppedImage(editor, setImage);\r\n    }\r\n  };\r\n\r\n  const addImageMessage = (downloadURL) => {\r\n    addMessageStart(groupId, currentUserId, uid, downloadURL, unMountModal);\r\n    setLoading();\r\n  };\r\n\r\n  const sendImageFile = () => {\r\n    sendImageFb(imageFile, setLoading, unMountModal, addImageMessage);\r\n  };\r\n\r\n  return [\r\n    message,\r\n    submitHandler,\r\n    handleFileChange,\r\n    handleCroppedImage,\r\n    sendImageFile,\r\n  ];\r\n};\r\n\r\nexport default MessageInputState;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { addMessageStart } from '../../redux-sagas/message/message.action';\r\nimport { ChannelPropTypes } from '../../helpers/PropTypeValues';\r\nimport { Footer, SendMessage } from './MessageInput.style';\r\nimport Icon from '../shared/Icon/Icon';\r\nimport Input from '../shared/Input/Input';\r\nimport UseMessageInputState from './MessageInput.state';\r\nimport UseEditorState from '../shared/ImageEditor/Image.state';\r\nimport ImageEditor from '../shared/ImageEditor/ImageEditor';\r\n\r\nconst MessageInput = ({\r\n  channel,\r\n  currentUserId,\r\n  addMessageStart: addMessage,\r\n}) => {\r\n  const [\r\n    visible,\r\n    file,\r\n    OnMountModal,\r\n    OnUnMountModal,\r\n    editor,\r\n    setImage,\r\n    loading,\r\n    croppedImage,\r\n    setLoading,\r\n    blob,\r\n  ] = UseEditorState();\r\n  const [\r\n    message,\r\n    submitHandler,\r\n    handleFileChange,\r\n    handleCroppedImage,\r\n    sendImageFile,\r\n  ] = UseMessageInputState(\r\n    channel,\r\n    currentUserId,\r\n    addMessage,\r\n    OnMountModal,\r\n    editor,\r\n    setImage,\r\n    setLoading,\r\n    blob,\r\n    OnUnMountModal\r\n  );\r\n  return (\r\n    <Footer>\r\n      <Icon as='button' className='far fa-laugh' />\r\n      <label htmlFor='send_file'>\r\n        <Icon className='fas fa-paperclip' />\r\n      </label>\r\n      <input id='send_file' type='file' onChange={handleFileChange} />\r\n      <Input\r\n        name='message'\r\n        placeholder='Type a message'\r\n        ref={message}\r\n        autoComplete='off'\r\n      />\r\n      <SendMessage onClick={submitHandler}>\r\n        <Icon className='fas fa-paper-plane' />\r\n      </SendMessage>\r\n      <ImageEditor\r\n        visible={visible}\r\n        closeModal={OnUnMountModal}\r\n        image={file}\r\n        content='SEND'\r\n        editorRef={editor}\r\n        handleCrop={handleCroppedImage}\r\n        loading={loading}\r\n        croppedImage={croppedImage}\r\n        sendImage={sendImageFile}\r\n      />\r\n    </Footer>\r\n  );\r\n};\r\n\r\nMessageInput.propTypes = {\r\n  channel: ChannelPropTypes,\r\n  currentUserId: PropTypes.string.isRequired,\r\n  addMessageStart: PropTypes.func.isRequired,\r\n};\r\n\r\nMessageInput.defaultProps = {\r\n  channel: null,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addMessageStart: (groupId, currentUserId, receiverId, message) =>\r\n    dispatch(addMessageStart({ groupId, currentUserId, receiverId, message })),\r\n});\r\n\r\nexport default React.memo(connect(null, mapDispatchToProps)(MessageInput));\r\n","import { useEffect, useRef } from 'react';\r\nimport { setSeen } from '../../firebase/channels';\r\n\r\nconst MessageState = (channel, currentUserId, messages) => {\r\n  const messagesEndRef = useRef(null);\r\n  useEffect(() => {\r\n    setSeen(channel, currentUserId);\r\n  }, [currentUserId, channel]);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef?.current?.scrollIntoView({\r\n      behaviour: 'smooth',\r\n      block: 'end',\r\n      inline: 'nearest',\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages.length]);\r\n\r\n  return [messagesEndRef];\r\n};\r\n\r\nexport default MessageState;\r\n","import styled from 'styled-components';\r\nimport Icon from '../shared/Icon/Icon';\r\n/* eslint-disable */\r\n\r\nexport const SeenIcon = styled(Icon)`\r\n  color: ${(props) => (props.seen ? '#00acef' : '#ccc')};\r\n  font-size: 1.2rem;\r\n  margin-left: 1rem;\r\n  margin-right: 0;\r\n  cursor: default;\r\n`;\r\n\r\nexport const ChatContainer = styled.div`\r\n  overflow-y: scroll;\r\n  margin: 2rem 0 1rem 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 200px;\r\n  flex-grow: 1;\r\n`;\r\n\r\nexport const MessageContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 0 7%;\r\n  margin-top: 5px;\r\n  align-items: flex-end;\r\n  ${(props) =>\r\n    !props.position &&\r\n    `\r\n      align-items: flex-start;\r\n    `}\r\n`;\r\nexport const Message = styled.div`\r\n  font-size: 1.42rem;\r\n  line-height: 1.9rem;\r\n  position: relative;\r\n  border-radius: 7.5px;\r\n  min-width: 20%;\r\n  padding: 0.5rem;\r\n  background: ${(props) =>\r\n    props.position ? props.theme.currentUserChat : props.theme.receiverChat};\r\n`;\r\n\r\nexport const Tail = styled.span`\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 15px;\r\n  font-size: 1.2rem;\r\n  color: ${(props) => props.theme.color};\r\n`;\r\n\r\nexport const Chat = styled.span`\r\n  display: block;\r\n  font-size: 1.8rem;\r\n  color: ${(props) => props.theme.color};\r\n  font-family: 'NimbusSanTW01Con';\r\n  word-wrap: break-word;\r\n  // text-transform: capitalize;\r\n  margin-bottom: 1.3rem;\r\n`;\r\n","import React from 'react';\r\nimport formatISO from 'date-fns/formatISO';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  MessageContainer,\r\n  Tail,\r\n  Message as MessageWrap,\r\n  Chat,\r\n  SeenIcon,\r\n} from './Message.style';\r\nimport Image from '../shared/Image/Image';\r\n\r\nconst MessageList = ({ message, position, timestamp, seen }) => {\r\n  return (\r\n    <MessageContainer position={position}>\r\n      <MessageWrap position={position}>\r\n        <Tail>\r\n          {formatISO(timestamp, { representation: 'time' }).slice(0, 5)}\r\n          {seen !== null && <SeenIcon className='fas fa-check' seen={seen} />}\r\n        </Tail>\r\n        {message.includes('http') ? (\r\n          <Image src={message} />\r\n        ) : (\r\n          <Chat>{message}</Chat>\r\n        )}\r\n      </MessageWrap>\r\n    </MessageContainer>\r\n  );\r\n};\r\n\r\nMessageList.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n  position: PropTypes.bool.isRequired,\r\n  timestamp: PropTypes.number.isRequired,\r\n  seen: PropTypes.bool,\r\n};\r\n\r\nMessageList.defaultProps = {\r\n  seen: null,\r\n};\r\n\r\nexport default MessageList;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { generateUniqueUid as id } from '../../helpers/helpers';\r\nimport { ChannelPropTypes } from '../../helpers/PropTypeValues';\r\nimport { selectMessage } from '../../redux-sagas/message/message.selector';\r\nimport UseMsgState from './Message.state';\r\nimport { ChatContainer } from './Message.style';\r\nimport MessageList from './MessageList';\r\n\r\nconst Message = ({ channel, currentUserId, messages }) => {\r\n  const messagesArray = messages ? Object.values(messages) : [];\r\n  const [messagesEndRef] = UseMsgState(channel, currentUserId, messagesArray);\r\n  return (\r\n    <ChatContainer>\r\n      {messages &&\r\n        messagesArray.map((val) => (\r\n          <div key={val.key + id()}>\r\n            <MessageList\r\n              message={val.message}\r\n              position={val.createdBy === currentUserId}\r\n              timestamp={val.createdAt}\r\n              seen={val.createdBy === currentUserId ? val.seen : null}\r\n            />\r\n            <div ref={messagesEndRef} />\r\n          </div>\r\n        ))}\r\n    </ChatContainer>\r\n  );\r\n};\r\n\r\nMessage.propTypes = {\r\n  channel: ChannelPropTypes,\r\n  currentUserId: PropTypes.string.isRequired,\r\n};\r\n\r\nMessage.defaultProps = {\r\n  channel: null,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  messages: selectMessage,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Message);\r\n","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectIsLoading } from '../../redux-sagas/message/message.selector';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport Messages from './Message';\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  isLoading: selectIsLoading,\r\n});\r\n\r\nconst MessagesContainer = compose(connect(mapStateToProps), Spinner)(Messages);\r\n\r\nexport default MessagesContainer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  createChannelStart,\r\n  setCurrentChannelNullStart,\r\n} from '../../redux-sagas/channels/channels.action';\r\nimport {\r\n  getMessagesStart,\r\n  getRealtimeMessagesStart,\r\n  setSeenStart,\r\n  deleteNotificationStart,\r\n} from '../../redux-sagas/message/message.action';\r\nimport { ChannelPropTypes } from '../../helpers/PropTypeValues';\r\nimport UseMessageState from './Messages.state';\r\nimport Header from '../../components/shared/Header/Header';\r\nimport MessageContainer from './Messages.style';\r\nimport MessageInput from '../../components/MessageInput/MessageInput';\r\nimport Message from '../../components/Message/Message.container';\r\n\r\nconst Messages = ({\r\n  channel,\r\n  currentUserId,\r\n  createChannelStart: createChannel,\r\n  getMessagesStart: getMessages,\r\n  getRealtimeMessagesStart: getRealtimeMsg,\r\n  setSeenStart: setSeen,\r\n  deleteNotificationStart: deleteNotification,\r\n  setCurrentChannelNullStart: setChannelNull,\r\n}) => {\r\n  UseMessageState(\r\n    channel,\r\n    currentUserId,\r\n    createChannel,\r\n    getMessages,\r\n    getRealtimeMsg,\r\n    setSeen,\r\n    deleteNotification\r\n  );\r\n  return (\r\n    <MessageContainer channel={!!channel}>\r\n      <Header\r\n        icon2='fas fa-home'\r\n        onClick={setChannelNull}\r\n        text\r\n        label={channel?.displayName}\r\n        chatProfile={channel?.photoURL}\r\n        position='right'\r\n      />\r\n      <Message channel={channel} currentUserId={currentUserId} />\r\n      <MessageInput channel={channel} currentUserId={currentUserId} />\r\n    </MessageContainer>\r\n  );\r\n};\r\n\r\nMessages.propTypes = {\r\n  channel: ChannelPropTypes,\r\n  currentUserId: PropTypes.string.isRequired,\r\n  createChannelStart: PropTypes.func.isRequired,\r\n  getMessagesStart: PropTypes.func.isRequired,\r\n  getRealtimeMessagesStart: PropTypes.func.isRequired,\r\n  setSeenStart: PropTypes.func.isRequired,\r\n  deleteNotificationStart: PropTypes.func.isRequired,\r\n  setCurrentChannelNullStart: PropTypes.func.isRequired,\r\n};\r\n\r\nMessages.defaultProps = {\r\n  channel: null,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  createChannelStart: (currentUserId, receiverId) =>\r\n    // eslint-disable-next-line\r\n    dispatch(createChannelStart(currentUserId, receiverId)),\r\n  getMessagesStart: (id) => dispatch(getMessagesStart(id)),\r\n  getRealtimeMessagesStart: (chat) => dispatch(getRealtimeMessagesStart(chat)),\r\n  setSeenStart: (id) => dispatch(setSeenStart(id)),\r\n  deleteNotificationStart: (groupId) =>\r\n    // eslint-disable-next-line\r\n    dispatch(deleteNotificationStart(groupId)),\r\n  setCurrentChannelNullStart: () => dispatch(setCurrentChannelNullStart()),\r\n});\r\nexport default connect(null, mapDispatchToProps)(Messages);\r\n","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectCurrentChannelLoading } from '../../redux-sagas/channels/channels.selector';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport Messages from './Messages';\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  isLoading: selectCurrentChannelLoading,\r\n});\r\n\r\nconst MessagesContainer = compose(connect(mapStateToProps), Spinner)(Messages);\r\n\r\nexport default MessagesContainer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUserId } from '../../redux-sagas/user/user.selector';\r\nimport { selectCurrentChannel } from '../../redux-sagas/channels/channels.selector';\r\nimport TestPanel from '../../components/TestPanel/TestPanel';\r\nimport Messages from '../Messages/Messages.container';\r\nimport { ChannelPropTypes } from '../../helpers/PropTypeValues';\r\n\r\nconst ChatPanel = ({ currentUserId, channel }) => {\r\n  return channel ? (\r\n    <Messages channel={channel} currentUserId={currentUserId} />\r\n  ) : (\r\n    <TestPanel />\r\n  );\r\n};\r\n\r\nChatPanel.propTypes = {\r\n  currentUserId: PropTypes.string.isRequired,\r\n  channel: ChannelPropTypes,\r\n};\r\n\r\nChatPanel.defaultProps = {\r\n  channel: null,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  currentUserId: selectUserId,\r\n  channel: selectCurrentChannel,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ChatPanel);\r\n","import { useEffect } from 'react';\r\nimport {\r\n  getRef,\r\n  isOfflineForDatabase,\r\n  isOnlineForDatabase,\r\n} from '../../firebase/firebase';\r\n\r\nconst Home = (userId, displayChat) => {\r\n  useEffect(() => {\r\n    const userStatusDatabaseRef = getRef(`status/${userId}`);\r\n    const listenToRef = getRef('.info/connected');\r\n    const listen = listenToRef.on('value', (snapshot) => {\r\n      if (snapshot.val()) {\r\n        userStatusDatabaseRef\r\n          .onDisconnect()\r\n          .set(isOfflineForDatabase)\r\n          .then(() => {\r\n            userStatusDatabaseRef.set(isOnlineForDatabase);\r\n          });\r\n      }\r\n    });\r\n    return () => listenToRef.off('value', listen);\r\n  }, [userId]);\r\n\r\n  useEffect(() => {\r\n    const channelRef = getRef('channels');\r\n    const listen = channelRef\r\n      .child(userId)\r\n      .orderByChild('createdAt')\r\n      .startAt(Date.now())\r\n      .on('child_added', (snap) => {\r\n        if (snap.val()) {\r\n          displayChat([snap.val()]);\r\n        }\r\n      });\r\n    return () => channelRef.child(userId).off('child_added', listen);\r\n  }, [userId, displayChat]);\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUserId } from '../../redux-sagas/user/user.selector';\r\nimport { displayChatListStart } from '../../redux-sagas/channels/channels.action';\r\nimport HomeContainer from './Home.style';\r\nimport ChatList from '../../components/ChatList/ChatList';\r\nimport ChatPanel from '../ChatPanel/ChatPanel';\r\n\r\nimport UseHomeState from './Home.state';\r\n\r\nconst Home = ({ userId, displayChatListStart: displayChat }) => {\r\n  UseHomeState(userId, displayChat);\r\n  return (\r\n    <HomeContainer>\r\n      <ChatList />\r\n      <ChatPanel />\r\n    </HomeContainer>\r\n  );\r\n};\r\n\r\nHome.propTypes = {\r\n  userId: PropTypes.string.isRequired,\r\n  displayChatListStart: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  displayChatListStart: (chatList) => dispatch(displayChatListStart(chatList)),\r\n});\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  userId: selectUserId,\r\n});\r\n\r\nexport default React.memo(connect(mapStateToProps, mapDispatchToProps)(Home));\r\n","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  padding: 0.7rem;\r\n  background: ${(props) => (props.danger ? '#CC0000' : '#00C851')};\r\n  color: #fff;\r\n  font-family: 'Open Sans Condensed';\r\n  font-size: 1.6rem;\r\n  font-weight: 600;\r\n  transition: all 500ms linear;\r\n  margin: 1.5rem 1.5rem;\r\n  outline: none;\r\n  border: none;\r\n  width: 10rem;\r\n  cursor: pointer;\r\n  border-radius: 8px;\r\n  &:hover {\r\n    font-weight: 600;\r\n    background: black;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ButtonContainer from './Button.styles';\r\n\r\nconst Button = ({ content, danger, onClick, style }) => (\r\n  <ButtonContainer danger={danger} onClick={onClick} style={style}>\r\n    {content}\r\n  </ButtonContainer>\r\n);\r\n\r\nButton.propTypes = {\r\n  content: PropTypes.string.isRequired,\r\n  danger: PropTypes.bool,\r\n  onClick: PropTypes.func.isRequired,\r\n  style: PropTypes.shape({\r\n    margin: PropTypes.number,\r\n  }),\r\n};\r\n\r\nButton.defaultProps = {\r\n  danger: false,\r\n  style: null,\r\n};\r\n\r\nexport default Button;\r\n","import styled from 'styled-components';\r\n/* eslint-disable */\r\nconst Icon = styled.i`\r\n  color: ${(props) =>\r\n    (props.color && props.theme.mode && '#707477') || props.theme.Icon};\r\n  font-size: ${(props) => props.fontSize}rem;\r\n  margin-right: ${(props) => props.marginRight}rem;\r\n  cursor: pointer;\r\n  -webkit-text-stroke: 0px ${(props) => props.color || props.theme.Icon};\r\n\r\n  &:hover {\r\n    color: ${(props) =>\r\n      props.theme.mode ? 'rgba(255,255,255,.8)' : '#212529'};\r\n  }\r\n`;\r\n\r\nexport default Icon;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Icon from './Icon.style';\r\n\r\nconst IconContainer = ({ fontSize, marginRight, className }) => {\r\n  return (\r\n    <Icon fontSize={fontSize} marginRight={marginRight} className={className} />\r\n  );\r\n};\r\n\r\nIconContainer.propTypes = {\r\n  fontSize: PropTypes.number,\r\n  marginRight: PropTypes.number,\r\n  className: PropTypes.string.isRequired,\r\n};\r\n\r\nIconContainer.defaultProps = {\r\n  fontSize: 2.3,\r\n  marginRight: 2.8,\r\n};\r\n\r\nexport default IconContainer;\r\n","import React, { createContext, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const ModalContext = createContext({\r\n  visible: false,\r\n  setModalVisible: () => {},\r\n});\r\n\r\nconst ModalProvider = ({ children }) => {\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const setModalVisible = () => {\r\n    setVisible((show) => !show);\r\n  };\r\n\r\n  return (\r\n    <ModalContext.Provider\r\n      value={{\r\n        visible,\r\n        setModalVisible,\r\n      }}\r\n    >\r\n      {children}\r\n    </ModalContext.Provider>\r\n  );\r\n};\r\n\r\nModalProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default ModalProvider;\r\n","import styled from 'styled-components';\r\n\r\nconst ModalContainer = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  box-shadow: 0.5px 0.5px 0.5px rgb(49, 46, 46);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000000;\r\n`;\r\n\r\nexport default ModalContainer;\r\n","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport ModalContainer from './Modal.style';\r\n\r\nconst Modal = ({ visible, children }) => {\r\n  return (\r\n    <CSSTransition in={visible} timeout={500} classNames='fade' unmountOnExit>\r\n      <ModalContainer>{children}</ModalContainer>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nModal.propTypes = {\r\n  visible: PropTypes.bool.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\nexport default Modal;\r\n","/* eslint-disable */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Input, Icon } from './Input.style';\r\n\r\nconst InputContainer = (props, ref) => {\r\n  return (\r\n    <>\r\n      <Input {...props} ref={ref} />\r\n      {props.icon && <Icon className='fas fa-search' />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.forwardRef(InputContainer);\r\n","import styled from 'styled-components';\r\n\r\nexport const InputWrapper = styled.div`\r\n  padding: 1rem;\r\n  display: flex;\r\n  position: relative;\r\n  border-bottom: 0.5px solid ${(props) => props.theme.border};\r\n  /* margin-top: 6.7rem; */\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  width: ${(props) => props.width || 100}%;\r\n  padding: ${(props) => (props.icon ? 1 : 1.5)}rem;\r\n  position: relative;\r\n  border-radius: 25px;\r\n  background: ${(props) => props.theme.search};\r\n  outline: none;\r\n  border: none;\r\n  padding-left: ${(props) => (props.icon ? 6.5 : 2)}rem;\r\n  color: ${(props) => props.theme.textLight};\r\n\r\n  &::placeholder {\r\n    color: ${(props) => props.theme.textLight};\r\n    // padding-left: 8rem;\r\n    font-family: sans-serif;\r\n    font-weight: 300;\r\n    font-size: 1.4rem;\r\n  }\r\n`;\r\n\r\nexport const Icon = styled.i`\r\n  color: ${(props) => props.theme.Icon};\r\n  font-size: 1.8rem;\r\n  position: absolute;\r\n  left: 6%;\r\n  top: 33%;\r\n`;\r\n","/*eslint-disable */\r\nimport React from 'react';\r\nimport SpinnerOverlay from './SpinnerOverlay';\r\n\r\nconst WithSpinner = (WrappedComponent) => ({ isLoading, ...otherProps }) => {\r\n  return isLoading ? <SpinnerOverlay /> : <WrappedComponent {...otherProps} />;\r\n};\r\n\r\nexport default WithSpinner;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Image from '../Image/Image';\r\nimport Button from '../Button/Button';\r\n\r\nconst ImageView = ({ src, action }) => {\r\n  return (\r\n    <>\r\n      <Image width={25} height={25} src={src} />\r\n      <Button danger content='CLOSE' onClick={action} />\r\n    </>\r\n  );\r\n};\r\n\r\nImageView.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  action: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default React.memo(ImageView);\r\n","import styled from 'styled-components';\r\n\r\nexport const ImageContainer = styled.img`\r\n  width: ${(props) => props.height}rem;\r\n  height: ${(props) => props.height}rem;\r\n  border-radius: calc(${(props) => props.height}rem / 2);\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background: none;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n","import React, { useContext } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport PropTypes from 'prop-types';\r\nimport Modal from '../Modal/Modal';\r\nimport ImageView from '../ImageView/ImageView';\r\nimport { ModalContext as ModalProvider } from '../context/Modal';\r\nimport { selectProfilePhoto } from '../../../redux-sagas/user/user.selector';\r\nimport { ImageContainer, Button } from './ProfileImage.style';\r\n\r\nconst ProfileImage = ({ profilePic, chatProfile = null, height = 4 }) => {\r\n  const { visible, setModalVisible } = useContext(ModalProvider);\r\n  return (\r\n    <>\r\n      <Button onClick={setModalVisible}>\r\n        <ImageContainer\r\n          src={chatProfile || profilePic}\r\n          alt='user-photo'\r\n          loading='lazy'\r\n          height={height}\r\n        />\r\n      </Button>\r\n      <Modal visible={visible}>\r\n        <ImageView action={setModalVisible} src={chatProfile || profilePic} />\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nProfileImage.propTypes = {\r\n  profilePic: PropTypes.string.isRequired,\r\n  chatProfile: PropTypes.string,\r\n  height: PropTypes.number,\r\n};\r\n\r\nProfileImage.defaultProps = {\r\n  chatProfile: null,\r\n  height: 4,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  profilePic: selectProfilePhoto,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ProfileImage);\r\n","import styled from 'styled-components';\r\n\r\nconst Image = styled.img`\r\n  height: ${(props) => props.height}rem;\r\n  width: ${(props) => props.width}rem;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nexport default Image;\r\n","import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ImageContainer from './Image.style';\r\n\r\nconst Image = ({ height = 20, width = 20, src }) => {\r\n  return (\r\n    <>\r\n      <ImageContainer height={height} width={width} src={src} />\r\n    </>\r\n  );\r\n};\r\n\r\nImage.propTypes = {\r\n  height: PropTypes.number,\r\n  width: PropTypes.number,\r\n  src: PropTypes.string.isRequired,\r\n};\r\n\r\nImage.defaultProps = {\r\n  height: 20,\r\n  width: 20,\r\n};\r\n\r\nexport default React.memo(Image);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport Icon from '../Icon/Icon';\r\n\r\nconst Navigate = ({ navigateTo, iconName }) => {\r\n  return (\r\n    <Link to={navigateTo}>\r\n      <Icon className={iconName} />\r\n    </Link>\r\n  );\r\n};\r\n\r\nNavigate.propTypes = {\r\n  navigateTo: PropTypes.string.isRequired,\r\n  iconName: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Navigate;\r\n","import { useState, useRef } from 'react';\r\n\r\nconst ImageEditorState = () => {\r\n  const [modal, setModal] = useState({\r\n    visible: false,\r\n    file: null,\r\n    croppedImage: null,\r\n    loading: false,\r\n    blob: null,\r\n  });\r\n  const editor = useRef();\r\n  const { visible, file, loading, croppedImage, blob } = modal;\r\n  const onMountModal = (isVisible, photo) => {\r\n    setModal({\r\n      ...modal,\r\n      visible: isVisible,\r\n      file: photo,\r\n    });\r\n  };\r\n\r\n  const OnUnMountModal = () => {\r\n    setModal({\r\n      ...modal,\r\n      visible: false,\r\n      file: null,\r\n      croppedImage: null,\r\n      loading: false,\r\n    });\r\n  };\r\n\r\n  const setImage = (img, info) => {\r\n    setModal({\r\n      ...modal,\r\n      croppedImage: img,\r\n      blob: info,\r\n    });\r\n  };\r\n\r\n  const setLoading = () => {\r\n    setModal({\r\n      ...modal,\r\n      loading: false,\r\n    });\r\n  };\r\n\r\n  return [\r\n    visible,\r\n    file,\r\n    onMountModal,\r\n    OnUnMountModal,\r\n    editor,\r\n    setImage,\r\n    loading,\r\n    croppedImage,\r\n    setLoading,\r\n    blob,\r\n  ];\r\n};\r\n\r\nexport default ImageEditorState;\r\n","import styled from 'styled-components';\r\n\r\nexport const ModalContainer = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  box-shadow: 0.5px 0.5px 0.5px rgb(49, 46, 46);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000000;\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport const Editor = styled.div`\r\n  width: 50%;\r\n  border-radius: 8px;\r\n  z-index: 100000;\r\n  box-shadow: 0.5px 0.5px 0.5px rgb(0, 0, 0);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n`;\r\n\r\nexport const CloseButton = styled.button`\r\n  position: absolute;\r\n  top: 5%;\r\n  right: 5%;\r\n  outline: none;\r\n  border: none;\r\n  background: #121212;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const Close = styled.span`\r\n  font-size: 1.8rem;\r\n  font-weight: 500;\r\n  color: #bb86fc;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AvatarEditor from 'react-avatar-editor';\r\nimport {\r\n  Editor,\r\n  CloseButton,\r\n  Close,\r\n  ButtonContainer,\r\n} from './ImageEditor.style';\r\nimport Button from '../Button/Button';\r\nimport Spinner from '../../Spinner/SpinnerComponent';\r\nimport Modal from '../Modal/Modal';\r\n\r\nconst ImageEditor = ({\r\n  visible,\r\n  closeModal,\r\n  image,\r\n  content,\r\n  editorRef,\r\n  handleCrop,\r\n  loading,\r\n  croppedImage,\r\n  sendImage,\r\n}) => {\r\n  return (\r\n    <Modal visible={visible}>\r\n      <Editor>\r\n        {loading ? (\r\n          <Spinner />\r\n        ) : (\r\n          <>\r\n            {!croppedImage ? (\r\n              <AvatarEditor\r\n                ref={editorRef}\r\n                image={image}\r\n                width={200}\r\n                height={200}\r\n                border={50}\r\n                scale={1.5}\r\n              />\r\n            ) : (\r\n              <img\r\n                src={croppedImage}\r\n                width='200'\r\n                height='200'\r\n                alt='croppedImage'\r\n              />\r\n            )}\r\n            <ButtonContainer>\r\n              <Button danger content='CLOSE' onClick={closeModal} />\r\n\r\n              {croppedImage ? (\r\n                <Button content={content} onClick={sendImage} />\r\n              ) : (\r\n                <Button content='CROP' onClick={handleCrop} />\r\n              )}\r\n            </ButtonContainer>\r\n            <CloseButton onClick={closeModal}>\r\n              <Close>&#10006;</Close>\r\n            </CloseButton>\r\n          </>\r\n        )}\r\n      </Editor>\r\n    </Modal>\r\n  );\r\n};\r\nImageEditor.propTypes = {\r\n  visible: PropTypes.bool.isRequired,\r\n  closeModal: PropTypes.func.isRequired,\r\n  image: PropTypes.string,\r\n  content: PropTypes.string.isRequired,\r\n  handleCrop: PropTypes.func.isRequired,\r\n  loading: PropTypes.bool.isRequired,\r\n  croppedImage: PropTypes.string,\r\n  sendImage: PropTypes.func.isRequired,\r\n  editorRef: PropTypes.shape({\r\n    current: PropTypes.shape({\r\n      value: PropTypes.elementType,\r\n    }),\r\n  }).isRequired,\r\n};\r\n\r\nImageEditor.defaultProps = {\r\n  image: null,\r\n  croppedImage: null,\r\n};\r\n\r\nexport default ImageEditor;\r\n"],"sourceRoot":""}