{"version":3,"sources":["redux-sagas/channels/channels.type.js","firebase/firebase.js","redux-sagas/user/user.type.js","redux-sagas/theme/theme.type.js","redux-sagas/message/message.action.js","redux-sagas/channels/channels.action.js","redux-sagas/user/user.action.js","redux-sagas/theme/theme.action.js","firebase/channels.js","components/Spinner/SpinnerOverlay.js","components/Spinner/Spinner.style.js","helpers/helpers.js","redux-sagas/user/user.selector.js","components/Spinner/SpinnerComponent.js","redux-sagas/theme/theme.selector.js","redux-sagas/user/user.reducer.js","helpers/localstorage.js","redux-sagas/theme/theme.reducer.js","redux-sagas/channels/channels.reducer.js","redux-sagas/message/helper.js","redux-sagas/message/message.reducer.js","redux-sagas/root-reducer.js","redux-sagas/user/user.saga.js","redux-sagas/theme/theme.saga.js","redux-sagas/channels/channels.saga.js","redux-sagas/message/message.saga.js","redux-sagas/root-saga.js","redux-sagas/store.js","serviceWorker.js","Route/PrivateRoute.js","components/error-boundary/error-boundary.style.js","components/error-boundary/Error-boundary.js","Route/Route.js","helpers/theme.js","App.state.js","App.js","index.js","redux-sagas/message/message.type.js"],"names":["channelActionTypes","DISPLAY_USER_LIST_START","DISPLAY_USER_LIST_SUCCESS","DISPLAY_USER_LIST_FAILURE","DISPLAY_ADDED_CHANNEL_START","DISPLAY_ADDED_CHANNEL_SUCCESS","DISPLAY_ADDED_CHANNEL_FAILURE","CREATE_CHANNEL_START","CREATE_CHANNEL_SUCCESS","CREATE_CHANNEL_FAILURE","SET_CURRENT_CHANNEL_START","SET_CURRENT_CHANNEL_SUCCESS","SET_CURRENT_CHANNEL_NULL_START","SET_CURRENT_CHANNEL_NULL_SUCCESS","UNSUBSCRIBE_CHANNEL","firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","auth","storage","database","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","timestamp","ServerValue","TIMESTAMP","isOfflineForDatabase","state","last_changed","isOnlineForDatabase","getRef","parent","ref","signInWithGoogle","a","signInWithPopup","res","signOut","getUser","userPayload","userRef","child","uid","once","user","val","createUserDocument","userDetails","exists","set","groups","addUser","searchUser","username","orderByChild","startAt","endAt","limitToLast","users","getUserDetail","userId","groupId","Object","values","displayName","photoURL","addedChannelsList","currentUserId","channelRef","channels","usersArray","entries","channelsList","map","channelDetail","type","Promise","all","privateChannels","getChannelsList","userTypes","GOOGLE_SIGN_IN_START","GOOGLE_SIGN_IN_SUCCESS","GOOGLE_SIGN_IN_FAILURE","CHECK_USER_SESSION","SIGN_IN_SUCCESS","SIGN_IN_FAILURE","SIGN_OUT_START","SIGN_OUT_SUCCESS","CHANGE_PROFILE_START","CHANGE_PROFILE_SUCCESS","themeActionTypes","SET_COLOR_THEME_START","SET_COLOR_THEME","SET_COLOR_THEME_FAILURE","SET_COLOR_THEME_LIGHT_START","SET_COLOR_THEME_LIGHT","SET_COLOR_THEME_LIGHT_FAILURE","getMessagesStart","MessageActionTypes","GET_MESSAGES_START","payload","getMessagesSuccess","messages","GET_MESSAGES_SUCCESS","getMessagesFailure","GET_MESSAGES_FAILURE","addMessageStart","message","ADD_MESSAGES_START","addMessageSuccess","ADD_MESSAGES_SUCCESS","addMessageFailure","ADD_MESSAGES_FAILURE","getRealtimeMessagesStart","GET_REALTIME_MSG_START","getRealtimeMessagesSuccess","GET_REALTIME_MSG_SUCCESS","getRealtimeMessagesFailure","GET_REALTIME_MSG_FAILURE","setSeenStart","id","SET_MSG_SEEN_START","setSeenSuccess","SET_MSG_SEEN_SUCCESS","getNotificationStart","GET_NOTIFICATION_START","getNotificationSuccess","msg","GET_NOTIFICATION_SUCCESS","getNotificationFailure","GET_NOTIFICATION_FAILURE","getRealtimeNotificationStart","ADD_REALTIME_NOTIFICATION_START","getRealtimeNotificationSuccess","ADD_REALTIME_NOTIFICATION_SUCCESS","deleteNotificationStart","DELETE_NOTIFICATION_START","deleteNotificationSuccess","DELETE_NOTIFICATION_SUCCESS","clearUpMessage","CLEAR_UP_MESSAGE","unsubscribeNotification","UNSUBSCRIBE_NOTIFICATION","displayChatListStart","ChannelActionTypes","displayChatListSuccess","displayChatListFailure","displayAddedChatStart","displayAddedChatSuccess","displayAddedChatFailure","createChannelStart","receiverId","createChannelSuccess","channel","createChannelFailure","setCurrentChannelStart","setCurrentChannelSuccess","setCurrentChannelNullStart","setCurrentChannelNullSuccess","unsubscribeChannel","googleSignInStart","UserTypes","googleSignInSuccess","googleSignInFailure","signInSuccess","signInFailure","signOutStart","signOutSuccess","checkUserSession","changeProfileStart","changeProfileSuccess","setThemeStart","setTheme","setThemeFailure","setThemeLightStart","setThemeLight","setThemeLightFailure","createChannel","groupRef","currentUserChannel","receiverChannel","push","key","createdBy","receiver","createdAt","addMessages","groupChild","messageObject","seen","getMessagesFromDb","groupMsg","messagesKey","keys","setSeen","equalTo","snapshot","forEach","update","getNotifications","fetchNotification","changeProfilePicture","unMount","currentUser","e","alert","sendImageFb","imageFile","setLoading","unMountModal","storeImage","generateUniqueUid","storageRef","put","metaData","on","getDownloadURL","then","downloadURL","SpinnerOverlay","styled","div","props","theme","chatContainer","SpinnerContainer","uploadFileType","contentType","uuidv4","fileChange","setModal","file","target","files","fileType","name","split","reader","FileReader","includes","readAsDataURL","addEventListener","result","setCroppedImage","editor","setImage","current","getImageScaledToCanvas","toBlob","blob","imageURL","URL","createObjectURL","selectUser","selectIsUserAuthenticated","createSelector","selectProfilePhoto","loading","selectUsername","selectIsUserLoaded","userLoading","selectUserId","SpinnerComponent","selectBackground","app","initialState","UserReducer","action","value","window","localStorage","setItem","JSON","stringify","themeReducer","chatList","success","currentChannel","currentChannelLoading","ChannelReducer","modifySeenStatus","modifiedMessage","notificationLoading","notifications","reduce","accumulator","rootReducer","combineReducers","userReducer","channelReducer","messageReducer","googleSignIn","onGoogleSignInStart","onSignOutStart","onCheckUserSessionStart","changeProfile","onChangeProfileStart","userSagas","email","call","userAction","takeLatest","logout","console","log","setThemeDark","onChangeThemeStart","setLightTheme","onChangeThemeLightStart","themeSagas","getChannel","OnDisplayChannelLists","getAddedChannel","onDisplayAddedChannel","OnCreateChannel","onCreateChannelStart","setCurrentChannel","OnSetCurrentChannelStart","setCurrentChannelNull","OnSetCurrentChannelNullStart","channelSagas","channelLists","getMessage","onGetMessagesStart","addMessage","OnaddMessageStart","getRealtimeMsg","OnGetRealTimeMsgStart","setMsgSeen","OnSetMsgSeen","unsubscribe","OnFetchNotificationStart","addNotification","OnAddNotificationStart","deleteNotification","OnDeleteNotificationStart","messageSagas","getMsgDb","task","cancel","takeEvery","notification","take","rootSaga","sagasMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","mapStateToProps","createStructuredSelector","isAuthenticated","connect","Component","component","rest","render","to","ErrorImageOverlay","ErrorImageContainer","imageUrl","ErrorImageText","h2","ErrorBoundary","React","constructor","super","this","hasErrored","componentDidCatch","info","children","Home","lazy","Auth","Profile","AppRoute","fallback","exact","path","lightTheme","mode","header","sideContainer","status","statusHover","search","textLight","color","Icon","border","currentUserChat","receiverChat","darkTheme","AppState","history","displayChat","useState","AppLoading","setAppLoading","useEffect","listenToAuth","onAuthStateChanged","snap","userPreferredTheme","parse","getItem","AppTheme","withRouter","dispatch","userSession","displayChatList","UseAppState","rootElement","document","getElementById","ReactDOM","href","origin","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","SET_MSG_SEEN_FAILURE"],"mappings":"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","file":"static/js/main.db8972dd.chunk.js","sourcesContent":["const channelActionTypes = {\r\n  DISPLAY_USER_LIST_START: 'DISPLAY_USER_LIST_START',\r\n  DISPLAY_USER_LIST_SUCCESS: 'DISPLAY_USER_LIST_SUCCESS',\r\n  DISPLAY_USER_LIST_FAILURE: 'DISPLAY_USER_LIST_FAILURE',\r\n\r\n  DISPLAY_ADDED_CHANNEL_START: 'DISPLAY_ADDED_CHANNEL_START',\r\n  DISPLAY_ADDED_CHANNEL_SUCCESS: 'DISPLAY_ADDED_CHANNEL_SUCCESS',\r\n  DISPLAY_ADDED_CHANNEL_FAILURE: 'DISPLAY_ADDED_CHANNEL_FAILURE',\r\n\r\n  CREATE_CHANNEL_START: 'CREATE_CHANNEL_START',\r\n  CREATE_CHANNEL_SUCCESS: 'CREATE_CHANNEL_SUCCESS',\r\n  CREATE_CHANNEL_FAILURE: 'CREATE_CHANNEL_FAILURE',\r\n\r\n  SET_CURRENT_CHANNEL_START: 'SET_CURRENT_CHANNEL_START',\r\n  SET_CURRENT_CHANNEL_SUCCESS: 'SET_CURRENT_CHANNEL_SUCCESS',\r\n\r\n  SET_CURRENT_CHANNEL_NULL_START: 'SET_CURRENT_CHANNEL_NULL_START',\r\n  SET_CURRENT_CHANNEL_NULL_SUCCESS: 'SET_CURRENT_CHANNEL_NULL_SUCCESS',\r\n\r\n  UNSUBSCRIBE_CHANNEL: 'UNSUBSCRIBE_CHANNEL',\r\n};\r\n\r\nexport default channelActionTypes;\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\nimport 'firebase/storage';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_APIKEY,\r\n  authDomain: process.env.REACT_APP_AUTHDOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECTID,\r\n  storageBucket: process.env.REACT_APP_STORAGEBUCKET,\r\n  messagingSenderId: process.env.REACT_APP_SENDERID,\r\n  appId: process.env.REACT_APP_APPID,\r\n  measurementId: process.env.REACT_APP_MEASUREMENTID,\r\n};\r\n\r\nif (!firebase.apps.length) {\r\n  firebase.initializeApp(firebaseConfig);\r\n}\r\n\r\nexport const auth = firebase.auth();\r\nexport const storage = firebase.storage();\r\nexport const database = firebase.database();\r\nexport const check = () => console.log(auth.currentUser);\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\r\n\r\nexport const timestamp = firebase.database.ServerValue.TIMESTAMP;\r\nexport const isOfflineForDatabase = {\r\n  state: 'offline',\r\n  last_changed: firebase.database.ServerValue.TIMESTAMP,\r\n};\r\n\r\nexport const isOnlineForDatabase = {\r\n  state: 'online',\r\n  last_changed: firebase.database.ServerValue.TIMESTAMP,\r\n};\r\n\r\n// ref\r\nexport const getRef = (parent) => database.ref(parent);\r\n\r\n// auth\r\nexport const signInWithGoogle = async () => {\r\n  const res = await auth.signInWithPopup(googleProvider);\r\n  return res;\r\n};\r\n\r\nexport const signOut = async () => {\r\n  const res = await auth.signOut();\r\n  return res;\r\n};\r\n\r\nexport const getUser = async (userPayload) => {\r\n  const userRef = getRef('users');\r\n  const user = await userRef.child(userPayload.uid).once('value');\r\n  return user.val();\r\n};\r\nexport const createUserDocument = async (userDetails) => {\r\n  if (!userDetails?.uid) return {};\r\n\r\n  try {\r\n    const userRef = database.ref(`users/${userDetails?.uid}`);\r\n    const user = await userRef.once('value');\r\n    if (user.exists()) {\r\n      return user.val();\r\n    }\r\n    const addUser = await userRef.set({\r\n      ...userDetails,\r\n      groups: [],\r\n    });\r\n    return addUser;\r\n  } catch (e) {\r\n    return e;\r\n  }\r\n};\r\n\r\nexport const searchUser = async (username) => {\r\n  try {\r\n    const users = await database\r\n      .ref('users')\r\n      .orderByChild('displayName')\r\n      .startAt(`%${username}%`)\r\n      .endAt(`${username}\\uf8ff`)\r\n      .limitToLast(2)\r\n      .once('value');\r\n\r\n    return users.val();\r\n  } catch (e) {\r\n    return e;\r\n  }\r\n};\r\n\r\nexport const addChannelToUserId = async (currentUserId, match) => {\r\n  const channelRef = getRef('channels');\r\n  await channelRef.child(currentUserId).set({\r\n    private: true,\r\n    user: match.params.userId,\r\n  });\r\n  await database.ref('channel').child(match.params.userId).set({\r\n    private: true,\r\n    user: currentUserId,\r\n  });\r\n};\r\n\r\nexport const getUserDetail = async (userId, groupId) => {\r\n  try {\r\n    const userRef = getRef('users');\r\n    const user = await userRef.child(userId).once('value');\r\n    const [displayName, , photoURL, uid] = Object.values(user.val());\r\n    return {\r\n      groupId,\r\n      displayName,\r\n      uid,\r\n      photoURL,\r\n    };\r\n  } catch (e) {\r\n    return e;\r\n  }\r\n};\r\n\r\nexport const addedChannelsList = async (currentUserId) => {\r\n  const channelRef = getRef('channels');\r\n  const channels = await channelRef.child(currentUserId).once('value');\r\n  if (!channels.exists()) return [];\r\n  const usersArray = Object.entries(channels.val());\r\n  const channelsList = usersArray.map(async ([uid, channelDetail]) => {\r\n    if (channelDetail.type === 'private') {\r\n      const user = await getUserDetail(uid, channelDetail.groupId);\r\n      return user;\r\n    }\r\n    return null;\r\n  });\r\n  const privateChannels = await Promise.all(channelsList);\r\n  return privateChannels;\r\n};\r\n\r\nexport const getChannelsList = async (usersArray) => {\r\n  const channelsList = usersArray.map(async ({ userId, groupId, type }) => {\r\n    if (type === 'private') {\r\n      const user = await getUserDetail(userId, groupId);\r\n      return user;\r\n    }\r\n    return null;\r\n  });\r\n  const privateChannels = await Promise.all(channelsList);\r\n  return privateChannels;\r\n};\r\n","const userTypes = {\r\n  GOOGLE_SIGN_IN_START: 'GOOGLE_SIGN_IN_START',\r\n  GOOGLE_SIGN_IN_SUCCESS: 'GOOGLE_SIGN_IN_SUCCESS',\r\n  GOOGLE_SIGN_IN_FAILURE: 'GOOGLE_SIGN_IN_FAILURE',\r\n\r\n  CHECK_USER_SESSION: 'CHECK_USER_SESSION',\r\n  SIGN_IN_SUCCESS: 'SIGN_IN_SUCCESS',\r\n  SIGN_IN_FAILURE: 'SIGN_IN_FAILURE',\r\n\r\n  SIGN_OUT_START: 'SIGN_OUT_START',\r\n  SIGN_OUT_SUCCESS: 'SIGN_OUT_SUCCESS',\r\n\r\n  CHANGE_PROFILE_START: 'CHANGE_PROFILE_START',\r\n  CHANGE_PROFILE_SUCCESS: 'CHANGE_PROFILE_SUCCESS',\r\n};\r\n\r\nexport default userTypes;\r\n","// eslint-disable-next-line\r\nexport const themeActionTypes = {\r\n  SET_COLOR_THEME_START: 'SET_COLOR_THEME_START',\r\n  SET_COLOR_THEME: 'SET_COLOR_THEME',\r\n  SET_COLOR_THEME_FAILURE: 'SET_COLOR_THEME_FAILURE',\r\n\r\n  SET_COLOR_THEME_LIGHT_START: 'SET_COLOR_THEME_LIGHT_START',\r\n  SET_COLOR_THEME_LIGHT: 'SET_COLOR_THEME_LIGHT',\r\n  SET_COLOR_THEME_LIGHT_FAILURE: 'SET_COLOR_THEME_LIGHT_FAILURE',\r\n};\r\n","import MessageActionTypes from './message.type';\r\n\r\nexport const getMessagesStart = (groupId) => ({\r\n  type: MessageActionTypes.GET_MESSAGES_START,\r\n  payload: groupId,\r\n});\r\n\r\nexport const getMessagesSuccess = (messages = null) => ({\r\n  type: MessageActionTypes.GET_MESSAGES_SUCCESS,\r\n  payload: messages,\r\n});\r\n\r\nexport const getMessagesFailure = () => ({\r\n  type: MessageActionTypes.GET_MESSAGES_FAILURE,\r\n});\r\n\r\nexport const addMessageStart = (message) => ({\r\n  type: MessageActionTypes.ADD_MESSAGES_START,\r\n  payload: message,\r\n});\r\n\r\nexport const addMessageSuccess = (message) => ({\r\n  type: MessageActionTypes.ADD_MESSAGES_SUCCESS,\r\n  payload: message,\r\n});\r\n\r\nexport const addMessageFailure = () => ({\r\n  type: MessageActionTypes.ADD_MESSAGES_FAILURE,\r\n});\r\n\r\nexport const getRealtimeMessagesStart = (groupId) => ({\r\n  type: MessageActionTypes.GET_REALTIME_MSG_START,\r\n  payload: groupId,\r\n});\r\n\r\nexport const getRealtimeMessagesSuccess = (messages = null) => ({\r\n  type: MessageActionTypes.GET_REALTIME_MSG_SUCCESS,\r\n  payload: messages,\r\n});\r\n\r\nexport const getRealtimeMessagesFailure = () => ({\r\n  type: MessageActionTypes.GET_REALTIME_MSG_FAILURE,\r\n});\r\n\r\nexport const setSeenStart = (id) => ({\r\n  type: MessageActionTypes.SET_MSG_SEEN_START,\r\n  payload: id,\r\n});\r\n\r\nexport const setSeenSuccess = (id) => ({\r\n  type: MessageActionTypes.SET_MSG_SEEN_SUCCESS,\r\n  payload: id,\r\n});\r\n\r\nexport const getNotificationStart = (groupId) => ({\r\n  type: MessageActionTypes.GET_NOTIFICATION_START,\r\n  payload: groupId,\r\n});\r\n\r\nexport const getNotificationSuccess = (msg) => ({\r\n  type: MessageActionTypes.GET_NOTIFICATION_SUCCESS,\r\n  payload: msg,\r\n});\r\n\r\nexport const getNotificationFailure = () => ({\r\n  type: MessageActionTypes.GET_NOTIFICATION_FAILURE,\r\n});\r\n\r\nexport const getRealtimeNotificationStart = (message) => ({\r\n  type: MessageActionTypes.ADD_REALTIME_NOTIFICATION_START,\r\n  payload: message,\r\n});\r\n\r\nexport const getRealtimeNotificationSuccess = (message) => ({\r\n  type: MessageActionTypes.ADD_REALTIME_NOTIFICATION_SUCCESS,\r\n  payload: message,\r\n});\r\n\r\nexport const deleteNotificationStart = (message) => ({\r\n  type: MessageActionTypes.DELETE_NOTIFICATION_START,\r\n  payload: message,\r\n});\r\n\r\nexport const deleteNotificationSuccess = (message) => ({\r\n  type: MessageActionTypes.DELETE_NOTIFICATION_SUCCESS,\r\n  payload: message,\r\n});\r\n\r\nexport const clearUpMessage = () => ({\r\n  type: MessageActionTypes.CLEAR_UP_MESSAGE,\r\n});\r\n\r\nexport const unsubscribeNotification = () => ({\r\n  type: MessageActionTypes.UNSUBSCRIBE_NOTIFICATION,\r\n});\r\n","import ChannelActionTypes from './channels.type';\r\n\r\nexport const displayChatListStart = (currentUserId) => ({\r\n  type: ChannelActionTypes.DISPLAY_USER_LIST_START,\r\n  payload: currentUserId,\r\n});\r\n\r\nexport const displayChatListSuccess = (channels) => ({\r\n  type: ChannelActionTypes.DISPLAY_USER_LIST_SUCCESS,\r\n  payload: channels,\r\n});\r\n\r\nexport const displayChatListFailure = () => ({\r\n  type: ChannelActionTypes.DISPLAY_USER_LIST_FAILURE,\r\n});\r\n\r\nexport const displayAddedChatStart = (currentUserId) => ({\r\n  type: ChannelActionTypes.DISPLAY_ADDED_CHANNEL_START,\r\n  payload: currentUserId,\r\n});\r\n\r\nexport const displayAddedChatSuccess = (channels) => ({\r\n  type: ChannelActionTypes.DISPLAY_ADDED_CHANNEL_SUCCESS,\r\n  payload: channels,\r\n});\r\n\r\nexport const displayAddedChatFailure = () => ({\r\n  type: ChannelActionTypes.DISPLAY_ADDED_CHANNEL_FAILURE,\r\n});\r\n\r\nexport const createChannelStart = (currentUserId, receiverId) => ({\r\n  type: ChannelActionTypes.CREATE_CHANNEL_START,\r\n  payload: { currentUserId, receiverId },\r\n});\r\n\r\nexport const createChannelSuccess = (channel) => ({\r\n  type: ChannelActionTypes.CREATE_CHANNEL_SUCCESS,\r\n  payload: channel,\r\n});\r\n\r\nexport const createChannelFailure = () => ({\r\n  type: ChannelActionTypes.CREATE_CHANNEL_FAILURE,\r\n});\r\n\r\nexport const setCurrentChannelStart = (channel) => ({\r\n  type: ChannelActionTypes.SET_CURRENT_CHANNEL_START,\r\n  payload: channel,\r\n});\r\n\r\nexport const setCurrentChannelSuccess = (channel) => ({\r\n  type: ChannelActionTypes.SET_CURRENT_CHANNEL_SUCCESS,\r\n  payload: channel,\r\n});\r\n\r\nexport const setCurrentChannelNullStart = () => ({\r\n  type: ChannelActionTypes.SET_CURRENT_CHANNEL_NULL_START,\r\n});\r\n\r\nexport const setCurrentChannelNullSuccess = () => ({\r\n  type: ChannelActionTypes.SET_CURRENT_CHANNEL_NULL_SUCCESS,\r\n});\r\n\r\nexport const getMessagesStart = (groupId) => ({\r\n  type: ChannelActionTypes.GET_MESSAGES_START,\r\n  payload: groupId,\r\n});\r\n\r\nexport const unsubscribeChannel = () => ({\r\n  type: ChannelActionTypes.UNSUBSCRIBE_CHANNEL,\r\n});\r\n","import UserTypes from './user.type';\r\n\r\nexport const googleSignInStart = () => ({\r\n  type: UserTypes.GOOGLE_SIGN_IN_START,\r\n});\r\n\r\nexport const googleSignInSuccess = (user) => ({\r\n  type: UserTypes.GOOGLE_SIGN_IN_SUCCESS,\r\n  payload: user,\r\n});\r\n\r\nexport const googleSignInFailure = () => ({\r\n  type: UserTypes.GOOGLE_SIGN_IN_FAILURE,\r\n});\r\n\r\nexport const signInSuccess = (user) => ({\r\n  type: UserTypes.SIGN_IN_SUCCESS,\r\n  payload: user,\r\n});\r\n\r\nexport const signInFailure = () => ({\r\n  type: UserTypes.SIGN_IN_FAILURE,\r\n});\r\n\r\nexport const signOutStart = () => ({\r\n  type: UserTypes.SIGN_OUT_START,\r\n});\r\n\r\nexport const signOutSuccess = () => ({\r\n  type: UserTypes.SIGN_OUT_SUCCESS,\r\n});\r\n\r\nexport const checkUserSession = (user) => ({\r\n  type: UserTypes.CHECK_USER_SESSION,\r\n  payload: user,\r\n});\r\n\r\nexport const changeProfileStart = (user) => ({\r\n  type: UserTypes.CHANGE_PROFILE_START,\r\n  payload: user,\r\n});\r\n\r\nexport const changeProfileSuccess = (user) => ({\r\n  type: UserTypes.CHANGE_PROFILE_SUCCESS,\r\n  payload: user,\r\n});\r\n","import { themeActionTypes } from './theme.type';\r\n\r\nexport const setThemeStart = () => ({\r\n  type: themeActionTypes.SET_COLOR_THEME_START,\r\n});\r\n\r\nexport const setTheme = () => ({\r\n  type: themeActionTypes.SET_COLOR_THEME,\r\n});\r\n\r\nexport const setThemeFailure = () => ({\r\n  type: themeActionTypes.SET_COLOR_THEME_FAILURE,\r\n});\r\n\r\nexport const setThemeLightStart = () => ({\r\n  type: themeActionTypes.SET_COLOR_THEME_LIGHT_START,\r\n});\r\n\r\nexport const setThemeLight = () => ({\r\n  type: themeActionTypes.SET_COLOR_THEME_LIGHT,\r\n});\r\n\r\nexport const setThemeLightFailure = () => ({\r\n  type: themeActionTypes.SET_COLOR_THEME_LIGHT_FAILURE,\r\n});\r\n","import { getRef, timestamp, storage, auth } from './firebase';\r\nimport { generateUniqueUid, metaData } from '../helpers/helpers';\r\n\r\nexport const checkChannelExist = async (\r\n  currentId,\r\n  receiverId,\r\n  channelId = null\r\n) => {\r\n  const channelRef = getRef(`channels/${currentId}`);\r\n  const channel = await channelRef.child(receiverId).once('value');\r\n  if (!channelId) return channel.exists();\r\n  return channel.exists() && channel.key === channelId;\r\n};\r\n\r\nexport const createChannel = async (currentUserId, receiverId) => {\r\n  try {\r\n    const groupRef = getRef('groups');\r\n    const currentUserChannel = getRef(`/channels/${currentUserId}`);\r\n    const receiverChannel = getRef(`/channels/${receiverId}`);\r\n\r\n    const { key } = groupRef.push();\r\n    await groupRef.child(key).set({\r\n      type: 'private',\r\n      createdBy: currentUserId,\r\n      receiver: receiverId,\r\n      messages: [],\r\n    });\r\n\r\n    await currentUserChannel.child(receiverId).set({\r\n      groupId: key,\r\n      userId: receiverId,\r\n      type: 'private',\r\n      createdAt: timestamp,\r\n    });\r\n\r\n    await receiverChannel.child(currentUserId).set({\r\n      groupId: key,\r\n      userId: currentUserId,\r\n      type: 'private',\r\n      createdAt: timestamp,\r\n    });\r\n    return key;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const addMessages = async (\r\n  groupId,\r\n  currentUserId,\r\n  receiverId,\r\n  message\r\n) => {\r\n  const groupRef = getRef('groups');\r\n  const groupChild = groupRef.child(`${groupId}/messages`);\r\n  const { key } = groupChild.push();\r\n  const messageObject = {\r\n    seen: false,\r\n    createdBy: currentUserId,\r\n    message,\r\n    key,\r\n    createdAt: timestamp,\r\n    receiver: `${receiverId}false`,\r\n  };\r\n\r\n  const res = await groupChild.child(key).set(messageObject);\r\n  return res;\r\n};\r\n\r\nexport const getMessagesFromDb = async (groupId) => {\r\n  const groupRef = getRef(`groups/${groupId}`);\r\n  const groupMsg = await groupRef.child('messages').once('value');\r\n  const messages = groupMsg.val();\r\n  if (!messages) return null;\r\n  const messagesKey = Object.keys(messages).map((val) => {\r\n    return { ...messages[val], key: val };\r\n  });\r\n  return messagesKey;\r\n};\r\n\r\nexport const setSeen = (channel, currentUserId) => {\r\n  const channelRef = getRef(`groups/${channel.groupId}`);\r\n  channelRef\r\n    .child('messages')\r\n    .orderByChild('receiver')\r\n    .equalTo(`${currentUserId}false`)\r\n    .once('value', (snapshot) => {\r\n      if (snapshot.val()) {\r\n        snapshot.forEach((child) => {\r\n          child.ref.update({\r\n            seen: true,\r\n            receiver: `${currentUserId}true`,\r\n          });\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const getNotifications = async (groupId, currentUserId) => {\r\n  const groupRef = getRef(`groups/${groupId}`);\r\n  const fetchNotification = await groupRef\r\n    .child('messages')\r\n    .orderByChild('receiver')\r\n    .equalTo(`${currentUserId}false`)\r\n    .once('value');\r\n  return fetchNotification.val() ? Object.values(fetchNotification.val()) : [];\r\n};\r\n\r\nexport const changeProfilePicture = async (photoURL, unMount) => {\r\n  try {\r\n    const userRef = getRef('users');\r\n    const userId = auth?.currentUser?.uid;\r\n    if (userId) {\r\n      userRef.child(userId).update({\r\n        photoURL,\r\n      });\r\n      unMount();\r\n    }\r\n    unMount();\r\n  } catch (e) {\r\n    alert('Something went wrong!Please try again');\r\n  }\r\n};\r\n\r\nexport const sendImageFb = (\r\n  imageFile,\r\n  setLoading,\r\n  unMountModal,\r\n  storeImage\r\n) => {\r\n  const id = generateUniqueUid();\r\n  const storageRef = storage\r\n    .ref()\r\n    .child(`public/${id}`)\r\n    .put(imageFile, metaData);\r\n  storageRef.on(\r\n    'state_changed',\r\n    () => {\r\n      setLoading();\r\n    },\r\n    () => {\r\n      alert('Image upload Failed.Please try again');\r\n      setLoading();\r\n      unMountModal();\r\n    },\r\n    () => {\r\n      storageRef.snapshot.ref.getDownloadURL().then((downloadURL) => {\r\n        storeImage(downloadURL);\r\n        unMountModal();\r\n      });\r\n    }\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { SpinnerOverlay as SpinnerWrapper } from './Spinner.style';\r\nimport Spinner from './SpinnerComponent';\r\n\r\nconst SpinnerOverlay = () => {\r\n  return (\r\n    <SpinnerWrapper>\r\n      <Spinner />\r\n    </SpinnerWrapper>\r\n  );\r\n};\r\n\r\nexport default SpinnerOverlay;\r\n","import styled from 'styled-components';\r\n\r\nexport const SpinnerOverlay = styled.div`\r\n  height: 100vh !important;\r\n  width: 100% !important;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: ${(props) => props.theme.chatContainer};\r\n`;\r\n\r\nexport const SpinnerContainer = styled.div`\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 3px solid #25d366;\r\n  border-radius: 50%;\r\n  border-top-color: #fff;\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 3s ease-in-out infinite;\r\n  @keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const uploadFileType = ['jpeg', 'jpg', 'png'];\r\n\r\nexport const metaData = {\r\n  contentType: 'image/png',\r\n};\r\nexport const generateUniqueUid = () => uuidv4();\r\n\r\nexport const fileChange = (e, setModal) => {\r\n  const file = e.target.files[0];\r\n  const fileType = file?.name.split('.')[1];\r\n  const reader = new FileReader();\r\n  if (file && uploadFileType.includes(fileType)) {\r\n    reader.readAsDataURL(file);\r\n    reader.addEventListener('load', () => {\r\n      setModal(true, reader.result);\r\n    });\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const setCroppedImage = (editor, setImage) => {\r\n  editor.current.getImageScaledToCanvas().toBlob((blob) => {\r\n    const imageURL = URL.createObjectURL(blob);\r\n    setImage(imageURL, blob);\r\n  });\r\n};\r\n","import { createSelector } from 'reselect';\r\n\r\nconst selectUser = (state) => state.user;\r\n\r\nexport const selectIsUserAuthenticated = createSelector(\r\n  [selectUser],\r\n  (user) => !!user.currentUser\r\n);\r\n\r\nexport const selectIsLoading = createSelector(\r\n  [selectUser],\r\n  (user) => user.loading\r\n);\r\n\r\nexport const selectProfilePhoto = createSelector(\r\n  [selectUser],\r\n  (user) => user.currentUser?.photoURL\r\n);\r\n\r\nexport const selectCurrentUser = createSelector(\r\n  [selectUser],\r\n  (user) => user.currentUser\r\n);\r\n\r\nexport const selectUsername = createSelector(\r\n  [selectUser],\r\n  (user) => user.currentUser?.displayName\r\n);\r\n\r\nexport const selectIsUserLoaded = createSelector(\r\n  [selectUser],\r\n  (user) => user.userLoading\r\n);\r\n\r\nexport const selectUserId = createSelector(\r\n  [selectUser],\r\n  (user) => user.currentUser?.uid\r\n);\r\n","import React from 'react';\r\nimport { SpinnerContainer } from './Spinner.style';\r\n\r\nconst SpinnerComponent = () => <SpinnerContainer />;\r\n\r\nexport default SpinnerComponent;\r\n","import { createSelector } from 'reselect';\r\n\r\nconst selectTheme = (state) => state.theme;\r\n\r\n// eslint-disable-next-line\r\nexport const selectBackground = createSelector(\r\n  [selectTheme],\r\n  (app) => app.theme\r\n);\r\n","import userTypes from './user.type';\r\n\r\nconst initialState = {\r\n  currentUser: null,\r\n  loading: false,\r\n  userLoading: false,\r\n};\r\n\r\nconst UserReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case userTypes.GOOGLE_SIGN_IN_START:\r\n    case userTypes.SIGN_OUT_START:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n\r\n    case userTypes.CHECK_USER_SESSION:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        userLoading: true,\r\n      };\r\n    case userTypes.GOOGLE_SIGN_IN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      };\r\n    case userTypes.SIGN_IN_SUCCESS:\r\n      return {\r\n        currentUser: action.payload,\r\n        loading: false,\r\n        userLoading: false,\r\n      };\r\n\r\n    case userTypes.SIGN_OUT_SUCCESS:\r\n    case userTypes.GOOGLE_SIGN_IN_FAILURE:\r\n      return {\r\n        currentUser: null,\r\n        loading: false,\r\n      };\r\n\r\n    case userTypes.SIGN_IN_FAILURE:\r\n      return {\r\n        currentUser: null,\r\n        loading: false,\r\n        userLoading: false,\r\n      };\r\n    case userTypes.CHANGE_PROFILE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        currentUser: {\r\n          ...state.currentUser,\r\n          [action.payload.name]: action.payload.value,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default UserReducer;\r\n","/* eslint-disable */\r\nexport const setTheme = (theme = 'dark') =>\r\n  window && localStorage.setItem('theme', JSON.stringify(theme));\r\n\r\nexport const getTheme = () =>\r\n  window && JSON.parse(localStorage.getItem('theme'));\r\n","import { themeActionTypes } from './theme.type';\r\nimport { setTheme } from '../../helpers/localstorage';\r\n\r\nconst initialState = {\r\n  theme: 'dark',\r\n};\r\n\r\nconst themeReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case themeActionTypes.SET_COLOR_THEME:\r\n      setTheme('dark');\r\n      return {\r\n        theme: 'dark',\r\n      };\r\n    case themeActionTypes.SET_COLOR_THEME_LIGHT:\r\n      setTheme('light');\r\n      return {\r\n        theme: 'light',\r\n      };\r\n    case themeActionTypes.SET_COLOR_THEME_FAILURE:\r\n    case themeActionTypes.SET_COLOR_THEME_LIGHT_FAILURE:\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default themeReducer;\r\n","import channelActionTypes from './channels.type';\r\n\r\nconst initialState = {\r\n  chatList: [],\r\n  loading: false,\r\n  success: false,\r\n  currentChannel: null,\r\n  currentChannelLoading: false,\r\n  messages: null,\r\n};\r\n\r\nconst ChannelReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case channelActionTypes.DISPLAY_USER_LIST_START:\r\n    case channelActionTypes.DISPLAY_ADDED_CHANNEL_START:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        success: false,\r\n      };\r\n    case channelActionTypes.DISPLAY_USER_LIST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        success: true,\r\n        chatList: [...state.chatList, ...action.payload],\r\n      };\r\n    case channelActionTypes.DISPLAY_ADDED_CHANNEL_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        success: true,\r\n        chatList: action.payload,\r\n      };\r\n    case channelActionTypes.DISPLAY_USER_LIST_FAILURE:\r\n    case channelActionTypes.DISPLAY_ADDED_CHANNEL_FAILURE:\r\n      return {\r\n        ...state,\r\n        success: false,\r\n        loading: false,\r\n        chatList: [],\r\n      };\r\n    case channelActionTypes.SET_CURRENT_CHANNEL_START:\r\n    case channelActionTypes.CREATE_CHANNEL_START:\r\n    case channelActionTypes.SET_CURRENT_CHANNEL_NULL_START:\r\n      // case channelActionTypes.GET_MESSAGES_START:\r\n      return {\r\n        ...state,\r\n        currentChannelLoading: true,\r\n      };\r\n    case channelActionTypes.SET_CURRENT_CHANNEL_SUCCESS:\r\n      return {\r\n        ...state,\r\n        currentChannel: action.payload,\r\n        currentChannelLoading: false,\r\n      };\r\n    case channelActionTypes.SET_CURRENT_CHANNEL_NULL_SUCCESS:\r\n    case channelActionTypes.CREATE_CHANNEL_FAILURE:\r\n      return {\r\n        ...state,\r\n        currentChannel: null,\r\n        currentChannelLoading: false,\r\n      };\r\n    case channelActionTypes.CREATE_CHANNEL_SUCCESS:\r\n      return {\r\n        ...state,\r\n        currentChannelLoading: false,\r\n        currentChannel: {\r\n          ...state.currentChannel,\r\n          groupId: action.payload,\r\n        },\r\n      };\r\n    case channelActionTypes.UNSUBSCRIBE_CHANNEL:\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default ChannelReducer;\r\n","export const getAllMessages = (message) => {\r\n  const messages = message.reduce((accumulator, value) => {\r\n    return {\r\n      ...accumulator,\r\n      [value.key]: value,\r\n    };\r\n  }, {});\r\n  return messages;\r\n};\r\n\r\nexport const modifySeenStatus = (key, messages) => {\r\n  const modifiedMessage = { ...messages };\r\n  modifiedMessage[key] = {\r\n    ...modifiedMessage[key],\r\n    seen: true,\r\n  };\r\n  return modifiedMessage;\r\n};\r\n\r\nexport const deleteNotification = (groupId, notification) => {\r\n  if (!notification) return null;\r\n  if (!notification[groupId]) return notification;\r\n  const deletedNotification = { ...notification };\r\n  delete deletedNotification[groupId];\r\n  return deletedNotification;\r\n};\r\n\r\nexport const addNotification = (groupId, message, notifications) => {\r\n  if (!notifications) return null;\r\n  const getGroup = notifications[groupId];\r\n  const addedNotif = [...getGroup, message];\r\n  console.log(addedNotif, 555);\r\n  return null;\r\n};\r\n","import MessageActionTypes from './message.type';\r\nimport {\r\n  getAllMessages,\r\n  modifySeenStatus,\r\n  // deleteNotification,\r\n  // addNotification,\r\n} from './helper';\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  messages: [],\r\n  notificationLoading: false,\r\n  notifications: {},\r\n};\r\n\r\nconst ChannelReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case MessageActionTypes.GET_MESSAGES_START:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case MessageActionTypes.GET_MESSAGES_FAILURE:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      };\r\n    case MessageActionTypes.GET_MESSAGES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        messages: action.payload ? getAllMessages(action.payload) : null,\r\n      };\r\n    case MessageActionTypes.GET_REALTIME_MSG_SUCCESS:\r\n      return {\r\n        ...state,\r\n        messages: state.messages\r\n          ? { ...state.messages, ...action.payload }\r\n          : { ...action.payload },\r\n      };\r\n    case MessageActionTypes.SET_MSG_SEEN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        messages: modifySeenStatus(action.payload, state.messages),\r\n      };\r\n    case MessageActionTypes.GET_NOTIFICATION_START:\r\n      return {\r\n        ...state,\r\n        notificationLoading: true,\r\n      };\r\n    /* eslint-disable */\r\n    case MessageActionTypes.GET_NOTIFICATION_SUCCESS:\r\n      return {\r\n        ...state,\r\n        notificationLoading: false,\r\n        notifications: state.notifications\r\n          ? {\r\n              ...state.notifications,\r\n              [action.payload.groupId]: action.payload.messages,\r\n            }\r\n          : {\r\n              [action.payload.groupId]: action.payload.messages,\r\n            },\r\n      };\r\n    case MessageActionTypes.GET_NOTIFICATION_FAILURE:\r\n      return {\r\n        ...state,\r\n        notificationLoading: false,\r\n      };\r\n    case MessageActionTypes.ADD_REALTIME_NOTIFICATION_SUCCESS:\r\n      return {\r\n        ...state,\r\n        notifications: {\r\n          ...state.notifications,\r\n          [action.payload.groupId]: [\r\n            ...state.notifications[action.payload.groupId],\r\n            action.payload.message,\r\n          ],\r\n        },\r\n      };\r\n    case MessageActionTypes.DELETE_NOTIFICATION_SUCCESS:\r\n      return {\r\n        ...state,\r\n        notifications: {\r\n          ...state.notifications,\r\n          [action.payload]: [],\r\n        },\r\n      };\r\n\r\n    case MessageActionTypes.CLEAR_UP_MESSAGE:\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default ChannelReducer;\r\n","import { combineReducers } from 'redux';\r\nimport userReducer from './user/user.reducer';\r\nimport themeReducer from './theme/theme.reducer';\r\nimport channelReducer from './channels/channels.reducer';\r\nimport messageReducer from './message/message.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  user: userReducer,\r\n  theme: themeReducer,\r\n  channels: channelReducer,\r\n  messages: messageReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { takeLatest, put, all, call } from 'redux-saga/effects';\r\nimport UserTypes from './user.type';\r\nimport * as userAction from './user.action';\r\nimport {\r\n  signInWithGoogle,\r\n  signOut as logout,\r\n  createUserDocument,\r\n  getUser,\r\n} from '../../firebase/firebase';\r\nimport { clearUpMessage } from '../message/message.action';\r\nimport { unsubscribeChannel } from '../channels/channels.action';\r\n\r\nconst getUserDetail = (user) => {\r\n  const { displayName, uid, photoURL, email } = user;\r\n  return {\r\n    displayName,\r\n    uid,\r\n    photoURL,\r\n    email,\r\n  };\r\n};\r\n\r\nexport function* googleSignIn() {\r\n  try {\r\n    const { user } = yield call(signInWithGoogle);\r\n    const userDetails = yield call(getUserDetail, user);\r\n    yield call(createUserDocument, userDetails);\r\n    yield put(userAction.googleSignInSuccess());\r\n  } catch (error) {\r\n    alert(error?.message || error);\r\n    yield put(userAction.googleSignInFailure());\r\n  }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(UserTypes.GOOGLE_SIGN_IN_START, googleSignIn);\r\n}\r\n\r\nexport function* signOut() {\r\n  try {\r\n    yield call(logout);\r\n    yield put(unsubscribeChannel());\r\n    yield put(clearUpMessage());\r\n    yield put(userAction.signOutSuccess());\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n  yield takeLatest(UserTypes.SIGN_OUT_START, signOut);\r\n}\r\n\r\nexport function* checkUserSession({ payload }) {\r\n  try {\r\n    const user = yield call(getUser, payload);\r\n    yield put(userAction.signInSuccess(user || payload));\r\n  } catch (error) {\r\n    yield put(userAction.signInFailure());\r\n  }\r\n}\r\n\r\nexport function* onCheckUserSessionStart() {\r\n  yield takeLatest(UserTypes.CHECK_USER_SESSION, checkUserSession);\r\n}\r\n\r\nexport function* changeProfile({ payload }) {\r\n  const { name, value } = payload;\r\n  yield put(userAction.changeProfileSuccess({ name, value }));\r\n}\r\n\r\nexport function* onChangeProfileStart() {\r\n  yield takeLatest(UserTypes.CHANGE_PROFILE_START, changeProfile);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(onGoogleSignInStart),\r\n    call(onSignOutStart),\r\n    call(onCheckUserSessionStart),\r\n    call(onChangeProfileStart),\r\n  ]);\r\n}\r\n","import { takeLatest, put, all, call } from 'redux-saga/effects';\r\nimport { themeActionTypes } from './theme.type';\r\nimport {\r\n  setTheme,\r\n  setThemeFailure,\r\n  setThemeLight,\r\n  setThemeLightFailure,\r\n} from './theme.action';\r\n\r\nexport function* setThemeDark() {\r\n  try {\r\n    yield put(setTheme());\r\n  } catch (e) {\r\n    yield put(setThemeFailure());\r\n  }\r\n}\r\n\r\nexport function* onChangeThemeStart() {\r\n  yield takeLatest(themeActionTypes.SET_COLOR_THEME_START, setThemeDark);\r\n}\r\n\r\nexport function* setLightTheme() {\r\n  try {\r\n    yield put(setThemeLight());\r\n  } catch (e) {\r\n    yield put(setThemeLightFailure());\r\n  }\r\n}\r\n\r\nexport function* onChangeThemeLightStart() {\r\n  yield takeLatest(themeActionTypes.SET_COLOR_THEME_LIGHT_START, setLightTheme);\r\n}\r\n\r\nexport function* themeSagas() {\r\n  yield all([call(onChangeThemeStart), call(onChangeThemeLightStart)]);\r\n}\r\n","import { takeLatest, all, call, put } from 'redux-saga/effects';\r\nimport ChannelActionTypes from './channels.type';\r\nimport {\r\n  displayChatListSuccess,\r\n  displayChatListFailure,\r\n  displayAddedChatSuccess,\r\n  displayAddedChatFailure,\r\n  createChannelSuccess,\r\n  createChannelFailure,\r\n  setCurrentChannelSuccess,\r\n  setCurrentChannelNullSuccess,\r\n} from './channels.action';\r\nimport { getChannelsList, addedChannelsList } from '../../firebase/firebase';\r\nimport { createChannel } from '../../firebase/channels';\r\n\r\nexport function* getChannel({ payload }) {\r\n  try {\r\n    const channelLists = yield call(getChannelsList, payload);\r\n    yield put(displayChatListSuccess(channelLists));\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put(displayChatListFailure());\r\n  }\r\n}\r\n\r\nexport function* OnDisplayChannelLists() {\r\n  yield takeLatest(ChannelActionTypes.DISPLAY_USER_LIST_START, getChannel);\r\n}\r\n\r\nexport function* getAddedChannel({ payload }) {\r\n  try {\r\n    const channelLists = yield call(addedChannelsList, payload);\r\n    yield put(displayAddedChatSuccess(channelLists));\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put(displayAddedChatFailure());\r\n  }\r\n}\r\n\r\nexport function* onDisplayAddedChannel() {\r\n  yield takeLatest(\r\n    ChannelActionTypes.DISPLAY_ADDED_CHANNEL_START,\r\n    getAddedChannel\r\n  );\r\n}\r\n\r\nexport function* OnCreateChannel({ payload }) {\r\n  try {\r\n    const { currentUserId, receiverId } = payload;\r\n    const groupId = yield call(createChannel, currentUserId, receiverId);\r\n    yield put(createChannelSuccess(groupId));\r\n  } catch (e) {\r\n    yield put(createChannelFailure());\r\n  }\r\n}\r\n\r\nexport function* onCreateChannelStart() {\r\n  yield takeLatest(ChannelActionTypes.CREATE_CHANNEL_START, OnCreateChannel);\r\n}\r\n\r\nexport function* setCurrentChannel({ payload }) {\r\n  yield put(setCurrentChannelSuccess(payload));\r\n}\r\n\r\nexport function* OnSetCurrentChannelStart() {\r\n  yield takeLatest(\r\n    ChannelActionTypes.SET_CURRENT_CHANNEL_START,\r\n    setCurrentChannel\r\n  );\r\n}\r\n\r\nexport function* setCurrentChannelNull() {\r\n  yield put(setCurrentChannelNullSuccess());\r\n}\r\n\r\nexport function* OnSetCurrentChannelNullStart() {\r\n  yield takeLatest(\r\n    ChannelActionTypes.SET_CURRENT_CHANNEL_NULL_START,\r\n    setCurrentChannelNull\r\n  );\r\n}\r\n\r\nexport function* channelSagas() {\r\n  yield all([\r\n    call(OnDisplayChannelLists),\r\n    call(onDisplayAddedChannel),\r\n    call(OnSetCurrentChannelStart),\r\n    call(OnSetCurrentChannelNullStart),\r\n    call(onCreateChannelStart),\r\n  ]);\r\n}\r\n","import {\r\n  takeLatest,\r\n  all,\r\n  call,\r\n  put,\r\n  takeEvery,\r\n  take,\r\n  cancel,\r\n} from 'redux-saga/effects';\r\nimport MessageActionTypes from './message.type';\r\nimport {\r\n  getMessagesSuccess,\r\n  getMessagesFailure,\r\n  addMessageSuccess,\r\n  addMessageFailure,\r\n  getRealtimeMessagesSuccess,\r\n  getRealtimeMessagesFailure,\r\n  setSeenSuccess,\r\n  getNotificationSuccess,\r\n  getNotificationFailure,\r\n  getRealtimeNotificationSuccess,\r\n  deleteNotificationSuccess,\r\n} from './message.action';\r\nimport {\r\n  addMessages as getMsgDb,\r\n  getMessagesFromDb,\r\n  getNotifications,\r\n} from '../../firebase/channels';\r\n\r\nexport function* getMessage({ payload }) {\r\n  try {\r\n    const msg = yield call(getMessagesFromDb, payload);\r\n    yield put(getMessagesSuccess(msg));\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put(getMessagesFailure());\r\n  }\r\n}\r\n\r\nexport function* onGetMessagesStart() {\r\n  yield takeLatest(MessageActionTypes.GET_MESSAGES_START, getMessage);\r\n}\r\n\r\nexport function* addMessage({ payload }) {\r\n  try {\r\n    const { groupId, currentUserId, receiverId, message } = payload;\r\n    const res = yield call(\r\n      getMsgDb,\r\n      groupId,\r\n      currentUserId,\r\n      receiverId,\r\n      message\r\n    );\r\n    yield put(addMessageSuccess());\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put(addMessageFailure());\r\n  }\r\n}\r\n\r\nexport function* OnaddMessageStart() {\r\n  yield takeLatest(MessageActionTypes.ADD_MESSAGES_START, addMessage);\r\n}\r\n\r\nexport function* getRealtimeMsg({ payload }) {\r\n  try {\r\n    yield put(getRealtimeMessagesSuccess(payload));\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put(getRealtimeMessagesFailure());\r\n  }\r\n}\r\n\r\nexport function* OnGetRealTimeMsgStart() {\r\n  yield takeLatest(MessageActionTypes.GET_REALTIME_MSG_START, getRealtimeMsg);\r\n}\r\n\r\nexport function* setMsgSeen({ payload }) {\r\n  yield put(setSeenSuccess(payload));\r\n}\r\n\r\nexport function* OnSetMsgSeen() {\r\n  yield takeLatest(MessageActionTypes.SET_MSG_SEEN_START, setMsgSeen);\r\n}\r\n\r\nexport function* unsubscribe(task) {\r\n  yield cancel(task);\r\n}\r\n\r\nexport function* fetchNotification({ payload }) {\r\n  try {\r\n    const { groupId, currentUserId } = payload;\r\n    const messages = yield call(getNotifications, groupId, currentUserId);\r\n    yield put(getNotificationSuccess({ groupId, messages }));\r\n  } catch (e) {\r\n    console.log(e, e?.message);\r\n    yield put(getNotificationFailure());\r\n  }\r\n}\r\n\r\nexport function* OnFetchNotificationStart() {\r\n  const notification = yield takeEvery(\r\n    MessageActionTypes.GET_NOTIFICATION_START,\r\n    fetchNotification\r\n  );\r\n  yield take(MessageActionTypes.UNSUBSCRIBE_NOTIFICATION);\r\n  yield call(unsubscribe, notification);\r\n}\r\n\r\nexport function* addNotification({ payload }) {\r\n  const { groupId, message } = payload;\r\n  yield put(getRealtimeNotificationSuccess({ groupId, message }));\r\n}\r\n\r\nexport function* OnAddNotificationStart() {\r\n  yield takeLatest(\r\n    MessageActionTypes.ADD_REALTIME_NOTIFICATION_START,\r\n    addNotification\r\n  );\r\n}\r\n\r\nexport function* deleteNotification({ payload }) {\r\n  yield put(deleteNotificationSuccess(payload));\r\n}\r\n\r\nexport function* OnDeleteNotificationStart() {\r\n  yield takeLatest(\r\n    MessageActionTypes.DELETE_NOTIFICATION_START,\r\n    deleteNotification\r\n  );\r\n}\r\nexport function* messageSagas() {\r\n  yield all([\r\n    call(onGetMessagesStart),\r\n    call(OnaddMessageStart),\r\n    call(OnGetRealTimeMsgStart),\r\n    call(OnSetMsgSeen),\r\n    call(OnFetchNotificationStart),\r\n    call(OnAddNotificationStart),\r\n    call(OnDeleteNotificationStart),\r\n  ]);\r\n}\r\n","import { all, call } from 'redux-saga/effects';\r\nimport { userSagas } from './user/user.saga';\r\nimport { themeSagas } from './theme/theme.saga';\r\nimport { channelSagas } from './channels/channels.saga';\r\nimport { messageSagas } from './message/message.saga';\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    call(userSagas),\r\n    call(themeSagas),\r\n    call(channelSagas),\r\n    call(messageSagas),\r\n  ]);\r\n}\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nimport rootSaga from './root-saga';\r\n\r\nconst sagasMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(sagasMiddleware))\r\n);\r\n\r\nsagasMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","/* eslint-disable */\r\nimport React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport PropTypes from 'prop-types';\r\nimport { selectIsUserAuthenticated } from '../redux-sagas/user/user.selector';\r\n\r\nconst PrivateRoute = ({ component: Component, isAuthenticated, ...rest }) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        isAuthenticated ? <Component {...props} /> : <Redirect to='/signin' />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nPrivateRoute.propTypes = {\r\n  // component: PropTypes.func.isRequired,\r\n  isAuthenticated: PropTypes.bool.isRequired,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  isAuthenticated: selectIsUserAuthenticated,\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import styled from 'styled-components';\r\n\r\nexport const ErrorImageOverlay = styled.div`\r\n  height: 60vh;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const ErrorImageContainer = styled.div`\r\n  display: inline-block;\r\n  background-image: ${({ imageUrl }) => `url(${imageUrl})`};\r\n  background-size: cover;\r\n  background-position: center;\r\n  width: 40vh;\r\n  height: 40vh;\r\n`;\r\nexport const ErrorImageText = styled.h2`\r\n  font-size: 28px;\r\n  color: #2f8e89;\r\n`;\r\n","/*eslint-disable */\r\nimport React from 'react';\r\nimport {\r\n  ErrorImageOverlay,\r\n  ErrorImageContainer,\r\n  ErrorImageText,\r\n} from './error-boundary.style';\r\nclass ErrorBoundary extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      hasErrored: false,\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { hasErrored: true };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    console.log(error);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasErrored) {\r\n      return (\r\n        <ErrorImageOverlay>\r\n          <ErrorImageContainer imageUrl='https://i.imgur.com/yW2W9SC.png' />\r\n          <ErrorImageText>Sorry,this page is broken</ErrorImageText>\r\n        </ErrorImageOverlay>\r\n      );\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { lazy, Suspense } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport Spinner from '../components/Spinner/SpinnerOverlay';\r\nimport ErrorBoundary from '../components/error-boundary/Error-boundary';\r\n\r\nconst Home = lazy(() => import('../pages/Home/Home'));\r\nconst Auth = lazy(() => import('../pages/Auth/Auth.container'));\r\nconst Profile = lazy(() => import('../pages/EditProfile/Profile'));\r\n\r\nconst AppRoute = () => (\r\n  <Switch>\r\n    <ErrorBoundary>\r\n      <Suspense fallback={<Spinner />}>\r\n        <PrivateRoute exact path='/' component={Home} />\r\n        <Route exact path='/signin' component={Auth} />\r\n        <PrivateRoute path='/edit' component={Profile} />\r\n      </Suspense>\r\n    </ErrorBoundary>\r\n  </Switch>\r\n);\r\n\r\nexport default AppRoute;\r\n","export const lightTheme = {\r\n  mode: 0,\r\n  header: '#EDEDED',\r\n  chatContainer: '#F5F5F5',\r\n  sideContainer: '#F8F9FA',\r\n  status: '#EDEDED',\r\n  statusHover: '#EDEDED',\r\n  search: '#EDEDED',\r\n  textLight: '#636363',\r\n  color: '#000',\r\n  Icon: '#000',\r\n  border: '#999',\r\n  currentUserChat: '#DCF8C6',\r\n  receiverChat: '#fff',\r\n};\r\n\r\nexport const darkTheme = {\r\n  mode: 1,\r\n  header: '#2A2F32',\r\n  chatContainer: '#131C21',\r\n  chatList: '#131C21',\r\n  sideContainer: '#262D31',\r\n  status: '#1414141',\r\n  statusHover: '#242424',\r\n  search: '#323739',\r\n  textLight: '#758C8C',\r\n  color: '#fff',\r\n  Icon: '#B1B3B5',\r\n  border: '#2D3134',\r\n  currentUserChat: '#056162',\r\n  receiverChat: '#262D31',\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { auth } from './firebase/firebase';\r\nimport { lightTheme, darkTheme } from './helpers/theme';\r\nimport { getTheme } from './helpers/localstorage';\r\n\r\nconst AppState = (\r\n  checkUserSession,\r\n  setThemeLight,\r\n  theme,\r\n  history,\r\n  displayChat\r\n) => {\r\n  const [AppLoading, setAppLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const listenToAuth = auth.onAuthStateChanged((snap) => {\r\n      if (snap && snap.uid) {\r\n        const { uid, email, photoURL, displayName } = snap;\r\n        checkUserSession({\r\n          uid,\r\n          email,\r\n          photoURL,\r\n          displayName,\r\n        });\r\n        displayChat(uid);\r\n\r\n        setAppLoading(false);\r\n      } else {\r\n        setAppLoading(false);\r\n        history.push('/signin');\r\n      }\r\n    });\r\n    return () => {\r\n      listenToAuth();\r\n    };\r\n  }, [checkUserSession, history, displayChat]);\r\n\r\n  useEffect(() => {\r\n    const userPreferredTheme = getTheme();\r\n    if (userPreferredTheme && userPreferredTheme === 'light') {\r\n      setThemeLight();\r\n    }\r\n  }, [setThemeLight]);\r\n\r\n  const AppTheme = () => (theme === 'dark' ? darkTheme : lightTheme);\r\n  return [AppTheme(), AppLoading];\r\n};\r\n\r\nexport default AppState;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport PropTypes from 'prop-types';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { ThemeProvider } from 'styled-components';\r\n\r\nimport { displayAddedChatStart } from './redux-sagas/channels/channels.action';\r\nimport { checkUserSession } from './redux-sagas/user/user.action';\r\nimport { setThemeLightStart } from './redux-sagas/theme/theme.action';\r\nimport { selectBackground } from './redux-sagas/theme/theme.selector';\r\nimport AppRoute from './Route/Route';\r\nimport UseAppState from './App.state';\r\nimport './styles.css';\r\nimport Spinner from './components/Spinner/SpinnerOverlay';\r\n\r\nconst App = ({\r\n  checkUserSession: userSession,\r\n  setThemeLightStart: setLightTheme,\r\n  AppTheme: theme,\r\n  history = {},\r\n  displayAddedChatStart: displayChatList,\r\n}) => {\r\n  const [AppTheme, AppLoading] = UseAppState(\r\n    userSession,\r\n    setLightTheme,\r\n    theme,\r\n    history,\r\n    displayChatList\r\n  );\r\n  return AppLoading ? (\r\n    <Spinner />\r\n  ) : (\r\n    <ThemeProvider theme={AppTheme}>\r\n      <AppRoute />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nApp.propTypes = {\r\n  checkUserSession: PropTypes.func.isRequired,\r\n  setThemeLightStart: PropTypes.func.isRequired,\r\n  AppTheme: PropTypes.string.isRequired,\r\n  // eslint-disable-next-line\r\n  history: PropTypes.object,\r\n  displayAddedChatStart: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  checkUserSession: (user) => dispatch(checkUserSession(user)),\r\n  setThemeLightStart: () => dispatch(setThemeLightStart()),\r\n  displayAddedChatStart: (userId) => dispatch(displayAddedChatStart(userId)),\r\n});\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  AppTheme: selectBackground,\r\n});\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux-sagas/store';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nconst rootElement = document.getElementById('root');\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </Provider>,\r\n  rootElement\r\n);\r\nserviceWorker.register();\r\n","const MessageActionTypes = {\r\n  GET_MESSAGES_START: 'GET_MESSAGES_START',\r\n  GET_MESSAGES_SUCCESS: 'GET_MESSAGES_SUCCESS',\r\n  GET_MESSAGES_FAILURE: 'GET_MESSAGES_FAILURE',\r\n\r\n  ADD_MESSAGES_START: 'ADD_MESSAGES_START',\r\n  ADD_MESSAGES_SUCCESS: 'ADD_MESSAGES_SUCCESS',\r\n  ADD_MESSAGES_FAILURE: 'ADD_MESSAGES_FAILURE',\r\n\r\n  GET_REALTIME_MSG_START: 'GET_REALTIME_MSG_START',\r\n  GET_REALTIME_MSG_SUCCESS: 'GET_REALTIME_MSG_SUCCESS',\r\n  GET_REALTIME_MSG_FAILURE: 'GET_REALTIME_MSG_FAILURE',\r\n\r\n  SET_MSG_SEEN_START: 'SET_MSG_SEEN_START',\r\n  SET_MSG_SEEN_SUCCESS: 'SET_MSG_SEEN_SUCCESS',\r\n  SET_MSG_SEEN_FAILURE: 'SET_MSG_SEEN_FAILURE',\r\n\r\n  GET_NOTIFICATION_START: 'GET_NOTIFICATION_START',\r\n  GET_NOTIFICATION_SUCCESS: 'GET_NOTIFICATION_SUCCESS',\r\n  GET_NOTIFICATION_FAILURE: 'GET_NOTIFICATION_FAILURE',\r\n\r\n  ADD_REALTIME_NOTIFICATION_START: 'ADD_REALTIME_NOTIFICATION_START',\r\n  ADD_REALTIME_NOTIFICATION_SUCCESS: 'ADD_REALTIME_NOTIFICATION_SUCCESS',\r\n\r\n  DELETE_NOTIFICATION_START: 'DELETE_NOTIFICATION_START',\r\n  DELETE_NOTIFICATION_SUCCESS: 'DELETE_NOTIFICATION_SUCCESS',\r\n\r\n  CLEAR_UP_MESSAGE: 'CLEAR_UP_MESSAGE',\r\n  UNSUBSCRIBE_NOTIFICATION: 'UNSUBSCRIBE_NOTIFICATION',\r\n};\r\n\r\nexport default MessageActionTypes;\r\n"],"sourceRoot":""}