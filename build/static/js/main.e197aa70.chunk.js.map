{"version":3,"sources":["redux-sagas/user/user.type.js","redux-sagas/user/user.reducer.js","redux-sagas/theme/theme.type.js","helpers/localstorage.js","redux-sagas/theme/theme.reducer.js","redux-sagas/channels/channels.type.js","redux-sagas/channels/channels.reducer.js","redux-sagas/message/message.type.js","redux-sagas/message/helper.js","redux-sagas/message/message.reducer.js","redux-sagas/root-reducer.js","redux-sagas/user/user.action.js","firebase/firebase.js","redux-sagas/user/user.saga.js","redux-sagas/theme/theme.action.js","redux-sagas/theme/theme.saga.js","redux-sagas/channels/channels.action.js","firebase/channels.js","redux-sagas/channels/channels.saga.js","redux-sagas/message/message.action.js","redux-sagas/message/message.saga.js","redux-sagas/root-saga.js","redux-sagas/store.js","redux-sagas/theme/theme.selector.js","redux-sagas/user/user.selector.js","pages/Home/Home.style.js","redux-sagas/channels/channels.selector.js","components/ChatContainer/ChatContainer.state.js","components/Chat/Chat.style.js","components/shared/ProfileImage/ProfileImage.style.js","components/shared/ProfileImage/ProfileImage.js","redux-sagas/message/message.selector.js","components/Notification/Notification.state.js","components/Notification/Notification.js","components/Chat/Chat.js","components/ChatContainer/DisplayUsers.state.js","components/ChatContainer/DisplayUsers.js","components/shared/Input/Input.style.js","components/shared/Input/Input.js","components/ChatContainer/ChatContainer.js","components/shared/Header/Header.style.js","components/shared/Icon/Icon.style.js","components/shared/Icon/Icon.js","components/ActiveUser/ActiveUser.state.js","components/ActiveUser/ActiveUser.js","components/shared/Navigate/Navigate.js","components/shared/Header/Header.js","components/ChatList/ChatList.style.js","components/ChatList/ChatList.js","components/TestPanel/TestPanel.style.js","components/TestPanel/TestPanel.js","components/Spinner/Spinner.style.js","components/Spinner/SpinnerComponent.js","components/Spinner/SpinnerOverlay.js","components/Spinner/Spinner.js","helpers/PropTypeValues.js","pages/Messages/Messages.state.js","assets/chat-light.png","assets/chat-dark.png","pages/Messages/Messages.style.js","components/MessageInput/MessageInput.style.js","helpers/helpers.js","components/MessageInput/MessageInput.state.js","components/shared/ImageEditor/Image.state.js","components/shared/ImageEditor/ImageEditor.style.js","components/shared/Button/Button.styles.js","components/shared/Button/Button.js","components/shared/ImageEditor/ImageEditor.js","components/MessageInput/MessageInput.js","components/Message/Message.state.js","components/Message/Message.style.js","components/shared/Image/Image.style.js","components/shared/Image/Image.js","components/Message/MessageList.js","components/Message/Message.js","components/Message/Message.container.js","pages/Messages/Messages.js","pages/Messages/Messages.container.js","pages/ChatPanel/ChatPanel.js","pages/Home/Home.state.js","pages/Home/Home.js","pages/Auth/Auth.style.js","assets/Whatsapp.png","pages/Auth/Auth.state.js","pages/Auth/Auth.js","pages/Auth/Auth.container.js","Route/PrivateRoute.js","components/Profile/EditImage/EditImage.style.js","components/Profile/EditImage/EditImage.js","components/Profile/EditUsername/Username.state.js","components/Profile/EditUsername/Username.style.js","components/Profile/EditUsername/Username.js","components/Profile/Theme/data.js","components/Profile/Theme/Theme.style.js","components/Profile/Theme/Theme.state.js","components/Profile/Theme/Theme.js","pages/EditProfile/Profile.state.js","pages/EditProfile/Profile.style.js","pages/EditProfile/Profile.js","Route/Route.js","helpers/theme.js","App.state.js","App.js","index.js"],"names":["userTypes","GOOGLE_SIGN_IN_START","GOOGLE_SIGN_IN_SUCCESS","GOOGLE_SIGN_IN_FAILURE","CHECK_USER_SESSION","SIGN_IN_SUCCESS","SIGN_IN_FAILURE","SIGN_OUT_START","SIGN_OUT_SUCCESS","CHANGE_PROFILE_START","CHANGE_PROFILE_SUCCESS","initialState","currentUser","loading","userLoading","UserReducer","state","action","type","payload","name","value","themeActionTypes","setTheme","theme","window","localStorage","setItem","JSON","stringify","themeReducer","channelActionTypes","DISPLAY_USER_LIST_START","DISPLAY_USER_LIST_SUCCESS","DISPLAY_USER_LIST_FAILURE","DISPLAY_ADDED_CHANNEL_START","DISPLAY_ADDED_CHANNEL_SUCCESS","DISPLAY_ADDED_CHANNEL_FAILURE","CREATE_CHANNEL_START","CREATE_CHANNEL_SUCCESS","CREATE_CHANNEL_FAILURE","SET_CURRENT_CHANNEL_START","SET_CURRENT_CHANNEL_SUCCESS","SET_CURRENT_CHANNEL_NULL_START","SET_CURRENT_CHANNEL_NULL_SUCCESS","chatList","success","currentChannel","currentChannelLoading","messages","ChannelReducer","groupId","MessageActionTypes","GET_MESSAGES_START","GET_MESSAGES_SUCCESS","GET_MESSAGES_FAILURE","ADD_MESSAGES_START","ADD_MESSAGES_SUCCESS","ADD_MESSAGES_FAILURE","GET_REALTIME_MSG_START","GET_REALTIME_MSG_SUCCESS","GET_REALTIME_MSG_FAILURE","SET_MSG_SEEN_START","SET_MSG_SEEN_SUCCESS","SET_MSG_SEEN_FAILURE","GET_NOTIFICATION_START","GET_NOTIFICATION_SUCCESS","GET_NOTIFICATION_FAILURE","ADD_REALTIME_NOTIFICATION_START","ADD_REALTIME_NOTIFICATION_SUCCESS","DELETE_NOTIFICATION_START","DELETE_NOTIFICATION_SUCCESS","getAllMessages","message","reduce","accumulator","key","console","log","modifySeenStatus","modifiedMessage","seen","notificationLoading","notifications","rootReducer","combineReducers","user","userReducer","channels","channelReducer","messageReducer","signInSuccess","UserTypes","firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","auth","storage","database","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","timestamp","ServerValue","TIMESTAMP","isOfflineForDatabase","last_changed","isOnlineForDatabase","getRef","parent","ref","signInWithGoogle","a","signInWithPopup","displayName","uid","photoURL","email","signOut","res","getUser","userPayload","userRef","child","once","val","createUserDocument","userDetails","exists","set","groups","addUser","searchUser","username","orderByChild","startAt","endAt","limitToLast","users","getUserDetail","userId","Object","values","addedChannelsList","currentUserId","channelRef","usersArray","entries","channelsList","map","channelDetail","Promise","all","privateChannels","getChannelsList","googleSignIn","onGoogleSignInStart","onSignOutStart","checkUserSession","onCheckUserSessionStart","changeProfile","onChangeProfileStart","userSagas","call","alert","put","takeLatest","logout","userAction","setThemeStart","setThemeLightStart","setThemeDark","onChangeThemeStart","setLightTheme","onChangeThemeLightStart","themeSagas","createChannel","receiverId","groupRef","currentUserChannel","receiverChannel","push","createdBy","receiver","createdAt","addMessages","groupChild","messageObject","getMessagesFromDb","groupMsg","messagesKey","keys","setSeen","channel","equalTo","snapshot","forEach","update","getNotifications","fetchNotification","getChannel","OnDisplayChannelLists","getAddedChannel","onDisplayAddedChannel","OnCreateChannel","onCreateChannelStart","setCurrentChannel","OnSetCurrentChannelStart","setCurrentChannelNull","OnSetCurrentChannelNullStart","channelSagas","channelLists","ChannelActionTypes","getMessagesSuccess","addMessageSuccess","getRealtimeMessagesSuccess","getRealtimeNotificationSuccess","getMessage","onGetMessagesStart","addMessage","OnaddMessageStart","getRealtimeMsg","OnGetRealTimeMsgStart","setMsgSeen","OnSetMsgSeen","OnFetchNotificationStart","addNotification","OnAddNotificationStart","deleteNotification","OnDeleteNotificationStart","messageSagas","msg","getMsgDb","takeEvery","rootSaga","sagasMiddleware","createSagaMiddleware","middlewares","logger","store","createStore","applyMiddleware","run","selectBackground","createSelector","app","selectUser","selectIsUserAuthenticated","selectProfilePhoto","selectUsername","selectIsUserLoaded","selectUserId","HomeContainer","styled","main","selectChannels","selectChannelLoading","selectChatList","selectCurrentChannelLoading","selectCurrentChannel","selectCurrentChannelId","selectCurrentChannelGroupId","ChatContainerState","useState","searchField","setSearchField","setChatList","intervalRef","useRef","input","useEffect","current","setTimeout","then","chatListKey","sort","responseKey","compareChatList","catch","e","clearTimeout","target","ChatContainer","div","props","border","statusHover","ImageContainer","ChatDetail","ChatName","span","color","Notification","Unseen","img","height","ProfileImage","profilePic","chatProfile","src","alt","defaultProps","mapStateToProps","createStructuredSelector","connect","selectMessages","selectIsLoading","selectMessage","NotificationState","getNotification","currentGroup","getRealtimeNotification","listenToMsg","listen","Date","now","on","off","getNotificationStart","getRealtimeNotificationStart","getRealtimeNotify","UseNotificationState","substring","otherProps","dispatch","Chat","setCurrentChannelStart","setChannel","groupInfo","onClick","tabindex","React","memo","channelInfo","DisplayUsersState","filter","chatLists","UseDisplayState","filteredUsers","InputWrapper","Input","width","icon","search","textLight","Icon","i","InputContainer","className","forwardRef","isLoading","UseChatState","onHandleChange","onChange","placeholder","autoComplete","ChatDetailWrapper","HeaderContainer","header","OptionsContainer","Menu","button","mode","fontSize","marginRight","IconContainer","ActiveUserState","id","status","setStatus","statusRef","useActiveState","formatDistanceToNow","Navigate","navigateTo","iconName","to","Header","icon1","icon2","text","label","position","as","ChatListContainer","section","chatContainer","ChatList","TestPanelContainer","sideContainer","signOutStart","SpinnerOverlay","SpinnerContainer","SpinnerComponent","WithSpinner","WrappedComponent","PropTypes","shape","string","isRequired","MessageState","getMessages","getRealtime","snap","updateSeen","MessageContainer","chatDark","chatLight","Footer","footer","SendMessage","uploadFileType","metaData","contentType","generateUniqueUid","uuidv4","MessageInputState","addMessageStart","setModal","editor","setImage","setLoading","imageFile","unMountModal","file","files","fileType","split","reader","FileReader","includes","readAsDataURL","addEventListener","result","getImageScaledToCanvas","toBlob","blob","imageURL","URL","createObjectURL","storageRef","getDownloadURL","downloadURL","ImageEditorState","visible","croppedImage","modal","isVisible","photo","info","IsLoading","ModalContainer","ButtonContainer","Editor","CloseButton","Close","Button","danger","content","ImageEditor","closeModal","image","editorRef","handleCrop","sendImage","CSSTransition","in","timeout","classNames","unmountOnExit","scale","MessageInput","UseEditorState","OnMountModal","OnUnMountModal","UseMessageInputState","submitHandler","handleFileChange","handleCroppedImage","sendImageFile","htmlFor","messagesEndRef","scrollIntoView","behaviour","block","inline","scrollToBottom","SeenIcon","Message","currentUserChat","receiverChat","Tail","Image","MessageList","formatISO","representation","slice","messagesArray","UseMsgState","MessagesContainer","compose","Spinner","Messages","createChannelStart","getMessagesStart","getRealtimeMessagesStart","setSeenStart","deleteNotificationStart","setCurrentChannelNullStart","setChannelNull","UseMessageState","chat","ChatPanel","Home","displayChat","userStatusDatabaseRef","listenToRef","onDisconnect","displayChatListStart","UseHomeState","AuthContainer","AuthBox","figure","ImageWrapper","ImageText","figcaption","SigninButton","AuthState","isAuthenticated","history","googleSignInStart","WhatsappIcon","Auth","Component","component","rest","render","ChangeImageText","EditImage","accept","UsernameState","inputRef","LabelText","SharedInput","updateUsername","defaultValue","radioButton","Wrapper","RadioButton","Selection","UseThemeState","setDark","setLight","handleTheme","data","radio","checked","toLowerCase","style","margin","ProfileState","modifiedUser","modifiedValue","ProfileContainer","NavigateContainer","changeProfileStart","profile","UseProfileState","AppRoute","exact","path","Profile","lightTheme","darkTheme","AppState","setThemeLight","AppLoading","setAppLoading","listenToAuth","onAuthStateChanged","userPreferredTheme","parse","getItem","AppTheme","withRouter","displayAddedChatStart","userSession","displayChatList","UseAppState","rootElement","document","getElementById","ReactDOM"],"mappings":"0NAgBeA,MAhBG,CAChBC,qBAAsB,uBACtBC,uBAAwB,yBACxBC,uBAAwB,yBAExBC,mBAAoB,qBACpBC,gBAAiB,kBACjBC,gBAAiB,kBAEjBC,eAAgB,iBAChBC,iBAAkB,mBAElBC,qBAAsB,uBACtBC,uBAAwB,0BCX1B,MAAMC,EAAe,CACnBC,YAAa,KACbC,SAAS,EACTC,aAAa,GAwDAC,MArDK,CAACC,EAAQL,EAAcM,KACzC,OAAQA,EAAOC,MACb,KAAKlB,EAAUC,qBACf,KAAKD,EAAUO,eACb,OAAO,2BACFS,GADL,IAEEH,SAAS,IAGb,KAAKb,EAAUI,mBACb,OAAO,2BACFY,GADL,IAEEH,SAAS,EACTC,aAAa,IAEjB,KAAKd,EAAUE,uBACb,OAAO,2BACFc,GADL,IAEEH,SAAS,IAEb,KAAKb,EAAUK,gBACb,MAAO,CACLO,YAAaK,EAAOE,QACpBN,SAAS,EACTC,aAAa,GAGjB,KAAKd,EAAUQ,iBACf,KAAKR,EAAUG,uBACb,MAAO,CACLS,YAAa,KACbC,SAAS,GAGb,KAAKb,EAAUM,gBACb,MAAO,CACLM,YAAa,KACbC,SAAS,EACTC,aAAa,GAEjB,KAAKd,EAAUU,uBACb,OAAO,2BACFM,GADL,IAEEJ,YAAY,2BACPI,EAAMJ,aADA,IAET,CAACK,EAAOE,QAAQC,MAAOH,EAAOE,QAAQE,UAG5C,QACE,OAAOL,ICxDN,MAAMM,EACY,wBADZA,EAEM,kBAFNA,EAGc,0BAHdA,EAKkB,8BALlBA,EAMY,wBANZA,EAOoB,gCCPpBC,EAAW,CAACC,EAAQ,SAC/BC,QAAUC,aAAaC,QAAQ,QAASC,KAAKC,UAAUL,ICCnDb,EAAe,CACnBa,MAAO,QAuBMM,MApBM,CAACd,EAAQL,EAAcM,KAC1C,OAAQA,EAAOC,MACb,KAAKI,EAEH,OADAC,EAAS,QACF,CACLC,MAAO,QAEX,KAAKF,EAEH,OADAC,EAAS,SACF,CACLC,MAAO,SAEX,KAAKF,EACL,KAAKA,EAEL,QACE,OAAON,ICHEe,MApBY,CACzBC,wBAAyB,0BACzBC,0BAA2B,4BAC3BC,0BAA2B,4BAE3BC,4BAA6B,8BAC7BC,8BAA+B,gCAC/BC,8BAA+B,gCAE/BC,qBAAsB,uBACtBC,uBAAwB,yBACxBC,uBAAwB,yBAExBC,0BAA2B,4BAC3BC,4BAA6B,8BAE7BC,+BAAgC,iCAChCC,iCAAkC,oCCfpC,MAAMjC,EAAe,CACnBkC,SAAU,GACVhC,SAAS,EACTiC,SAAS,EACTC,eAAgB,KAChBC,uBAAuB,EACvBC,SAAU,MAqEGC,MAlEQ,CAAClC,EAAQL,EAAcM,KAC5C,OAAQA,EAAOC,MACb,KAAKa,EAAmBC,wBACxB,KAAKD,EAAmBI,4BACtB,OAAO,2BACFnB,GADL,IAEEH,SAAS,EACTiC,SAAS,IAEb,KAAKf,EAAmBE,0BACtB,OAAO,2BACFjB,GADL,IAEEH,SAAS,EACTiC,SAAS,EACTD,SAAU,IAAI7B,EAAM6B,YAAa5B,EAAOE,WAE5C,KAAKY,EAAmBK,8BACtB,OAAO,2BACFpB,GADL,IAEEH,SAAS,EACTiC,SAAS,EACTD,SAAU5B,EAAOE,UAErB,KAAKY,EAAmBG,0BACxB,KAAKH,EAAmBM,8BACtB,OAAO,2BACFrB,GADL,IAEE8B,SAAS,EACTjC,SAAS,EACTgC,SAAU,KAEd,KAAKd,EAAmBU,0BACxB,KAAKV,EAAmBO,qBACxB,KAAKP,EAAmBY,+BAEtB,OAAO,2BACF3B,GADL,IAEEgC,uBAAuB,IAE3B,KAAKjB,EAAmBW,4BACtB,OAAO,2BACF1B,GADL,IAEE+B,eAAgB9B,EAAOE,QACvB6B,uBAAuB,IAE3B,KAAKjB,EAAmBa,iCACxB,KAAKb,EAAmBS,uBACtB,OAAO,2BACFxB,GADL,IAEE+B,eAAgB,KAChBC,uBAAuB,IAE3B,KAAKjB,EAAmBQ,uBACtB,OAAO,2BACFvB,GADL,IAEEgC,uBAAuB,EACvBD,eAAe,2BACV/B,EAAM+B,gBADG,IAEZI,QAASlC,EAAOE,YAGtB,QACE,OAAOH,IC7CEoC,MA5BY,CACzBC,mBAAoB,qBACpBC,qBAAsB,uBACtBC,qBAAsB,uBAEtBC,mBAAoB,qBACpBC,qBAAsB,uBACtBC,qBAAsB,uBAEtBC,uBAAwB,yBACxBC,yBAA0B,2BAC1BC,yBAA0B,2BAE1BC,mBAAoB,qBACpBC,qBAAsB,uBACtBC,qBAAsB,uBAEtBC,uBAAwB,yBACxBC,yBAA0B,2BAC1BC,yBAA0B,2BAE1BC,gCAAiC,kCACjCC,kCAAmC,oCAEnCC,0BAA2B,4BAC3BC,4BAA6B,+BCzBxB,MAAMC,EAAkBC,IAC7B,MAAMxB,EAAWwB,EAAQC,QAAO,CAACC,EAAatD,IACrC,2BACFsD,GADL,IAEE,CAACtD,EAAMuD,KAAMvD,KAEd,IAEH,OADAwD,QAAQC,IAAI7B,GACLA,GAGI8B,EAAmB,CAACH,EAAK3B,KACpC,MAAM+B,EAAe,eAAQ/B,GAK7B,OAJA+B,EAAgBJ,GAAhB,2BACKI,EAAgBJ,IADrB,IAEEK,MAAM,IAEDD,GCTHrE,EAAe,CACnBE,SAAS,EACToC,SAAU,GACViC,qBAAqB,EACrBC,cAAe,IAkFFjC,MA/EQ,CAAClC,EAAQL,EAAcM,KAC5C,OAAQA,EAAOC,MACb,KAAKkC,EAAmBC,mBACtB,OAAO,2BACFrC,GADL,IAEEH,SAAS,IAEb,KAAKuC,EAAmBG,qBACtB,OAAO,2BACFvC,GADL,IAEEH,SAAS,IAEb,KAAKuC,EAAmBE,qBACtB,OAAO,2BACFtC,GADL,IAEEH,SAAS,EACToC,SAAUhC,EAAOE,QAAUqD,EAAevD,EAAOE,SAAW,OAEhE,KAAKiC,EAAmBQ,yBACtB,OAAO,2BACF5C,GADL,IAEEiC,SAAUjC,EAAMiC,SAAN,2BACDjC,EAAMiC,UAAahC,EAAOE,SADzB,eAEDF,EAAOE,WAEpB,KAAKiC,EAAmBW,qBACtB,OAAO,2BACF/C,GADL,IAEEiC,SAAU8B,EAAiB9D,EAAOE,QAASH,EAAMiC,YAErD,KAAKG,EAAmBa,uBACtB,OAAO,2BACFjD,GADL,IAEEkE,qBAAqB,IAGzB,KAAK9B,EAAmBc,yBACtB,OAAO,2BACFlD,GADL,IAEEkE,qBAAqB,EACrBC,cAAenE,EAAMmE,cAAN,2BAENnE,EAAMmE,eAFA,IAGT,CAAClE,EAAOE,QAAQgC,SAAUlC,EAAOE,QAAQ8B,WAE3C,CACE,CAAChC,EAAOE,QAAQgC,SAAUlC,EAAOE,QAAQ8B,YAGnD,KAAKG,EAAmBe,yBACtB,OAAO,2BACFnD,GADL,IAEEkE,qBAAqB,IAEzB,KAAK9B,EAAmBiB,kCACtB,OAAO,2BACFrD,GADL,IAEEmE,cAAc,2BACTnE,EAAMmE,eADE,IAEX,CAAClE,EAAOE,QAAQgC,SAAU,IACrBnC,EAAMmE,cAAclE,EAAOE,QAAQgC,SACtClC,EAAOE,QAAQsD,aAIvB,KAAKrB,EAAmBmB,4BACtB,OAAO,2BACFvD,GADL,IAEEmE,cAAc,2BACTnE,EAAMmE,eADE,IAEX,CAAClE,EAAOE,SAAU,OAIxB,QACE,OAAOH,IC7EEoE,MAPKC,YAAgB,CAClCC,KAAMC,EACN/D,MAAOM,EACP0D,SAAUC,EACVxC,SAAUyC,I,uBCRL,MAaMC,EAAiBL,IAAD,CAC3BpE,KAAM0E,EAAUvF,gBAChBc,QAASmE,I,8CCZX,MAAMO,EAAiB,CACrBC,OAAQC,0CACRC,WAAYD,gCACZE,UAAWF,gBACXG,cAAeH,4BACfI,kBAAmBJ,eACnBK,MAAOL,4CACPM,cAAeN,gBAGZO,IAASC,KAAKC,QACjBF,IAASG,cAAcZ,GAGlB,MAAMa,EAAOJ,IAASI,OAChBC,EAAUL,IAASK,UACnBC,EAAWN,IAASM,WAEpBC,EAAiB,IAAIP,IAASI,KAAKI,mBAChDD,EAAeE,oBAAoB,CAAEC,OAAQ,mBAEtC,MAAMC,EAAYX,IAASM,SAASM,YAAYC,UAC1CC,EAAuB,CAClCpG,MAAO,UACPqG,aAAcf,IAASM,SAASM,YAAYC,WAGjCG,EAAsB,CACjCtG,MAAO,SACPqG,aAAcf,IAASM,SAASM,YAAYC,WAIjCI,EAAUC,GAAWZ,EAASa,IAAID,GAGlCE,EAAgB,uCAAG,sCAAAC,EAAA,+EAELjB,EAAKkB,gBAAgBf,GAFhB,uBAEpBvB,EAFoB,EAEpBA,KAEAuC,EAAsCvC,EAAtCuC,YAAaC,EAAyBxC,EAAzBwC,IAAKC,EAAoBzC,EAApByC,SAAUC,EAAU1C,EAAV0C,MAJR,kBAKrB,CACLH,cACAC,MACAC,WACAC,UAT0B,wHAAH,qDAgBhBC,EAAO,uCAAG,4BAAAN,EAAA,+EAEDjB,EAAKuB,UAFJ,cAEbC,EAFa,yBAGZA,GAHY,wHAAH,qDASPC,EAAO,uCAAG,WAAOC,GAAP,iBAAAT,EAAA,6DACfU,EAAUd,EAAO,SADF,SAEFc,EAAQC,MAAMF,EAAYN,KAAKS,KAAK,SAFlC,cAEfjD,EAFe,yBAGdA,EAAKkD,OAHS,2CAAH,sDAKPC,GAAkB,uCAAG,WAAOC,GAAP,mBAAAf,EAAA,gEAE3Be,QAF2B,IAE3BA,OAF2B,EAE3BA,EAAaZ,IAFc,yCAEF,IAFE,uBAKxBO,EAAUzB,EAASa,IAAT,uBAAsBiB,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAaZ,MACnDjD,QAAQC,IAAI,KAAMuD,GANY,SAOXA,EAAQE,KAAK,SAPF,YAOxBjD,EAPwB,QAQrBqD,SARqB,wBAS5B9D,QAAQC,IAAIQ,EAAKkD,MAAO,MATI,kBAUrBlD,EAAKkD,OAVgB,yBAYRH,EAAQO,IAAR,2BACjBF,GADiB,IAEpBG,OAAQ,MAdoB,eAYxBC,EAZwB,OAgB9BjE,QAAQC,IAAIgE,EAAS,MAhBS,kBAiBvBA,GAjBuB,2HAAH,sDAuBlBC,GAAU,uCAAG,WAAOC,GAAP,eAAArB,EAAA,+EAEFf,EACjBa,IAAI,SACJwB,aAAa,eACbC,QAHiB,WAGLF,EAHK,MAIjBG,MAJiB,UAIRH,EAJQ,WAKjBI,YAAY,GACZb,KAAK,SARc,cAEhBc,EAFgB,yBAUfA,EAAMb,OAVS,uCAYtB3D,QAAQC,IAAR,MAZsB,iFAAH,sDA6BVwE,GAAa,uCAAG,WAAOC,EAAQpG,GAAf,2BAAAwE,EAAA,sEAEnBU,EAAUd,EAAO,SAFE,SAGNc,EAAQC,MAAMiB,GAAQhB,KAAK,SAHrB,cAGnBjD,EAHmB,SAIckE,OAAOC,OAAOnE,EAAKkD,OAJjC,mBAIlBX,EAJkB,KAIHE,EAJG,KAIOD,EAJP,uBAKlB,CACL3E,UACA0E,cACAC,MACAC,aATuB,wHAAH,wDAgBb2B,GAAiB,uCAAG,WAAOC,GAAP,uBAAAhC,EAAA,6DACzBiC,EAAarC,EAAO,YADK,SAERqC,EAAWtB,MAAMqB,GAAepB,KAAK,SAF7B,WAEzB/C,EAFyB,QAGjBmD,SAHiB,yCAGA,IAHA,cAIzBkB,EAAaL,OAAOM,QAAQtE,EAASgD,OACrCuB,EAAeF,EAAWG,IAAX,uCAAe,YAAQlC,EAAKmC,IAAb,eAAAtC,EAAA,yDACP,YAAvBsC,EAAc/I,KADgB,gCAEboI,GAAcxB,EAAKmC,EAAc9G,SAFpB,cAE1BmC,EAF0B,yBAGzBA,GAHyB,gCAK3B,MAL2B,2CAAf,uDALU,UAYD4E,QAAQC,IAAIJ,GAZX,eAYzBK,EAZyB,OAa/BvF,QAAQC,IAAIsF,EAAiB,SAbE,kBAcxBA,GAdwB,4CAAH,sDAiBjBC,GAAe,uCAAG,WAAOR,GAAP,iBAAAlC,EAAA,6DAC7B9C,QAAQC,IAAI,IAAK+E,GACXE,EAAeF,EAAWG,IAAX,uCAAe,YAAO,OAAET,EAAF,QAAUpG,EAAV,KAAmBjC,IAA1B,eAAAyG,EAAA,yDAClC9C,QAAQC,IAAI,IAAK5D,EAAMqI,GACV,YAATrI,EAF8B,gCAGboI,GAAcC,EAAQpG,GAHT,cAG1BmC,EAH0B,yBAIzBA,GAJyB,gCAM3B,MAN2B,2CAAf,uDAFQ,SAUC4E,QAAQC,IAAIJ,GAVb,cAUvBK,EAVuB,yBAYtBA,GAZsB,2CAAH,sD,gBClJXE,I,YAeAC,I,YAIAtC,I,YASAuC,I,YAIAC,I,YASAC,I,YAIAC,I,YAKAC,I,YAIAC,IAtDV,SAAUP,KAAV,yEAEiB,OAFjB,kBAEuBQ,YAAKpD,GAF5B,OAIS,OAFNgB,EAFH,OAGH7D,QAAQC,IAAI4D,EAAa,IAHtB,SAIeoC,YAAKrC,GAAoBC,GAJxC,OAIGR,EAJH,OAKHrD,QAAQC,IAAIoD,GALT,wBAWH,OAXG,0BAQHrD,QAAQC,IAAR,MAEAiG,MAAM,KAAMtG,SAVT,UAWGuG,YFVyB,CACjC9J,KAAM0E,EAAUzF,yBEFX,uDAeA,SAAUoK,KAAV,iEACL,OADK,SACCU,YAAWrF,EAAU3F,qBAAsBqK,IAD5C,wCAIA,SAAUrC,KAAV,iEAEH,OAFG,kBAEG6C,YAAKI,GAFR,OAGH,OAHG,SAGGF,YFJoB,CAC5B9J,KAAM0E,EAAUpF,mBEAX,uDAKHqE,QAAQC,IAAR,MALG,sDASA,SAAU0F,KAAV,iEACL,OADK,SACCS,YAAWrF,EAAUrF,eAAgB0H,IADtC,wCAIA,SAAUwC,IAAiB,QAAEtJ,IAA7B,uEAEU,OAFV,kBAEgB2J,YAAK3C,EAAShH,GAF9B,OAGH,OADMmE,EAFH,gBAGG0F,YAAIG,EAAyB7F,GAAQnE,IAHxC,8BAKH,OALG,mCAKG6J,YF3BmB,CAC3B9J,KAAM0E,EAAUtF,kBEqBX,sDASA,SAAUoK,KAAV,iEACL,OADK,SACCO,YAAWrF,EAAUxF,mBAAoBqK,IAD1C,wCAIA,SAAUE,IAAc,QAAExJ,IAA1B,yEAEL,OADQC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MADT,SAEC2J,YFf4B,CAClC9J,KAAM0E,EAAUlF,uBAChBS,QEa0C,CAAEC,OAAMC,WAF7C,wCAKA,SAAUuJ,KAAV,iEACL,OADK,SACCK,YAAWrF,EAAUnF,qBAAsBkK,IAD5C,wCAIA,SAAUE,KAAV,iEACL,OADK,SACCV,YAAI,CACRW,YAAKP,IACLO,YAAKN,IACLM,YAAKJ,IACLI,YAAKF,MALF,wCC9DA,MAAMQ,GAAgB,MAC3BlK,KAAMI,IAWK+J,GAAqB,MAChCnK,KAAMI,I,gBCNSgK,I,YAQAC,I,YAIAC,I,YAQAC,I,YAIAC,IAxBV,SAAUJ,KAAV,iEAEH,OAFG,kBAEGN,YDLc,CACtB9J,KAAMI,ICED,6BAIH,OAJG,kCAIG0J,YDHqB,CAC7B9J,KAAMI,ICFD,qDAQA,SAAUiK,KAAV,iEACL,OADK,SACCN,YAAW3J,EAAwCgK,IADpD,wCAIA,SAAUE,KAAV,iEAEH,OAFG,kBAEGR,YDLmB,CAC3B9J,KAAMI,ICED,6BAIH,OAJG,kCAIG0J,YDH0B,CAClC9J,KAAMI,ICFD,qDAQA,SAAUmK,KAAV,iEACL,OADK,SACCR,YAAW3J,EAA8CkK,IAD1D,wCAIA,SAAUE,KAAV,iEACL,OADK,SACCvB,YAAI,CAACW,YAAKS,IAAqBT,YAAKW,MADrC,wCC/BA,MCYME,GAAa,uCAAG,WAAOhC,EAAeiC,GAAtB,uBAAAjE,EAAA,sEAEnBkE,EAAWtE,EAAO,UACxB1C,QAAQC,IAAI,MACNgH,EAAqBvE,EAAO,aAAD,OAAcoC,IACzCoC,EAAkBxE,EAAO,aAAD,OAAcqE,IALnB,EAOTC,EAASG,OAAjBpH,EAPiB,EAOjBA,IAPiB,SAQnBiH,EAASvD,MAAM1D,GAAKgE,IAAI,CAC5B1H,KAAM,UACN+K,UAAWtC,EACXuC,SAAUN,EACV3I,SAAU,KAZa,wBAenB6I,EAAmBxD,MAAMsD,GAAYhD,IAAI,CAC7CzF,QAASyB,EACT2E,OAAQqC,EACR1K,KAAM,UACNiL,UAAWlF,IAnBY,yBAsBnB8E,EAAgBzD,MAAMqB,GAAef,IAAI,CAC7CzF,QAASyB,EACT2E,OAAQI,EACRzI,KAAM,UACNiL,UAAWlF,IA1BY,iCA4BlBrC,GA5BkB,yCA8BzBC,QAAQC,IAAR,KAAe,QA9BU,mBA+BlB,GA/BkB,0DAAH,wDAmCbsH,GAAW,uCAAG,WACzBjJ,EACAwG,EACAiC,EACAnH,GAJyB,yBAAAkD,EAAA,6DAMnBkE,EAAWtE,EAAO,UAClB8E,EAAaR,EAASvD,MAAT,UAAkBnF,EAAlB,cAPM,EAQTkJ,EAAWL,OAAnBpH,EARiB,EAQjBA,IACF0H,EAAgB,CACpBrH,MAAM,EACNgH,UAAWtC,EACXlF,UACAG,MACAuH,UAAWlF,EACXiF,SAAS,GAAD,OAAKN,EAAL,UAfe,SAkBPS,EAAW/D,MAAM1D,GAAKgE,IAAI0D,GAlBnB,cAkBnBpE,EAlBmB,yBAmBlBA,GAnBkB,2CAAH,4DAsBXqE,GAAiB,uCAAG,WAAOpJ,GAAP,qBAAAwE,EAAA,6DACzBkE,EAAWtE,EAAO,UAAD,OAAWpE,IADH,SAER0I,EAASvD,MAAM,YAAYC,KAAK,SAFxB,UAEzBiE,EAFyB,OAGzBvJ,EAAWuJ,EAAShE,MAC1B3D,QAAQC,IAAI7B,EAAU,KACjBA,EAL0B,yCAKT,MALS,cAMzBwJ,EAAcjD,OAAOkD,KAAKzJ,GAAU+G,KAAKxB,GACtC,2BAAKvF,EAASuF,IAArB,IAA2B5D,IAAK4D,MAPH,kBASxBiE,GATwB,4CAAH,sDAYjBE,GAAU,CAACC,EAASjD,KACZpC,EAAO,UAAD,OAAWqF,EAAQzJ,UAEzCmF,MAAM,YACNW,aAAa,YACb4D,QAHH,UAGclD,EAHd,UAIGpB,KAAK,SAAUuE,IACdjI,QAAQC,IAAIgI,EAAStE,MAAO,MAExBsE,EAAStE,OACXsE,EAASC,SAASzE,IAChBA,EAAMb,IAAIuF,OAAO,CACf/H,MAAM,EACNiH,SAAS,GAAD,OAAKvC,EAAL,iBAOPsD,GAAgB,uCAAG,WAAO9J,EAASwG,GAAhB,mBAAAhC,EAAA,6DACxBkE,EAAWtE,EAAO,UAAD,OAAWpE,IADJ,SAEE0I,EAC7BvD,MAAM,YACNW,aAAa,YACb4D,QAH6B,UAGlBlD,EAHkB,UAI7BpB,KAAK,SANsB,cAExB2E,EAFwB,OAOxB/H,EAAgB+H,EAAkB1E,MACxC3D,QAAQC,IAAIK,EAAe,KARG,kBASvBA,EAAgBqE,OAAOC,OAAOtE,GAAiB,IATxB,2CAAH,wD,gBCxFZgI,I,YAYAC,I,YAIAC,I,YAYAC,I,YAOAC,I,YAYAC,I,YAIAC,I,YAKAC,I,YAOAC,I,YAIAC,I,YAOAC,IA1EV,SAAUV,IAAW,QAAEhM,IAAvB,uEAEH,OAFG,kBAEG0D,QAAQC,IAAI,UAAW3D,GAF1B,OAGkB,OAHlB,SAGwB2J,YAAKT,GAAiBlJ,GAH9C,OAIH,OADM2M,EAHH,gBAIGjJ,QAAQC,IAAI,GAAIgJ,GAJnB,OAKH,OALG,UAKG9C,YFb4B,CACpC9J,KAAM6M,EAAmB9L,0BACzBd,QEWmC2M,IAL9B,gCAQH,OARG,0BAOHjJ,QAAQC,IAAR,MAPG,UAQGkG,YFX4B,CACpC9J,KAAM6M,EAAmB7L,4BEEpB,uDAYA,SAAUkL,KAAV,iEACL,OADK,SACCnC,YAAW8C,EAAmB/L,wBAAyBmL,IADxD,wCAIA,SAAUE,IAAgB,QAAElM,IAA5B,uEAEH,OAFG,kBAEG0D,QAAQC,IAAI,UAAW3D,GAF1B,OAGkB,OAHlB,SAGwB2J,YAAKpB,GAAmBvI,GAHhD,OAIH,OADM2M,EAHH,gBAIGjJ,QAAQC,IAAI,GAAIgJ,GAJnB,OAKH,OALG,UAKG9C,YFf6B,CACrC9J,KAAM6M,EAAmB3L,8BACzBjB,QEaoC2M,IAL/B,gCAQH,OARG,0BAOHjJ,QAAQC,IAAR,MAPG,UAQGkG,YFb6B,CACrC9J,KAAM6M,EAAmB1L,gCEIpB,uDAYA,SAAUiL,KAAV,iEACL,OADK,SACCrC,YACJ8C,EAAmB5L,4BACnBkL,IAHG,wCAOA,SAAUE,IAAgB,QAAEpM,IAA5B,2EAEH,OAFG,kBAEG0D,QAAQC,IAAI3D,GAFf,OAIa,OADRwI,EAA8BxI,EAA9BwI,cAAeiC,EAAezK,EAAfyK,WAHpB,SAImBd,YAAKa,GAAehC,EAAeiC,GAJtD,OAKH,OADMzI,EAJH,gBAKG6H,YFpB0B,CAClC9J,KAAM6M,EAAmBxL,uBACzBpB,QEkBiCgC,IAL5B,+BAQH,OARG,0BAOH0B,QAAQC,IAAR,KAAe,MAPZ,UAQGkG,YFlB0B,CAClC9J,KAAM6M,EAAmBvL,yBESpB,uDAYA,SAAUgL,KAAV,iEACL,OADK,SACCvC,YAAW8C,EAAmBzL,qBAAsBiL,IADrD,wCAIA,SAAUE,IAAkB,QAAEtM,IAA9B,iEAEL,OADA0D,QAAQC,IAAI3D,EAAS,SADhB,SAEC6J,YFnBgC,CACtC9J,KAAM6M,EAAmBrL,4BACzBvB,QEiBmCA,IAF9B,wCAKA,SAAUuM,KAAV,iEACL,OADK,SACCzC,YACJ8C,EAAmBtL,0BACnBgL,IAHG,wCAOA,SAAUE,KAAV,iEACL,OADK,SACC3C,YFrBoC,CAC1C9J,KAAM6M,EAAmBnL,mCEmBpB,wCAIA,SAAUgL,KAAV,iEACL,OADK,SACC3C,YACJ8C,EAAmBpL,+BACnBgL,IAHG,wCAOA,SAAUE,KAAV,iEACL,OADK,SACC1D,YAAI,CACRW,YAAKsC,IACLtC,YAAKwC,IACLxC,YAAK4C,IACL5C,YAAK8C,IACL9C,YAAK0C,MANF,wCCvFA,MAKMQ,GAAqB,CAAC/K,EAAW,QAAZ,CAChC/B,KAAMkC,EAAmBE,qBACzBnC,QAAS8B,IAYEgL,GAAqBxJ,IAAD,CAC/BvD,KAAMkC,EAAmBK,qBACzBtC,QAASsD,IAYEyJ,GAA6B,CAACjL,EAAW,QAAZ,CACxC/B,KAAMkC,EAAmBQ,yBACzBzC,QAAS8B,IAoCEkL,GAAkC1J,IAAD,CAC5CvD,KAAMkC,EAAmBiB,kCACzBlD,QAASsD,I,gBCtDM2J,I,YAYAC,I,YAIAC,I,YAmBAC,I,YAIAC,I,YASAC,I,YAIAC,I,YAIAC,I,YAIAzB,I,YAWA0B,I,YAIAC,I,YAMAC,I,YAOAC,I,YAIAC,I,YAMAC,IAlGV,SAAUb,IAAW,QAAEjN,IAAvB,uEAEH,OAFG,kBAEG0D,QAAQC,IAAI,EAAG3D,GAFlB,OAGS,OAHT,SAGe2J,YAAKyB,GAAmBpL,GAHvC,OAIH,OADM+N,EAHH,gBAIGrK,QAAQC,IAAIoK,GAJf,OAKH,OALG,UAKGlE,YAAIgD,GAAmBkB,IAL1B,gCAQH,OARG,0BAOHrK,QAAQC,IAAR,MAPG,UAQGkG,YDjBwB,CAChC9J,KAAMkC,EAAmBG,uBCQpB,uDAYA,SAAU8K,KAAV,iEACL,OADK,SACCpD,YAAW7H,EAAmBC,mBAAoB+K,IADnD,wCAIA,SAAUE,IAAW,QAAEnN,IAAvB,+EAIS,OAJT,SAEKgC,EAAgDhC,EAAhDgC,QAASwG,EAAuCxI,EAAvCwI,cAAeiC,EAAwBzK,EAAxByK,WAAYnH,EAAYtD,EAAZsD,QAC5CI,QAAQC,IAAI3B,EAASwG,EAAeiC,EAAYnH,EAAStD,GAHtD,SAIe2J,YAChBqE,GACAhM,EACAwG,EACAiC,EACAnH,GATC,OAYH,OARMyD,EAJH,OAWHrD,QAAQC,IAAIoD,GAXT,SAYG8C,YAAIiD,MAZP,+BAeH,OAfG,0BAcHpJ,QAAQC,IAAR,MAdG,UAeGkG,YD1BuB,CAC/B9J,KAAMkC,EAAmBM,uBCUpB,uDAmBA,SAAU6K,KAAV,iEACL,OADK,SACCtD,YAAW7H,EAAmBI,mBAAoB8K,IADnD,wCAIA,SAAUE,IAAe,QAAErN,IAA3B,iEAEH,OAFG,kBAEG6J,YAAIkD,GAA2B/M,IAFlC,8BAKH,OALG,yBAIH0D,QAAQC,IAAR,MAJG,UAKGkG,YDzBgC,CACxC9J,KAAMkC,EAAmBS,2BCmBpB,sDASA,SAAU4K,KAAV,iEACL,OADK,SACCxD,YAAW7H,EAAmBO,uBAAwB6K,IADvD,wCAIA,SAAUE,IAAW,QAAEvN,IAAvB,iEACL,OADK,SACC6J,YDzBsB,CAC5B9J,KAAMkC,EAAmBW,qBACzB5C,QCuByBA,IADpB,wCAIA,SAAUwN,KAAV,iEACL,OADK,SACC1D,YAAW7H,EAAmBU,mBAAoB4K,IADnD,wCAIA,SAAUxB,IAAkB,QAAE/L,IAA9B,2EAGc,OAHd,SAEKgC,EAA2BhC,EAA3BgC,QAASwG,EAAkBxI,EAAlBwI,cAFd,SAGoBmB,YAAKmC,GAAkB9J,EAASwG,GAHpD,OAIH,OADM1G,EAHH,gBAIG+H,YD1B4B,CACpC9J,KAAMkC,EAAmBc,yBACzB/C,QCwBmC,CAAEgC,UAASF,cAJzC,8BAOH,OAPG,yBAMH4B,QAAQC,IAAR,uCAAe,KAAGL,SANf,UAOGuG,YDxB4B,CACpC9J,KAAMkC,EAAmBe,2BCgBpB,sDAWA,SAAUyK,KAAV,iEACL,OADK,SACCQ,YAAUhM,EAAmBa,uBAAwBiJ,IADtD,wCAIA,SAAU2B,IAAgB,QAAE1N,IAA5B,yEAGL,OAFQgC,EAAqBhC,EAArBgC,QAASsB,EAAYtD,EAAZsD,QACjBI,QAAQC,IAAI3B,EAASsB,GAFhB,SAGCuG,YAAImD,GAA+B,CAAEhL,UAASsB,aAH/C,wCAMA,SAAUqK,KAAV,iEACL,OADK,SACC7D,YACJ7H,EAAmBgB,gCACnByK,IAHG,wCAOA,SAAUE,IAAmB,QAAE5N,IAA/B,iEACL,OADK,SACC6J,YD3BiC,CACvC9J,KAAMkC,EAAmBmB,4BACzBpD,QCyBoCA,IAD/B,wCAIA,SAAU6N,KAAV,iEACL,OADK,SACC/D,YACJ7H,EAAmBkB,0BACnByK,IAHG,wCAMA,SAAUE,KAAV,iEACL,OADK,SACC9E,YAAI,CACRW,YAAKuD,IACLvD,YAAKyD,IACLzD,YAAK2D,IACL3D,YAAK6D,IACL7D,YAAK8D,IACL9D,YAAKgE,IACLhE,YAAKkE,MARF,wC,gBCjHkBK,IAAV,SAAUA,KAAV,iEACb,OADa,SACPlF,YAAI,CACRW,YAAKD,IACLC,YAAKY,IACLZ,YAAK+C,IACL/C,YAAKmE,MALM,wCCEf,MAAMK,GAAkBC,cAElBC,GAAc,CAACC,IAAQH,IAEvBI,GAAQC,YAAYvK,EAAawK,eAAmBJ,KAE1DF,GAAgBO,IAAIR,IAELK,U,0BCdf,MAGaI,GAAmBC,aAC9B,CAJmB/O,GAAUA,EAAMQ,QAKlCwO,GAAQA,EAAIxO,QCLTyO,GAAcjP,GAAUA,EAAMsE,KAEvB4K,GAA4BH,aACvC,CAACE,KACA3K,KAAWA,EAAK1E,cAQNuP,IALkBJ,aAC7B,CAACE,KACA3K,GAASA,EAAKzE,UAGiBkP,aAChC,CAACE,KACA3K,IAAD,uBAAUA,EAAK1E,mBAAf,aAAU,EAAkBmH,aAQjBqI,IALoBL,aAC/B,CAACE,KACA3K,GAASA,EAAK1E,cAGamP,aAC5B,CAACE,KACA3K,IAAD,uBAAUA,EAAK1E,mBAAf,aAAU,EAAkBiH,gBAGjBwI,GAAqBN,aAChC,CAACE,KACA3K,GAASA,EAAKxE,cAGJwP,GAAeP,aAC1B,CAACE,KACA3K,IAAD,uBAAUA,EAAK1E,mBAAf,aAAU,EAAkBkH,O,eC5BfyI,OANOC,KAAOC,KAAV,uFCAnB,MAAMC,GAAkB1P,GAAUA,EAAMwE,SAE3BmL,GAAuBZ,aAClC,CAACW,KACA9D,GAAYA,EAAQ/L,UAGV+P,GAAiBb,aAC5B,CAACW,KACA9D,GAAYA,EAAQ/J,WAGVgO,GAA8Bd,aACzC,CAACW,KACA9D,GAAYA,EAAQ5J,wBAGV8N,GAAuBf,aAClC,CAACW,KACA9D,GAAYA,EAAQ7J,iBAGVgO,GAAyBhB,aACpC,CAACW,KACA9D,GAAYA,EAAQ7J,eAAe+E,MAGzBkJ,GAA8BjB,aACzC,CAACW,KACA9D,IAAD,uBAAaA,EAAQ7J,sBAArB,aAAa,EAAwBI,WCyBxB8N,I,kBAAAA,GArDY,KAAO,MAAD,EACOC,mBAAS,IADhB,mBACxBC,EADwB,KACXC,EADW,OAECF,mBAAS,IAFV,mBAExBrO,EAFwB,KAEdwO,EAFc,KAIzBC,EAAcC,iBAAO,MAErBC,EAAQD,iBAAO,MA4CrB,OA7BAE,qBAAU,KACJN,EAGFG,EAAYI,QAAUC,YAAW,KAC/B5I,GAAWoI,GACRS,MAAM1J,IAGLrD,QAAQC,IAAIoD,GAnBGA,KACvB,IAAKA,EAAK,OAAO,EACjBrD,QAAQC,IAAIjC,EAAUqF,EAAK,IAC3B,MAAM2J,EAAcrI,OAAOkD,KAAK7J,GAAUiP,OACpCC,EAAcvI,OAAOkD,KAAKxE,GAAK4J,OAErC,OADAjN,QAAQC,IAAI+M,EAAaE,GAClBnQ,KAAKC,UAAUgQ,KAAiBjQ,KAAKC,UAAUkQ,IAczCC,CAAgB9J,KACnBrD,QAAQC,IAAI,iBAEZuM,EAAYnJ,OAGf+J,OAAOC,GAAMrN,QAAQC,IAAIoN,OAC3B,MAEHb,EAAY,IAEZc,aAAab,EAAYI,UAGpB,KACLS,aAAab,EAAYI,YAE1B,CAACP,IAEG,CAACA,EA3CgBe,IACtBd,EAAec,EAAEE,OAAO/Q,QA0CWwB,EAAU2O,ICnD1C,MAAMa,GAAgB7B,KAAO8B,IAAV,kSAMIC,GAAUA,EAAM/Q,MAAMgR,SAMjCD,GAAUA,EAAM/Q,MAAMiR,cAI5BC,GAAiBlC,KAAO8B,IAAV,sDAGdK,GAAanC,KAAO8B,IAAV,4EAKVM,GAAWpC,KAAOqC,KAAV,4MAETN,GAAUA,EAAM/Q,MAAMsR,QAQrBC,GAAevC,KAAOqC,KAAV,oGAMZG,GAASxC,KAAO8B,IAAV,oR,UCxCZ,MAAMI,GAAiBlC,KAAOyC,IAAV,wGACfV,GAAUA,EAAMW,SACfX,GAAUA,EAAMW,SACJX,GAAUA,EAAMW,SAGrB1C,KAAO8B,IAAV,6B,YCDjB,MAAMa,GAAe,EAAGC,aAAYC,cAAc,KAAMH,SAAS,KAE7D,eAAC,GAAD,CACEI,IAAKD,GAAeD,EACpBG,IAAI,aACJ1S,QAAQ,OACRqS,OAAQA,IAWdC,GAAaK,aAAe,CAC1BH,YAAa,KACbH,OAAQ,GAGV,MAAMO,GAAkBC,aAAyB,CAC/CN,WAAYjD,KAGCwD,mBAAQF,GAARE,CAAyBR,IC/BxC,MAAMS,GAAkB5S,GAAUA,EAAMiC,SAE3B4Q,GAAkB9D,aAC7B,CAAC6D,KACAnP,GAAYA,EAAQ5D,UAGViT,GAAgB/D,aAC3B,CAAC6D,KACA1E,GAAQA,EAAIjM,WC0BA8Q,OAlCW,CACxBC,EACA7Q,EACA2E,EAAM,KACNmM,EACAC,KAEAzC,qBAAU,KACRuC,EAAgB7Q,EAAS2E,KACxB,CAACkM,EAAiB7Q,EAAS2E,IAE9B2J,qBAAU,KACR,MAAM5F,EAAWtE,EAAO,UAAD,OAAWpE,IAClC,IAAIgR,EACAC,EAgBJ,OAfIH,IAAiB9Q,IACnBgR,EAActI,EACXvD,MAAM,YACNW,aAAa,aACbC,QAAQmL,KAAKC,OAChBF,EAASD,EAAYI,GAAG,eAAgBzH,IAAc,IAAD,EACnDjI,QAAQC,IAAIgI,EAAStE,OACjBsE,EAAStE,QAAS,UAAAsE,EAAStE,aAAT,eAAgByD,aAAcnE,IAC7CgF,EAAStE,MAAMvD,MAClBiP,EAAwB/Q,EAAS2J,EAAStE,YAM3C,IAAM2L,GAAeA,EAAYK,IAAI,cAAeJ,KAC1D,CAACH,EAAc9Q,EAAS2E,EAAKoM,KCpBlC,MAAMnB,GAAe,EACnB0B,qBAAsBT,EACtB7Q,UACA8Q,eACAS,6BAA8BC,EAE9BzF,UACK,IAAD,EAWJ,OAVA0F,GACEZ,EACA7Q,EAFkB,OAGlBuD,QAHkB,IAGlBA,GAHkB,UAGlBA,EAAM9F,mBAHY,aAGlB,EAAmBkH,IACnBmM,EACAU,GAEF9P,QAAQC,IAAIoK,EAAK,MAIf,gBAAC,GAAD,WACGA,GAAOA,EAAI1I,OAAS0I,EAAIA,EAAI1I,OAAS,GAAG/B,QAAQoQ,UAAU,EAAG,GAAK,GAClE3F,GAAOA,EAAI1I,OAAS,GAAK,gBAACwM,GAAD,eAAU9D,EAAI1I,cAY9CuM,GAAaS,aAAe,CAC1BS,aAAc,MAeDN,oBAZS,CAAC3S,EAAO8T,KAAR,OACtBb,aAAcjD,GAA4BhQ,GAC1CkO,KFvCiC/L,EEuCT2R,EAAW3R,QFvCU4M,aAC7C,CAAC6D,KACA1E,GAASA,EAAI/J,cAAgB+J,EAAI/J,cAAchC,GAAW,QEqCfnC,IFvCXmC,SE0CP4R,IAAD,CACzBN,qBAAsB,CAACtR,EAASwG,IAC9BoL,EdJiC5R,KAAD,CAClCjC,KAAMkC,EAAmBa,uBACzB9C,QAASgC,IcEEsR,CAAqB,CAAEtR,UAASwG,mBAC3C+K,6BAA8B,CAACvR,EAASsB,IACtCsQ,EdQyCtQ,KAAD,CAC1CvD,KAAMkC,EAAmBgB,gCACzBjD,QAASsD,IcVEiQ,CAA6B,CAAEvR,UAASsB,gBAGtCkP,CAA6CZ,IClD5D,MAAMiC,GAAO,EACXnN,cACAC,MACAC,WACA5E,UACA8R,uBAAwBC,MAExB,MAAMC,EAAY,CAChBhS,UACA0E,cACAC,MACAC,YAEF,OACE,qCACE,gBAACsK,GAAD,CAAe+C,QAAS,IAAMF,EAAWC,GAAYE,SAAS,IAA9D,UACE,eAAC3C,GAAD,UACE,eAAC,GAAD,CAAcQ,OAAQ,EAAGG,YAAatL,MAExC,gBAAC4K,GAAD,WACE,eAACC,GAAD,UAAW/K,IACX,eAAC,GAAD,CAAc1E,QAASA,aAejC6R,GAAKxB,aAAe,CAClBrQ,QAAS,MASImS,WAAMC,KAAK5B,YAAQ,MANNoB,IAAD,CACzBE,uBAAyBO,GAEvBT,ElBZkC,CACpC7T,KAAM6M,EAAmBtL,0BACzBtB,QkBUkCqU,OAGV7B,CAAkCqB,KCtD7CS,OALW,CAACpM,EAAOvB,IAEzB,CADeuB,EAAMqM,QAAO,EAAE9Q,KAASA,IAAQkD,KCQxD,MAkCM2L,GAAkBC,aAAyB,CAC/C5L,IAAKwI,KAGQgF,I,SAAAA,OAAMC,KAAK5B,YAAQF,GAARE,EAtCL,EAAGtK,QAAOvB,MAAK6N,gBAClC9Q,QAAQC,IAAI,eADsC,QAE1B8Q,GAAgBvM,EAAOvB,GAAxC+N,EAF2C,oBAIlD,OAEExM,EAAM7C,OAAS,EACXqP,EAAc7L,KAAI,EAAEpF,EAAKvD,KACvB,eAAC,GAAD,CACEwG,YAAaxG,EAAMwG,YACnBC,IAAKzG,EAAMyG,IACXC,SAAU1G,EAAM0G,UACXnD,KAGT+Q,EAAUnP,QACRmP,EAAU3L,KAAI,EAAGnC,cAAaC,MAAKC,WAAU5E,aAC3C,eAAC,GAAD,CACE0E,YAAaA,EACbC,IAAKA,EACLC,SAAUA,EAEV5E,QAASA,GADJ2E,SC5BZ,MAAMgO,GAAetF,KAAO8B,IAAV,0JAIOC,GAAUA,EAAM/Q,MAAMgR,SAIzCuD,GAAQvF,KAAOgB,MAAV,sWACNe,GAAUA,EAAMyD,OAAS,MACvBzD,GAAWA,EAAM0D,KAAO,EAAI,MAGzB1D,GAAUA,EAAM/Q,MAAM0U,SAGpB3D,GAAWA,EAAM0D,KAAO,IAAM,IACrC1D,GAAUA,EAAM/Q,MAAM2U,YAGpB5D,GAAUA,EAAM/Q,MAAM2U,YAQvBC,GAAO5F,KAAO6F,EAAV,qHACL9D,GAAUA,EAAM/Q,MAAM4U,OC1B5BE,GAAiB,CAAC/D,EAAO9K,KAC7B5C,QAAQC,IAAIyN,GAEV,uCACE,eAACwD,GAAD,2BAAWxD,GAAX,IAAkB9K,IAAKA,KACtB8K,EAAM0D,MAAQ,eAACG,GAAD,CAAMG,UAAU,sBAKtBjB,WAAMkB,WAAWF,ICFhC,MAsCM7C,GAAkBC,aAAyB,CAC/ClO,SAAUoL,GACV6F,UAAW9F,KAGE2E,I,eAAAA,OAAMC,KAAK5B,YAAQF,GAARE,EA3CJ,EAAGnO,WAAUiR,gBAAiB,MAAD,EACMC,KADN,mBAC1CvF,EAD0C,KAC7BwF,EAD6B,KACb9T,EADa,KACH2O,EADG,KAGjD,OADA3M,QAAQC,IAAI,iBAEV,uCACE,eAACgR,GAAD,UACE,eAAC,GAAD,CACEzU,MAAO8P,EACPyF,SAAUD,EACVvV,KAAK,SACL6U,MAAI,EACJY,YAAY,eACZC,aAAa,MACbrP,IAAK+J,OAGPiF,GACA,eAAC,GAAD,CACEpN,MAAOG,OAAOM,QAAQjH,IAAa2G,OAAOM,QAAQjH,GAClD8S,UAAWnQ,WC5Bd,MAAMuR,GAAoBvG,aAAOmC,GAAPnC,CAAH,qGAMjBwG,GAAkBxG,KAAOyG,OAAV,0MAEX1E,GAAUA,EAAM/Q,MAAMyV,SAQ1BC,GAAmB1G,KAAO8B,IAAV,yEAKhB6E,GAAO3G,KAAO4G,OAAV,8FAMJ1E,GAAiBlC,KAAO8B,IAAV,yE,OCfZ8D,OAdF5F,KAAO6F,EAAV,uLACE9D,GACPA,EAAMO,OAASP,EAAM/Q,MAAM6V,KAAQ,UAAc9E,EAAM/Q,MAAM4U,OAClD7D,GAAUA,EAAM+E,WACb/E,GAAUA,EAAMgF,cAELhF,GAAUA,EAAMO,OAASP,EAAM/Q,MAAM4U,OAGrD7D,GACRA,EAAM/Q,MAAM6V,KAAO,uBAAyB,YCRlD,MAAMG,GAAgB,EAAGF,WAAUC,cAAahB,eAE5C,eAAC,GAAD,CAAMe,SAAUA,EAAUC,YAAaA,EAAahB,UAAWA,IAUnEiB,GAAchE,aAAe,CAC3B8D,SAAU,IACVC,YAAa,KAGAC,U,oBCAAC,OAlBUC,IAAQ,MAAD,EACFxG,mBAAS,MADP,mBACvByG,EADuB,KACfC,EADe,KAe9B,OAbA/S,QAAQC,IAAI4S,EAAI,cAChBjG,qBAAU,KACR,MAAMoG,EAAYtQ,EAAO,UAAD,OAAWmQ,IAC7BtD,EAASyD,EAAUtD,GAAG,SAAUzH,IACpC,GAAIA,EAAStE,MAGX,OAFA3D,QAAQC,IAAIgI,EAAStE,YACrBoP,EAAU9K,EAAStE,OAGrBoP,EAAU,SAEZ,MAAO,IAAMC,EAAUrD,IAAI,QAASJ,KACnC,CAACsD,IACGC,GCTT,MAkBMlE,GAAkBC,aAAyB,CAC/CgE,GAAI3G,KAGS4C,mBAAQF,GAARE,EAtBI,EAAG+D,SACpB,MAAMC,EAASG,GAAeJ,GAE9B,OADA7S,QAAQC,IAAI6S,EAAQ,UAElB,eAAC5E,GAAD,UAEG4E,IACmB,WAAjBA,EAAO3W,MACJ2W,EAAO3W,MACP+W,KAAoBJ,EAAOtQ,oBCAxB2Q,OAbE,EAAGC,aAAYC,cAE5B,eAAC,IAAD,CAAMC,GAAIF,EAAV,SACE,eAAC,GAAD,CAAM1B,UAAW2B,MCOvB,MAAME,GAAS,EACbC,QACAC,QACAC,OACAC,QACAnF,cACAoF,WACArD,cAEAvQ,QAAQC,IAAI,UAEV,gBAACkS,GAAD,CAAiByB,SAAUA,EAA3B,UACE,gBAAC,GAAD,WACE,eAAC,GAAD,CAAcpF,YAAaA,IAC1BkF,GACC,gBAACxB,GAAD,WACE,eAACnE,GAAD,UAAW4F,IACX,eAAC,GAAD,UAIN,gBAACtB,GAAD,WACE,eAAC,GAAD,CAAUe,WAAW,QAAQC,SAAUG,IACvC,eAAClB,GAAD,CAAMuB,GAAG,SAAStD,QAASA,EAA3B,SACE,eAAC,GAAD,CAAesD,GAAG,SAASnC,UAAW+B,aAiBhDF,GAAO5E,aAAe,CACpB+E,MAAM,EACNC,MAAO,KACPnF,YAAa,KACbgF,MAAO,OACPC,MAAO,OACPlD,QAAS,QAGIE,I,GAAAA,OAAMC,KAAK6C,IClDXO,OAbWnI,KAAOoI,QAAV,qNAENrG,GAAUA,EAAM/Q,MAAMqX,gBCexBC,I,GAAAA,GAdE,KACfjU,QAAQC,IAAI,YAEV,gBAAC,GAAD,WACE,eAAC,GAAD,CACEuT,MAAM,sBACNC,MAAM,oBACNG,SAAS,SAEX,eAAC,GAAD,QCCSM,OAbYvI,KAAOoI,QAAV,qNAMPrG,GAAUA,EAAM/Q,MAAMwX,gBCexBrF,I,MAAAA,eAAQ,MANKoB,IAAD,CACzBkE,aAAc,IAAMlE,EvCMM,CAC1B7T,KAAM0E,EAAUrF,iBuCNhB6K,cAAe,IAAM2J,EAAS3J,MAC9BC,mBAAoB,IAAM0J,EAAS1J,SAGtBsI,EAdG,EAAGsF,eAAc7N,gBAAeC,wBAChD,gBAAC,GAAD,WACE,yBAAQ+J,QAAS6D,EAAjB,uBACA,yBAAQ7D,QAAShK,EAAjB,mBACA,yBAAQgK,QAAS/J,EAAjB,wB,SCXG,MAAM6N,GAAiB1I,KAAO8B,IAAV,iLAMVC,GAAUA,EAAM/Q,MAAMqX,gBAG1BM,GAAmB3I,KAAO8B,IAAV,4bCCd8G,OANU,IAEvB,eAACD,GAAD,ICIaD,OARQ,IAEnB,eAAC,GAAD,UACE,eAAC,GAAD,MCESG,OALMC,GAAsB,IAAkC,IAAhC7C,EAA+B,EAA/BA,UAAc3B,EAAiB,8BAE1E,OADAjQ,QAAQC,IAAI2R,EAAW,KAChBA,EAAY,eAAC,GAAD,IAAqB,eAAC6C,EAAD,eAAsBxE,K,oBCJhCyE,KAAUC,MAAM,CAC9CrW,QAASoW,KAAUE,OACnB5R,YAAa0R,KAAUE,OACvB3R,IAAKyR,KAAUE,OACf1R,SAAUwR,KAAUE,SAGgBF,KAAUE,OAAOC,WCgExCC,I,GAAAA,GArEM,CACnB/M,EACAjD,EACAgC,EACAiO,EACAC,EACAlN,EACAoC,KACI,MACI5L,EAAiByJ,EAAjBzJ,QAAS2E,EAAQ8E,EAAR9E,IACjB2J,qBAAU,KACHtO,GAGHyW,EAAYzW,GACZ4L,EAAmB5L,IAHnBwI,EAAchC,EAAe7B,KAK9B,CACD6D,EACAxI,EACA2E,EACA6B,EACAiQ,EACA7K,IAGF0C,qBAAU,KACR,MAAM5F,EAAWtE,EAAO,UAExB,IAAI6M,EAeJ,OAhBAvP,QAAQC,IAAI,OAER3B,IACFiR,EAASvI,EACNvD,MADM,UACGnF,EADH,cAEN8F,aAAa,aACbC,QAAQmL,KAAKC,OACbC,GAAG,eAAgBuF,IACdA,EAAKtR,QACPqR,EAAY,CACV,CAACC,EAAKlV,KAAMkV,EAAKtR,QAEnBuR,GAAWnN,EAASjD,QAIrB,IAELxG,GACA0I,EAASvD,MAAT,UAAkBnF,EAAlB,cAAsCqR,IAAI,cAAeJ,KAC1D,CAACxH,EAASzJ,EAAS0W,EAAalQ,IAEnC8H,qBAAU,KACR,MAAM5F,EAAWtE,EAAO,UAAD,OAAWpE,EAAX,cAEvB,IAAIiR,EASJ,OAVAvP,QAAQC,IAAI,OAER3B,IACFiR,EAASvI,EAAS5C,aAAa,QAAQsL,GAAG,iBAAkBuF,IAAU,IAAD,EACnEjV,QAAQC,IAAIgV,EAAKtR,MAAO,UACxB,UAAIsR,EAAKtR,aAAT,aAAI,EAAYvD,OACd0H,EAAQmN,EAAKtR,MAAM5D,SAIlB,IAELzB,GACA0I,EAASvD,MAAT,UAAkBnF,EAAlB,cAAsCqR,IAAI,gBAAiBJ,KAC5D,CAACxH,EAASzJ,EAAS0W,EAAalN,KCtEtB,OAA0B,uCCA1B,OAA0B,sCCqC1BqN,I,YAAAA,GAjCUxJ,KAAOoI,QAAV,uVAGDrG,GAAWA,EAAM/Q,MAAM6V,KAAO4C,GAAWC,KAG5C3H,GACdA,EAAM/Q,MAAM6V,KAAO,oBAAsB,sBAQvC,EAAGzK,aACHA,EAAO,oMClBN,MAAMuN,GAAS3J,KAAO4J,OAAV,qNAKF7H,GAAUA,EAAM/Q,MAAMyV,SAM1BoD,GAAc7J,KAAO4G,OAAV,oHAOM5G,KAAO8B,IAAV,6BACE9B,KAAO6F,EAAV,6B,aCnBnB,MAAMiE,GAAiB,CAAC,OAAQ,MAAO,OAEjCC,GAAW,CACtBC,YAAa,aAEFC,GAAoB,IAAMC,eCoFxBC,OAnFW,CACxB/N,EACAjD,EACAiR,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,KAEA,MAAMzW,EAAU8M,iBAAO,MACfpO,EAAiByJ,EAAjBzJ,QAAS2E,EAAQ8E,EAAR9E,IA8DjB,MAAO,CACLrD,EA5DoB,KAAO,IAAD,GAC1B,OAAIA,QAAJ,IAAIA,GAAJ,UAAIA,EAASiN,eAAb,aAAI,EAAkBrQ,SACpBuZ,EAAgBzX,EAASwG,EAAe7B,EAAKrD,EAAQiN,QAAQrQ,OAC7DoD,EAAQiN,QAAQrQ,MAAQ,KAIF6Q,IACxB,MAAMiJ,EAAOjJ,EAAEE,OAAOgJ,MAAM,GACtBC,EAAQ,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAM/Z,KAAKka,MAAM,KAAK,GACjCC,EAAS,IAAIC,WACfL,GAAQb,GAAemB,SAASJ,IAClCE,EAAOG,cAAcP,GACrBI,EAAOI,iBAAiB,QAAQ,KAC9Bd,GAAS,EAAMU,EAAOK,YAIxB7Q,MAAM,gCAIiB,KACrB+P,IACFjW,QAAQC,IAAIgW,EAAOpJ,SACnBoJ,EAAOpJ,QAAQmK,yBAAyBC,QAAQC,IAC9ClX,QAAQC,IAAIiX,GACZ,MAAMC,EAAWC,IAAIC,gBAAgBH,GACrChB,EAASiB,EAAUD,QAKH,KACpB,MAAMrE,EAAK+C,KACL0B,EAAaxV,EAChBc,MACAa,MAFgB,iBAEAoP,IAChB1M,IAAIiQ,EAAWV,IAClB4B,EAAW5H,GACT,iBACA,KACEyG,OAEF,KAEEjQ,MAAM,wCACNiQ,IACAE,OAEF,KACEiB,EAAWrP,SAASrF,IAAI2U,iBAAiBxK,MAAMyK,IAC7CzB,EAAgBzX,EAASwG,EAAe7B,EAAKuU,GAC7CrB,aClBKsB,I,eAAAA,GAxDU,KAAO,MAAD,EACHpL,mBAAS,CACjCqL,SAAS,EACTpB,KAAM,KACNqB,aAAc,KACd3b,SAAS,EACTkb,KAAM,OANqB,mBACtBU,EADsB,KACf5B,EADe,KAQvBC,EAASvJ,mBACPgL,EAA+CE,EAA/CF,QAASpB,EAAsCsB,EAAtCtB,KAAMta,EAAgC4b,EAAhC5b,QAAS2b,EAAuBC,EAAvBD,aAAcT,EAASU,EAATV,KAS9ClX,QAAQC,IAAI2X,GAwBZ,MAAO,CACLF,EACApB,EAlCmB,CAACuB,EAAWC,KAC/B9X,QAAQC,IAAI4X,EAAW,OACvB7B,EAAS,2BACJ4B,GADG,IAENF,QAASG,EACTvB,KAAMwB,MAKa,KACrB9B,EAAS,2BACJ4B,GADG,IAENF,SAAS,EACTpB,KAAM,KACNqB,aAAc,KACd3b,SAAS,MAqBXia,EAjBe,CAAC7H,EAAK2J,KACrB/B,EAAS,2BACJ4B,GADG,IAEND,aAAcvJ,EACd8I,KAAMa,MAeR/b,EACA2b,EAZiB,KACjB3B,GAAUgC,IAAeA,KAazBd,I,6BCpDG,MAAMe,GAAiBtM,KAAO8B,IAAV,yTAedyK,GAAkBvM,KAAO8B,IAAV,iDAIf0K,GAASxM,KAAO8B,IAAV,gQAYN2K,GAAczM,KAAO4G,OAAV,+JAUX8F,GAAQ1M,KAAOqC,KAAV,6F,OCpBHsK,OArBA3M,KAAO4G,OAAV,uZAEK7E,GAAWA,EAAM6K,OAAS,UAAY,YCAvD,MAAMD,GAAS,EAAGE,UAASD,SAAQhI,aACjC,eAAC,GAAD,CAAiBgI,OAAQA,EAAQhI,QAASA,EAA1C,SACGiI,IAULF,GAAO3J,aAAe,CACpB4J,QAAQ,GAGKD,UCLf,MAAMG,GAAc,EAClBf,UACAgB,aACAC,QACAH,UACAI,YACAC,aACA7c,UACA2b,eACAmB,gBAEA9Y,QAAQC,IAAIyX,EAAS1b,GAEnB,eAAC+c,GAAA,EAAD,CAAeC,GAAItB,EAASuB,QAAS,IAAKC,WAAW,OAAOC,eAAa,EAAzE,SACE,eAAClB,GAAD,UACE,eAACE,GAAD,UACGnc,EACC,eAAC,GAAD,IAEA,uCACI2b,EAUA,sBACElJ,IAAKkJ,EACLxG,MAAM,MACN9C,OAAO,MACPK,IAAI,iBAbN,eAAC,KAAD,CACE9L,IAAKgW,EACLD,MAAOA,EACPxH,MAAO,IACP9C,OAAQ,IACRV,OAAQ,GACRyL,MAAO,MAUX,gBAAClB,GAAD,WACE,eAAC,GAAD,CAAQK,QAAM,EAACC,QAAQ,QAAQjI,QAASmI,IACxC,eAAC,GAAD,CAAQF,QAAQ,OAAOjI,QAASsI,IAC/BlB,GACC,eAAC,GAAD,CAAQa,QAASA,EAASjI,QAASuI,OAGvC,eAACV,GAAD,CAAa7H,QAASmI,EAAtB,SACE,eAACL,GAAD,iCAoBhBI,GAAY9J,aAAe,CACzBgK,MAAO,KACPhB,aAAc,MAGDc,UCzEf,MAAMY,GAAe,EACnBtR,UACAjD,gBACAiR,gBAAiBtM,MACZ,MAAD,EAYA6P,KAZA,oBAEF5B,EAFE,KAGFpB,EAHE,KAIFiD,EAJE,KAKFC,EALE,KAMFvD,EANE,KAOFC,EAPE,KAQFla,EARE,KASF2b,EATE,KAUFxB,EAVE,KAWFe,EAXE,OAmBAuC,GACF1R,EACAjD,EACA2E,EACA8P,EACAtD,EACAC,EACAC,EACAe,EACAsC,GA5BE,mBAcF5Z,EAdE,KAeF8Z,EAfE,KAgBFC,EAhBE,KAiBFC,EAjBE,KAkBFC,EAlBE,KA+BJ,OADA7Z,QAAQC,IAAI,gBAEV,gBAACqV,GAAD,WACE,eAAC,GAAD,CAAMzB,GAAG,SAASnC,UAAU,iBAE5B,wBAAOoI,QAAQ,YAAf,SACE,eAAC,GAAD,CAAMpI,UAAU,uBAElB,wBAAOmB,GAAG,YAAYxW,KAAK,OAAO0V,SAAU4H,IAC5C,eAAC,GAAD,CACEpd,KAAK,UACLyV,YAAY,iBACZpP,IAAKhD,EACLqS,aAAa,QAEf,eAACuD,GAAD,CAAajF,QAASmJ,EAAtB,SACE,eAAC,GAAD,CAAMhI,UAAU,yBAElB,eAAC,GAAD,CACEgG,QAASA,EACTgB,WAAYc,EACZb,MAAOrC,EACPkC,QAAQ,OACRI,UAAW3C,EACX4C,WAAYe,EACZ5d,QAASA,EACT2b,aAAcA,EACdmB,UAAWe,QAYnBR,GAAa1K,aAAe,CAC1B5G,QAAS,MASI0I,WAAMC,KAAK5B,YAAQ,MANNoB,IAAD,CACzB6F,gBAAiB,CAACzX,EAASwG,EAAeiC,EAAYnH,IAEpDsQ,EjD5E4BtQ,KAAD,CAC7BvD,KAAMkC,EAAmBI,mBACzBrC,QAASsD,IiD0EEmW,CAAgB,CAAEzX,UAASwG,gBAAeiC,aAAYnH,gBAGzCkP,CAAkCuK,KCvE7CvE,I,kBAAAA,GArBM,CAAC/M,EAASjD,EAAe1G,KAC5C,MAAM2b,EAAiBrN,iBAAO,MAC9BE,qBAAU,KACR9E,GAAQC,EAASjD,KAChB,CAACA,EAAeiD,IAcnB,OAJA6E,qBAAU,KARa,MAAO,IAAD,EACb,OAAdmN,QAAc,IAAdA,GAAA,UAAAA,EAAgBlN,eAAhB,SAAyBmN,eAAe,CACtCC,UAAW,SACXC,MAAO,MACPC,OAAQ,aAKVC,KACC,CAAChc,EAASuD,SAEN,CAACoY,ICjBH,MAAMM,GAAW1O,aAAO4F,GAAP5F,CAAH,kIACT+B,GAAWA,EAAMtN,KAAO,UAAY,SAOnCoN,GAAgB7B,KAAO8B,IAAV,gKASb0H,GAAmBxJ,KAAO8B,IAAV,mJAMxBC,IACAA,EAAMkG,UAAP,2CAKS0G,GAAU3O,KAAO8B,IAAV,yLAOHC,GACbA,EAAMkG,SAAWlG,EAAM/Q,MAAM4d,gBAAkB7M,EAAM/Q,MAAM6d,eAGlDC,GAAO9O,KAAOqC,KAAV,yHAKLN,GAAUA,EAAM/Q,MAAMsR,QAGrBkC,GAAOxE,KAAOqC,KAAV,iNAGLN,GAAUA,EAAM/Q,MAAMsR,Q,2BC/CnByM,OAND/O,KAAOyC,IAAV,4FACEV,GAAUA,EAAMW,SACjBX,GAAUA,EAAMyD,QCIbuJ,OAJF,EAAGrM,SAAO,GAAI8C,QAAM,GAAI1C,SACnC,eAAC,GAAD,CAAgBJ,OAAQA,EAAQ8C,MAAOA,EAAO1C,IAAKA,ICOrD,MAAMkM,GAAc,EAAG/a,UAASgU,WAAUxR,YAAWhC,WACnDJ,QAAQC,IAAI2T,EAAUxT,GAEpB,eAAC,GAAD,CAAkBwT,SAAUA,EAA5B,SACE,gBAAC0G,GAAD,CAAa1G,SAAUA,EAAvB,UACE,gBAAC6G,GAAD,WACGG,KAAUxY,EAAW,CAAEyY,eAAgB,SAAUC,MAAM,EAAG,GACjD,OAAT1a,GAAiB,eAACia,GAAD,CAAU3I,UAAU,eAAetR,KAAMA,OAE5DR,EAAQgX,SAAS,QAChB,eAAC,GAAD,CAAOnI,IAAK7O,IAEZ,eAAC,GAAD,UAAOA,UAcjB+a,GAAYhM,aAAe,CACzBvO,KAAM,MAGOua,UC9Bf,MAAML,GAAU,EAAGvS,UAASjD,gBAAe1G,eACzC,MAAM2c,EAAgB3c,EAAWuG,OAAOC,OAAOxG,GAAY,GADH,EAE/B4c,GAAYjT,EAASjD,EAAeiW,GAAtDhB,EAFiD,oBAGxD,OACE,eAAC,GAAD,UACG3b,GACC2c,EAAc5V,KAAKxB,GACjB,iCACE,eAAC,GAAD,CACE/D,QAAS+D,EAAI/D,QACbgU,SAAUjQ,EAAIyD,YAActC,EAC5B1C,UAAWuB,EAAI2D,UACflH,KAAMuD,EAAIyD,YAActC,EAAgBnB,EAAIvD,KAAO,OAErD,sBAAKwC,IAAKmX,MAPFpW,EAAI5D,IAAM8S,WAmB9ByH,GAAQ3L,aAAe,CACrB5G,QAAS,MAGX,MAAM6G,GAAkBC,aAAyB,CAC/CzQ,SAAU6Q,KAGGH,mBAAQF,GAARE,CAAyBwL,ICvCxC,MAAM1L,GAAkBC,aAAyB,CAC/C+C,UAAW5C,KAKEiM,OAFWC,YAAQpM,YAAQF,IAAkBuM,GAAlCD,CAA2CE,ICSrE,MAAMA,GAAW,EACfrT,UACAjD,gBACAuW,mBAAoBvU,EACpBwU,iBAAkBvG,EAClBwG,yBAA0B5R,EAC1B6R,aAAc1T,EACd2T,wBAAyBvR,EACzBwR,2BAA4BC,MAE5B3b,QAAQC,IAAI,UAAW8H,EAASjD,GAChC8W,GACE7T,EACAjD,EACAgC,EACAiO,EACApL,EACA7B,EACAoC,GAGA,gBAAC,GAAD,CAAkBnC,UAAWA,EAA7B,UACE,eAAC,GAAD,CACE0L,MAAM,cACNlD,QAASoL,EACTjI,MAAI,EACJC,MAAK,OAAE5L,QAAF,IAAEA,OAAF,EAAEA,EAAS/E,YAChBwL,YAAW,OAAEzG,QAAF,IAAEA,OAAF,EAAEA,EAAS7E,SACtB0Q,SAAS,UAEX,eAAC,GAAD,CAAS7L,QAASA,EAASjD,cAAeA,IAC1C,eAAC,GAAD,CAAciD,QAASA,EAASjD,cAAeA,QAgBrDsW,GAASzM,aAAe,CACtB5G,QAAS,MAeI+G,mBAAQ,MAZKoB,IAAD,CACzBmL,mBAAoB,CAACvW,EAAeiC,IAElCmJ,E5D5C8B,EAACpL,EAAeiC,KAAhB,CAChC1K,KAAM6M,EAAmBzL,qBACzBnB,QAAS,CAAEwI,gBAAeiC,gB4D0CfsU,CAAmBvW,EAAeiC,IAC7CuU,iBAAmBzI,GAAO3C,EzDzEI,CAC9B7T,KAAMkC,EAAmBC,mBACzBlC,QyDuEoDuW,IACpD0I,yBAA2BM,GAAS3L,EzD9CE,CACtC7T,KAAMkC,EAAmBO,uBACzBxC,QyD4CsEuf,IACtEL,aAAe3I,GAAO3C,EzDjCK2C,KAAD,CAC1BxW,KAAMkC,EAAmBU,mBACzB3C,QAASuW,IyD+BsB2I,CAAa3I,IAC5C4I,wBAA0Bnd,GAExB4R,EzDFmC,CACrC7T,KAAMkC,EAAmBkB,0BACzBnD,QyDAmCgC,IACnCod,2BAA4B,IAAMxL,E5D3BM,CACxC7T,KAAM6M,EAAmBpL,oC4D4BZgR,CAAkCsM,IC5EjD,MAAMxM,GAAkBC,aAAyB,CAC/C+C,UAAW5F,KAKEiP,OAFWC,YAAQpM,YAAQF,IAAkBuM,GAAlCD,CAA2CE,ICArE,MAAMU,GAAY,EAChBhX,gBAEAiD,cAEA/H,QAAQC,IAAI,cACL8H,EACL,eAAC,GAAD,CAAUA,QAASA,EAASjD,cAAeA,IAE3C,eAAC,GAAD,KAUJgX,GAAUnN,aAAe,CACvB5G,QAAS,MAGX,MAAM6G,GAAkBC,aAAyB,CAC/C/J,cAAe2G,GACf1D,QAASkE,KAGI6C,mBAAQF,GAARE,CAAyBgN,ICEzBC,OAlCF,CAACrX,EAAQsX,KACpBpP,qBAAU,KACR,MAAMqP,EAAwBvZ,EAAO,UAAD,OAAWgC,IACzCwX,EAAcxZ,EAAO,mBACrB6M,EAAS2M,EAAYxM,GAAG,SAAUzH,IAClCA,EAAStE,OACXsY,EACGE,eACApY,IAAIxB,GACJwK,MAAK,KACJkP,EAAsBlY,IAAItB,SAIlC,MAAO,IAAMyZ,EAAYvM,IAAI,QAASJ,KACrC,CAAC7K,IAEJkI,qBAAU,KACR,MAAM7H,EAAarC,EAAO,YACpB6M,EAASxK,EACZtB,MAAMiB,GACNN,aAAa,aACbC,QAAQmL,KAAKC,OACbC,GAAG,eAAgBuF,IAClBjV,QAAQC,IAAIgV,EAAKtR,MAAO,OACpBsR,EAAKtR,QACP3D,QAAQC,IAAI,QACZ+b,EAAY,CAAC/G,EAAKtR,YAGxB,MAAO,IAAMoB,EAAWtB,MAAMiB,GAAQiL,IAAI,cAAeJ,KACxD,CAAC7K,EAAQsX,KC1Bd,MAoBMpN,GAAkBC,aAAyB,CAC/CnK,OAAQ+G,KAGKgF,I,qBAAAA,OAAMC,KAAK5B,YAAQF,IARNsB,IAAD,CACzBkM,qBAAuBpe,GAAakS,EhE3BF,CAClC7T,KAAM6M,EAAmB/L,wBACzBb,QgEyBkE0B,OAO1C8Q,EAxBb,EAAGpK,SAAQ0X,qBAAsBJ,MAC5CK,GAAa3X,EAAQsX,GACrBhc,QAAQC,IAAI,eAEV,gBAAC,GAAD,WACE,eAAC,GAAD,IACA,eAAC,GAAD,WChBC,MAAMqc,GAAgB3Q,KAAOC,KAAV,mKASb2Q,GAAU5Q,KAAOoI,QAAV,4OAcPlG,GAAiBlC,KAAO6Q,OAAV,gEAIdC,GAAe9Q,KAAO8B,IAAV,sDAIZiN,GAAQ/O,KAAOyC,IAAV,gDAILsO,GAAY/Q,KAAOgR,WAAV,wIAOTC,GAAejR,KAAO4G,OAAV,yWC5CV,WAA0B,qCCK1BsK,OALG,CAACC,EAAiBC,KAClC/c,QAAQC,IAAI6c,GACRA,GAAiBC,EAAQ5V,KAAK,MCiBpC,MAgCMyH,GAAkBC,aAAyB,CAC/CiO,gBAAiBzR,KAOJyD,mBAAQF,IAJKsB,IAAD,CACzB8M,kBAAmB,IAAM9M,EzEtDM,CAC/B7T,KAAM0E,EAAU3F,0ByEwDH0T,EAxCF,EACXkO,kBAAmBvX,EACnBqX,kBACAC,cAGAF,GAAUC,EAAiBC,GAEzB,uCACGD,GAAmB,eAAC,KAAD,CAAUxJ,GAAG,MACjC,eAACgJ,GAAD,UACE,gBAACC,GAAD,WACE,gBAAC,GAAD,WACE,eAACE,GAAD,UACE,eAAC,GAAD,CAAOhO,IAAKwO,OAEd,eAACP,GAAD,qCAEF,eAACE,GAAD,CAAcrM,QAAS9K,EAAvB,4CC9BV,MAAMmJ,GAAkBC,aAAyB,CAC/C+C,UAAWpG,KAKE8Q,OAFOpB,YAAQpM,YAAQF,IAAkBuM,GAAlCD,CAA2CgC,ICHjE,MAiBMtO,GAAkBC,aAAyB,CAC/CiO,gBAAiBzR,KAGJyD,I,GAAAA,eAAQF,GAARE,EArBO,IAAwD,IAA3CqO,EAA0C,EAArDC,UAAsBN,EAA+B,EAA/BA,gBAAoBO,EAAW,gDAE3E,OADArd,QAAQC,IAAI6c,EAAiB,QAE3B,eAAC,KAAD,2BACMO,GADN,IAEEC,OAAS5P,GACPoP,EAAkB,eAACK,EAAD,eAAezP,IAAY,eAAC,KAAD,CAAU4F,GAAG,kBCFnDiK,OAVS5R,KAAOgI,MAAV,4MCUN6J,OATG,IAEd,uCACE,eAAC,GAAD,CAAW1D,QAAQ,OAAnB,kCACA,wBAAOjH,GAAG,OAAOxW,KAAK,OAAOohB,OAAO,eCuB3BC,I,MAAAA,GA3BO,CAAC5Y,EAAeX,KACpC,MAAMwZ,EAAWjR,iBAAO,MAuBxB,MAAO,CAACiR,EArBe,KAAO,IAAD,MAC3B,GAAIxZ,KAAQ,OAAKwZ,QAAL,IAAKA,GAAL,UAAKA,EAAU9Q,eAAf,aAAK,EAAmBrQ,OAElC,OADA0J,MAAM,yBACC,EAET,KAAI,OAACyX,QAAD,IAACA,GAAD,UAACA,EAAU9Q,eAAX,aAAC,EAAmBrQ,OAEtB,OADA0J,MAAM,6BACC,EAYT,OAVgBxD,EAAO,SAEpBe,MAAMqB,GACNqD,OAAO,CACNnF,YAAW,OAAE2a,QAAF,IAAEA,GAAF,UAAEA,EAAU9Q,eAAZ,aAAE,EAAmBrQ,QAEjCuQ,OACAK,OAAM,KACLlH,MAAM,6CAEH,KCtBJ,MAAM0X,GAAYjS,KAAOgI,MAAV,qIAGVjG,GAAUA,EAAM/Q,MAAMsR,QAIrBiD,GAAQvF,aAAOkS,GAAPlS,CAAH,uGCwBZiD,GAAkBC,aAAyB,CAC/C1K,SAAUoH,GACVzG,cAAe2G,KAGFqD,mBAAQF,GAARE,EA3BE,EAAG3K,WAAUW,oBAAqB,MAAD,EACb4Y,GAAc5Y,EAAeX,GADhB,mBACzCwZ,EADyC,KAC/BG,EAD+B,KAEhD,OACE,uCACE,eAACF,GAAD,mBACA,eAAC,GAAD,CACE5L,YAAY,WACZC,aAAa,MACb1V,KAAK,WACLwhB,aAAc5Z,EACdvB,IAAK+a,IAEP,eAAC,GAAD,CAAQpN,QAASuN,EAAgBtF,QAAQ,iBCbhCwF,I,YAAAA,GAXK,CAClB,CACEnL,GAAI,cACJtW,KAAM,SAER,CACEsW,GAAI,aACJtW,KAAM,SCJH,MAAM0hB,GAAUtS,KAAO8B,IAAV,iDAGPyQ,GAAcvS,KAAOgI,MAAV,2HAOXwK,GAAYxS,KAAO8B,IAAV,kYAGTC,GACTA,EAAM/Q,MAAM6V,KAAO,oBAAsB,sBAkBhCtB,GAAQvF,KAAOgB,MAAV,yFACFwR,ICxBDC,OAZO,CAACC,EAASC,IASvB,CARcjR,IACLA,EAAEE,OAAOsF,GACb+D,SAAS,QACjByH,IAEAC,MCSN,MAoCM1P,GAAkBC,aAAyB,CAC/ClS,MAAOsO,KAQM6D,mBAAQF,IALKsB,IAAD,CACzB3J,cAAe,IAAM2J,EAAS3J,MAC9BC,mBAAoB,IAAM0J,EAAS1J,SAGtBsI,EA7CD,EACZvI,cAAe8X,EACf7X,mBAAoB8X,EACpB3hB,YACK,MAAD,EACkByhB,GAAcC,EAASC,GAAtCC,EADH,oBAEJ,OACE,uCACE,eAACX,GAAD,oBACA,eAACK,GAAD,UACGO,GAAKrZ,KAAKsZ,GACT,gBAACP,GAAD,CAAapE,QAAS2E,EAAM5L,GAA5B,UACE,eAAC,GAAD,CACExW,KAAK,QACLwW,GAAI4L,EAAM5L,GACVtW,KAAK,QACLwV,SAAUwM,EACVG,QAAS/hB,IAAU8hB,EAAMliB,KAAKoiB,gBAEhC,eAACR,GAAD,IACA,eAACP,GAAD,CAAWgB,MAAO,CAAEC,OAAQ,EAAGpM,SAAU,UAAzC,SACGgM,EAAMliB,SAV0BkiB,EAAMliB,gBCDtCuiB,I,MAAAA,GAtBM,CAAChZ,EAAepB,KACnCkI,qBAAU,KACR,MACMmS,EADUrc,EAAO,SACMe,MAAMiB,GAC7B6K,EAASwP,EAAarP,GAAG,iBAAkBzH,IAC/C,MAAM+W,EAAgB/W,EAAStE,MAC/B,GAAIqb,EAAe,CACjB,MAAMziB,EAAOyiB,EAAcpI,SAAS,QAChC,WACA,cACJ9Q,EAAc,CACZvJ,OACAC,MAAOwiB,QAIb,MAAO,KACLD,EAAapP,IAAI,gBAAiBJ,MAEnC,CAAC7K,EAAQoB,KCpBP,MAAMmZ,GAAmBtT,KAAOC,KAAV,kNAOZ8B,GAAUA,EAAM/Q,MAAMqX,gBAI1BkL,GAAoBvT,KAAO8B,IAAV,8ECyBxBmB,GAAkBC,aAAyB,CAC/CnK,OAAQ+G,KAGKqD,mBAAQF,IARKsB,IAAD,CACzBiP,mBAAqBC,GAAYlP,EvFED,CAChC7T,KAAM0E,EAAUnF,qBAChBU,QuFJ6D8iB,OAOhDtQ,EA5BC,EAAGqQ,mBAAoBrZ,EAAepB,aACpD2a,GAAgBvZ,EAAepB,GAE7B,gBAACua,GAAD,WACE,eAAC,GAAD,CAAc5Q,OAAQ,IACtB,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC6Q,GAAD,UACE,eAAC,GAAD,CAAU9L,WAAW,IAAIC,SAAS,wBAEpC,eAAC,GAAD,UCTSiM,OARE,IACf,gBAAC,KAAD,WACE,eAAC,GAAD,CAAcC,OAAK,EAACC,KAAK,IAAIpC,UAAWrB,KACxC,eAAC,KAAD,CAAOwD,OAAK,EAACC,KAAK,UAAUpC,UAAWF,KACvC,eAAC,GAAD,CAAcsC,KAAK,QAAQpC,UAAWqC,QCXnC,MAAMC,GAAa,CACxBlN,KAAM,EACNJ,OAAQ,UACR4B,cAAe,UACfG,cAAe,UACfrB,OAAQ,UACRlF,YAAa,UACbyD,OAAQ,UACRC,UAAW,UACXrD,MAAO,OACPsD,KAAM,OACN5D,OAAQ,OACR4M,gBAAiB,UACjBC,aAAc,QAGHmF,GAAY,CACvBnN,KAAM,EACNJ,OAAQ,UACR4B,cAAe,UACfhW,SAAU,UACVmW,cAAe,UACfrB,OAAQ,WACRlF,YAAa,UACbyD,OAAQ,UACRC,UAAW,UACXrD,MAAO,OACPsD,KAAM,UACN5D,OAAQ,UACR4M,gBAAiB,UACjBC,aAAc,WCmBDoF,OA3CE,CAACha,EAAkBia,EAAeljB,EAAOogB,EAASf,KAAiB,MAAD,EAC7C3P,oBAAS,GADoC,mBAC1EyT,EAD0E,KAC9DC,EAD8D,KAIjFnT,qBAAU,KACR,MAAMoT,EAAene,EAAKoe,oBAAoBhL,IAE5C,GADAjV,QAAQC,IAAI,GAAIgV,GACZA,GAAQA,EAAKhS,IAAK,CAAC,MAEnBA,EACEgS,EADFhS,IAAKE,EACH8R,EADG9R,MAAOD,EACV+R,EADU/R,SAAUF,EACpBiS,EADoBjS,YAExB4C,EAAiB,CACf3C,MACAE,QACAD,WACAF,gBAEFgZ,EAAY/Y,GAEZ8c,GAAc,QAEdA,GAAc,GACdhD,EAAQ5V,KAAK,cAGjB,MAAO,KACL6Y,OAED,CAACpa,EAAkBmX,EAASf,IAE/BpP,qBAAU,KACR,MAAMsT,ElGhCRtjB,QAAUG,KAAKojB,MAAMtjB,aAAaujB,QAAQ,UkGiCxCpgB,QAAQC,IAAI,IAAKigB,GACbA,GAA6C,UAAvBA,IACxBlgB,QAAQC,IAAI,SACZ4f,OAED,CAACA,IAGJ,MAAO,CAD2B,SAAVljB,EAAmBgjB,GAAYD,GACnCI,I,MC9BtB,MAsCMlR,GAAkBC,aAAyB,CAC/CwR,SAAUpV,KAEGqV,oBAAWxR,YAAQF,IATNsB,IAAD,CACzBtK,iBAAmBnF,GAASyP,E3FjBGzP,KAAD,CAC9BpE,KAAM0E,EAAUxF,mBAChBe,QAASmE,I2Fe4BmF,CAAiBnF,IACtD+F,mBAAoB,IAAM0J,EAAS1J,MACnC+Z,sBAAwB7b,GAAWwL,EtFnCA,CACnC7T,KAAM6M,EAAmB5L,4BACzBhB,QsFiCkEoI,OAM1CoK,EAzCd,EACVlJ,iBAAkB4a,EAClBha,mBAAoBG,EACpB0Z,SAAU1jB,EACVogB,UAAU,GACVwD,sBAAuBE,MAClB,MAAD,EAC2BC,GAC7BF,EACA7Z,EACAhK,EACAogB,EACA0D,GANE,mBACGJ,EADH,KAQJ,OARI,KASF,eAAC,GAAD,IAEA,eAAC,KAAD,CAAe1jB,MAAO0jB,EAAtB,SACE,eAAC,GAAD,UC1BN,MAAMM,GAAcC,SAASC,eAAe,QAC5CC,IAASxD,OACP,eAAC,IAAD,CAAUzS,MAAOA,GAAjB,SACE,eAAC,IAAD,UACE,eAAC,GAAD,QAGJ8V,M","file":"static/js/main.e197aa70.chunk.js","sourcesContent":["const userTypes = {\r\n  GOOGLE_SIGN_IN_START: 'GOOGLE_SIGN_IN_START',\r\n  GOOGLE_SIGN_IN_SUCCESS: 'GOOGLE_SIGN_IN_SUCCESS',\r\n  GOOGLE_SIGN_IN_FAILURE: 'GOOGLE_SIGN_IN_FAILURE',\r\n\r\n  CHECK_USER_SESSION: 'CHECK_USER_SESSION',\r\n  SIGN_IN_SUCCESS: 'SIGN_IN_SUCCESS',\r\n  SIGN_IN_FAILURE: 'SIGN_IN_FAILURE',\r\n\r\n  SIGN_OUT_START: 'SIGN_OUT_START',\r\n  SIGN_OUT_SUCCESS: 'SIGN_OUT_SUCCESS',\r\n\r\n  CHANGE_PROFILE_START: 'CHANGE_PROFILE_START',\r\n  CHANGE_PROFILE_SUCCESS: 'CHANGE_PROFILE_SUCCESS',\r\n};\r\n\r\nexport default userTypes;\r\n","import userTypes from './user.type';\r\n\r\nconst initialState = {\r\n  currentUser: null,\r\n  loading: false,\r\n  userLoading: false,\r\n};\r\n\r\nconst UserReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case userTypes.GOOGLE_SIGN_IN_START:\r\n    case userTypes.SIGN_OUT_START:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n\r\n    case userTypes.CHECK_USER_SESSION:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        userLoading: true,\r\n      };\r\n    case userTypes.GOOGLE_SIGN_IN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      };\r\n    case userTypes.SIGN_IN_SUCCESS:\r\n      return {\r\n        currentUser: action.payload,\r\n        loading: false,\r\n        userLoading: false,\r\n      };\r\n\r\n    case userTypes.SIGN_OUT_SUCCESS:\r\n    case userTypes.GOOGLE_SIGN_IN_FAILURE:\r\n      return {\r\n        currentUser: null,\r\n        loading: false,\r\n      };\r\n\r\n    case userTypes.SIGN_IN_FAILURE:\r\n      return {\r\n        currentUser: null,\r\n        loading: false,\r\n        userLoading: false,\r\n      };\r\n    case userTypes.CHANGE_PROFILE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        currentUser: {\r\n          ...state.currentUser,\r\n          [action.payload.name]: action.payload.value,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default UserReducer;\r\n","// eslint-disable-next-line\r\nexport const themeActionTypes = {\r\n  SET_COLOR_THEME_START: 'SET_COLOR_THEME_START',\r\n  SET_COLOR_THEME: 'SET_COLOR_THEME',\r\n  SET_COLOR_THEME_FAILURE: 'SET_COLOR_THEME_FAILURE',\r\n\r\n  SET_COLOR_THEME_LIGHT_START: 'SET_COLOR_THEME_LIGHT_START',\r\n  SET_COLOR_THEME_LIGHT: 'SET_COLOR_THEME_LIGHT',\r\n  SET_COLOR_THEME_LIGHT_FAILURE: 'SET_COLOR_THEME_LIGHT_FAILURE',\r\n};\r\n","/* eslint-disable */\r\nexport const setTheme = (theme = 'dark') =>\r\n  window && localStorage.setItem('theme', JSON.stringify(theme));\r\n\r\nexport const getTheme = () =>\r\n  window && JSON.parse(localStorage.getItem('theme'));\r\n","import { themeActionTypes } from './theme.type';\r\nimport { setTheme } from '../../helpers/localstorage';\r\n\r\nconst initialState = {\r\n  theme: 'dark',\r\n};\r\n\r\nconst themeReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case themeActionTypes.SET_COLOR_THEME:\r\n      setTheme('dark');\r\n      return {\r\n        theme: 'dark',\r\n      };\r\n    case themeActionTypes.SET_COLOR_THEME_LIGHT:\r\n      setTheme('light');\r\n      return {\r\n        theme: 'light',\r\n      };\r\n    case themeActionTypes.SET_COLOR_THEME_FAILURE:\r\n    case themeActionTypes.SET_COLOR_THEME_LIGHT_FAILURE:\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default themeReducer;\r\n","const channelActionTypes = {\r\n  DISPLAY_USER_LIST_START: 'DISPLAY_USER_LIST_START',\r\n  DISPLAY_USER_LIST_SUCCESS: 'DISPLAY_USER_LIST_SUCCESS',\r\n  DISPLAY_USER_LIST_FAILURE: 'DISPLAY_USER_LIST_FAILURE',\r\n\r\n  DISPLAY_ADDED_CHANNEL_START: 'DISPLAY_ADDED_CHANNEL_START',\r\n  DISPLAY_ADDED_CHANNEL_SUCCESS: 'DISPLAY_ADDED_CHANNEL_SUCCESS',\r\n  DISPLAY_ADDED_CHANNEL_FAILURE: 'DISPLAY_ADDED_CHANNEL_FAILURE',\r\n\r\n  CREATE_CHANNEL_START: 'CREATE_CHANNEL_START',\r\n  CREATE_CHANNEL_SUCCESS: 'CREATE_CHANNEL_SUCCESS',\r\n  CREATE_CHANNEL_FAILURE: 'CREATE_CHANNEL_FAILURE',\r\n\r\n  SET_CURRENT_CHANNEL_START: 'SET_CURRENT_CHANNEL_START',\r\n  SET_CURRENT_CHANNEL_SUCCESS: 'SET_CURRENT_CHANNEL_SUCCESS',\r\n\r\n  SET_CURRENT_CHANNEL_NULL_START: 'SET_CURRENT_CHANNEL_NULL_START',\r\n  SET_CURRENT_CHANNEL_NULL_SUCCESS: 'SET_CURRENT_CHANNEL_NULL_SUCCESS',\r\n};\r\n\r\nexport default channelActionTypes;\r\n","import channelActionTypes from './channels.type';\r\n\r\nconst initialState = {\r\n  chatList: [],\r\n  loading: false,\r\n  success: false,\r\n  currentChannel: null,\r\n  currentChannelLoading: false,\r\n  messages: null,\r\n};\r\n\r\nconst ChannelReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case channelActionTypes.DISPLAY_USER_LIST_START:\r\n    case channelActionTypes.DISPLAY_ADDED_CHANNEL_START:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        success: false,\r\n      };\r\n    case channelActionTypes.DISPLAY_USER_LIST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        success: true,\r\n        chatList: [...state.chatList, ...action.payload],\r\n      };\r\n    case channelActionTypes.DISPLAY_ADDED_CHANNEL_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        success: true,\r\n        chatList: action.payload,\r\n      };\r\n    case channelActionTypes.DISPLAY_USER_LIST_FAILURE:\r\n    case channelActionTypes.DISPLAY_ADDED_CHANNEL_FAILURE:\r\n      return {\r\n        ...state,\r\n        success: false,\r\n        loading: false,\r\n        chatList: [],\r\n      };\r\n    case channelActionTypes.SET_CURRENT_CHANNEL_START:\r\n    case channelActionTypes.CREATE_CHANNEL_START:\r\n    case channelActionTypes.SET_CURRENT_CHANNEL_NULL_START:\r\n      // case channelActionTypes.GET_MESSAGES_START:\r\n      return {\r\n        ...state,\r\n        currentChannelLoading: true,\r\n      };\r\n    case channelActionTypes.SET_CURRENT_CHANNEL_SUCCESS:\r\n      return {\r\n        ...state,\r\n        currentChannel: action.payload,\r\n        currentChannelLoading: false,\r\n      };\r\n    case channelActionTypes.SET_CURRENT_CHANNEL_NULL_SUCCESS:\r\n    case channelActionTypes.CREATE_CHANNEL_FAILURE:\r\n      return {\r\n        ...state,\r\n        currentChannel: null,\r\n        currentChannelLoading: false,\r\n      };\r\n    case channelActionTypes.CREATE_CHANNEL_SUCCESS:\r\n      return {\r\n        ...state,\r\n        currentChannelLoading: false,\r\n        currentChannel: {\r\n          ...state.currentChannel,\r\n          groupId: action.payload,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default ChannelReducer;\r\n","const MessageActionTypes = {\r\n  GET_MESSAGES_START: 'GET_MESSAGES_START',\r\n  GET_MESSAGES_SUCCESS: 'GET_MESSAGES_SUCCESS',\r\n  GET_MESSAGES_FAILURE: 'GET_MESSAGES_FAILURE',\r\n\r\n  ADD_MESSAGES_START: 'ADD_MESSAGES_START',\r\n  ADD_MESSAGES_SUCCESS: 'ADD_MESSAGES_SUCCESS',\r\n  ADD_MESSAGES_FAILURE: 'ADD_MESSAGES_FAILURE',\r\n\r\n  GET_REALTIME_MSG_START: 'GET_REALTIME_MSG_START',\r\n  GET_REALTIME_MSG_SUCCESS: 'GET_REALTIME_MSG_SUCCESS',\r\n  GET_REALTIME_MSG_FAILURE: 'GET_REALTIME_MSG_FAILURE',\r\n\r\n  SET_MSG_SEEN_START: 'SET_MSG_SEEN_START',\r\n  SET_MSG_SEEN_SUCCESS: 'SET_MSG_SEEN_SUCCESS',\r\n  SET_MSG_SEEN_FAILURE: 'SET_MSG_SEEN_FAILURE',\r\n\r\n  GET_NOTIFICATION_START: 'GET_NOTIFICATION_START',\r\n  GET_NOTIFICATION_SUCCESS: 'GET_NOTIFICATION_SUCCESS',\r\n  GET_NOTIFICATION_FAILURE: 'GET_NOTIFICATION_FAILURE',\r\n\r\n  ADD_REALTIME_NOTIFICATION_START: 'ADD_REALTIME_NOTIFICATION_START',\r\n  ADD_REALTIME_NOTIFICATION_SUCCESS: 'ADD_REALTIME_NOTIFICATION_SUCCESS',\r\n\r\n  DELETE_NOTIFICATION_START: 'DELETE_NOTIFICATION_START',\r\n  DELETE_NOTIFICATION_SUCCESS: 'DELETE_NOTIFICATION_SUCCESS',\r\n};\r\n\r\nexport default MessageActionTypes;\r\n","export const getAllMessages = (message) => {\r\n  const messages = message.reduce((accumulator, value) => {\r\n    return {\r\n      ...accumulator,\r\n      [value.key]: value,\r\n    };\r\n  }, {});\r\n  console.log(messages);\r\n  return messages;\r\n};\r\n\r\nexport const modifySeenStatus = (key, messages) => {\r\n  const modifiedMessage = { ...messages };\r\n  modifiedMessage[key] = {\r\n    ...modifiedMessage[key],\r\n    seen: true,\r\n  };\r\n  return modifiedMessage;\r\n};\r\n\r\nexport const deleteNotification = (groupId, notification) => {\r\n  if (!notification) return null;\r\n  if (!notification[groupId]) return notification;\r\n  const deletedNotification = { ...notification };\r\n  delete deletedNotification[groupId];\r\n  return deletedNotification;\r\n};\r\n\r\nexport const addNotification = (groupId, message, notifications) => {\r\n  if (!notifications) return null;\r\n  const getGroup = notifications[groupId];\r\n  const addedNotif = [...getGroup, message];\r\n  console.log(addedNotif, 555);\r\n  return null;\r\n};\r\n","import MessageActionTypes from './message.type';\r\nimport {\r\n  getAllMessages,\r\n  modifySeenStatus,\r\n  // deleteNotification,\r\n  // addNotification,\r\n} from './helper';\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  messages: [],\r\n  notificationLoading: false,\r\n  notifications: {},\r\n};\r\n\r\nconst ChannelReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case MessageActionTypes.GET_MESSAGES_START:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case MessageActionTypes.GET_MESSAGES_FAILURE:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      };\r\n    case MessageActionTypes.GET_MESSAGES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        messages: action.payload ? getAllMessages(action.payload) : null,\r\n      };\r\n    case MessageActionTypes.GET_REALTIME_MSG_SUCCESS:\r\n      return {\r\n        ...state,\r\n        messages: state.messages\r\n          ? { ...state.messages, ...action.payload }\r\n          : { ...action.payload },\r\n      };\r\n    case MessageActionTypes.SET_MSG_SEEN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        messages: modifySeenStatus(action.payload, state.messages),\r\n      };\r\n    case MessageActionTypes.GET_NOTIFICATION_START:\r\n      return {\r\n        ...state,\r\n        notificationLoading: true,\r\n      };\r\n    /* eslint-disable */\r\n    case MessageActionTypes.GET_NOTIFICATION_SUCCESS:\r\n      return {\r\n        ...state,\r\n        notificationLoading: false,\r\n        notifications: state.notifications\r\n          ? {\r\n              ...state.notifications,\r\n              [action.payload.groupId]: action.payload.messages,\r\n            }\r\n          : {\r\n              [action.payload.groupId]: action.payload.messages,\r\n            },\r\n      };\r\n    case MessageActionTypes.GET_NOTIFICATION_FAILURE:\r\n      return {\r\n        ...state,\r\n        notificationLoading: false,\r\n      };\r\n    case MessageActionTypes.ADD_REALTIME_NOTIFICATION_SUCCESS:\r\n      return {\r\n        ...state,\r\n        notifications: {\r\n          ...state.notifications,\r\n          [action.payload.groupId]: [\r\n            ...state.notifications[action.payload.groupId],\r\n            action.payload.message,\r\n          ],\r\n        },\r\n      };\r\n    case MessageActionTypes.DELETE_NOTIFICATION_SUCCESS:\r\n      return {\r\n        ...state,\r\n        notifications: {\r\n          ...state.notifications,\r\n          [action.payload]: [],\r\n        },\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default ChannelReducer;\r\n","import { combineReducers } from 'redux';\r\nimport userReducer from './user/user.reducer';\r\nimport themeReducer from './theme/theme.reducer';\r\nimport channelReducer from './channels/channels.reducer';\r\nimport messageReducer from './message/message.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  user: userReducer,\r\n  theme: themeReducer,\r\n  channels: channelReducer,\r\n  messages: messageReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import UserTypes from './user.type';\r\n\r\nexport const googleSignInStart = () => ({\r\n  type: UserTypes.GOOGLE_SIGN_IN_START,\r\n});\r\n\r\nexport const googleSignInSuccess = (user) => ({\r\n  type: UserTypes.GOOGLE_SIGN_IN_SUCCESS,\r\n  payload: user,\r\n});\r\n\r\nexport const googleSignInFailure = () => ({\r\n  type: UserTypes.GOOGLE_SIGN_IN_FAILURE,\r\n});\r\n\r\nexport const signInSuccess = (user) => ({\r\n  type: UserTypes.SIGN_IN_SUCCESS,\r\n  payload: user,\r\n});\r\n\r\nexport const signInFailure = () => ({\r\n  type: UserTypes.SIGN_IN_FAILURE,\r\n});\r\n\r\nexport const signOutStart = () => ({\r\n  type: UserTypes.SIGN_OUT_START,\r\n});\r\n\r\nexport const signOutSuccess = () => ({\r\n  type: UserTypes.SIGN_OUT_SUCCESS,\r\n});\r\n\r\nexport const checkUserSession = (user) => ({\r\n  type: UserTypes.CHECK_USER_SESSION,\r\n  payload: user,\r\n});\r\n\r\nexport const changeProfileStart = (user) => ({\r\n  type: UserTypes.CHANGE_PROFILE_START,\r\n  payload: user,\r\n});\r\n\r\nexport const changeProfileSuccess = (user) => ({\r\n  type: UserTypes.CHANGE_PROFILE_SUCCESS,\r\n  payload: user,\r\n});\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\nimport 'firebase/storage';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_APIKEY,\r\n  authDomain: process.env.REACT_APP_AUTHDOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECTID,\r\n  storageBucket: process.env.REACT_APP_STORAGEBUCKET,\r\n  messagingSenderId: process.env.REACT_APP_SENDERID,\r\n  appId: process.env.REACT_APP_APPID,\r\n  measurementId: process.env.REACT_APP_MEASUREMENTID,\r\n};\r\n\r\nif (!firebase.apps.length) {\r\n  firebase.initializeApp(firebaseConfig);\r\n}\r\n\r\nexport const auth = firebase.auth();\r\nexport const storage = firebase.storage();\r\nexport const database = firebase.database();\r\nexport const check = () => console.log(auth.currentUser);\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\r\n\r\nexport const timestamp = firebase.database.ServerValue.TIMESTAMP;\r\nexport const isOfflineForDatabase = {\r\n  state: 'offline',\r\n  last_changed: firebase.database.ServerValue.TIMESTAMP,\r\n};\r\n\r\nexport const isOnlineForDatabase = {\r\n  state: 'online',\r\n  last_changed: firebase.database.ServerValue.TIMESTAMP,\r\n};\r\n\r\n// ref\r\nexport const getRef = (parent) => database.ref(parent);\r\n\r\n// auth\r\nexport const signInWithGoogle = async () => {\r\n  try {\r\n    const { user } = await auth.signInWithPopup(googleProvider);\r\n    // eslint-disable-next-line\r\n    const { displayName, uid, photoURL, email } = user;\r\n    return {\r\n      displayName,\r\n      uid,\r\n      photoURL,\r\n      email,\r\n    };\r\n  } catch (e) {\r\n    return e;\r\n  }\r\n};\r\n\r\nexport const signOut = async () => {\r\n  try {\r\n    const res = await auth.signOut();\r\n    return res;\r\n  } catch (e) {\r\n    return e;\r\n  }\r\n};\r\n\r\nexport const getUser = async (userPayload) => {\r\n  const userRef = getRef('users');\r\n  const user = await userRef.child(userPayload.uid).once('value');\r\n  return user.val();\r\n};\r\nexport const createUserDocument = async (userDetails) => {\r\n  // console.log('func', userDetails);\r\n  if (!userDetails?.uid) return {};\r\n\r\n  try {\r\n    const userRef = database.ref(`users/${userDetails?.uid}`);\r\n    console.log('hi', userRef);\r\n    const user = await userRef.once('value');\r\n    if (user.exists()) {\r\n      console.log(user.val(), 'ex');\r\n      return user.val();\r\n    }\r\n    const addUser = await userRef.set({\r\n      ...userDetails,\r\n      groups: [],\r\n    });\r\n    console.log(addUser, 'no');\r\n    return addUser;\r\n  } catch (e) {\r\n    return e;\r\n  }\r\n};\r\n\r\nexport const searchUser = async (username) => {\r\n  try {\r\n    const users = await database\r\n      .ref('users')\r\n      .orderByChild('displayName')\r\n      .startAt(`%${username}%`)\r\n      .endAt(`${username}\\uf8ff`)\r\n      .limitToLast(2)\r\n      .once('value');\r\n\r\n    return users.val();\r\n  } catch (e) {\r\n    console.log(e);\r\n    return e;\r\n  }\r\n};\r\n\r\nexport const addChannelToUserId = async (currentUserId, match) => {\r\n  const channelRef = getRef('channels');\r\n  await channelRef.child(currentUserId).set({\r\n    private: true,\r\n    user: match.params.userId,\r\n  });\r\n  await database.ref('channel').child(match.params.userId).set({\r\n    private: true,\r\n    user: currentUserId,\r\n  });\r\n};\r\n\r\nexport const getUserDetail = async (userId, groupId) => {\r\n  try {\r\n    const userRef = getRef('users');\r\n    const user = await userRef.child(userId).once('value');\r\n    const [displayName, , photoURL, uid] = Object.values(user.val());\r\n    return {\r\n      groupId,\r\n      displayName,\r\n      uid,\r\n      photoURL,\r\n    };\r\n  } catch (e) {\r\n    return e;\r\n  }\r\n};\r\n\r\nexport const addedChannelsList = async (currentUserId) => {\r\n  const channelRef = getRef('channels');\r\n  const channels = await channelRef.child(currentUserId).once('value');\r\n  if (!channels.exists()) return [];\r\n  const usersArray = Object.entries(channels.val());\r\n  const channelsList = usersArray.map(async ([uid, channelDetail]) => {\r\n    if (channelDetail.type === 'private') {\r\n      const user = await getUserDetail(uid, channelDetail.groupId);\r\n      return user;\r\n    }\r\n    return null;\r\n  });\r\n  const privateChannels = await Promise.all(channelsList);\r\n  console.log(privateChannels, 'users');\r\n  return privateChannels;\r\n};\r\n\r\nexport const getChannelsList = async (usersArray) => {\r\n  console.log(111, usersArray);\r\n  const channelsList = usersArray.map(async ({ userId, groupId, type }) => {\r\n    console.log(222, type, userId);\r\n    if (type === 'private') {\r\n      const user = await getUserDetail(userId, groupId);\r\n      return user;\r\n    }\r\n    return null;\r\n  });\r\n  const privateChannels = await Promise.all(channelsList);\r\n  // console.log(privateChannels, 'users');\r\n  return privateChannels;\r\n};\r\n\r\n// export const addChannel = async ({groupId}) => {\r\n\r\n// }\r\n","import { takeLatest, put, all, call } from 'redux-saga/effects';\r\nimport UserTypes from './user.type';\r\nimport * as userAction from './user.action';\r\nimport {\r\n  signInWithGoogle,\r\n  signOut as logout,\r\n  createUserDocument,\r\n  getUser,\r\n} from '../../firebase/firebase';\r\n\r\nexport function* googleSignIn() {\r\n  try {\r\n    const userDetails = yield call(signInWithGoogle);\r\n    console.log(userDetails, 21);\r\n    const res = yield call(createUserDocument, userDetails);\r\n    console.log(res);\r\n    // yield put(userAction.googleSignInSuccess())\r\n  } catch (error) {\r\n    console.log(error);\r\n    // eslint-disable-next-line\r\n    alert(error.message);\r\n    yield put(userAction.googleSignInFailure());\r\n  }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(UserTypes.GOOGLE_SIGN_IN_START, googleSignIn);\r\n}\r\n\r\nexport function* signOut() {\r\n  try {\r\n    yield call(logout);\r\n    yield put(userAction.signOutSuccess());\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n  yield takeLatest(UserTypes.SIGN_OUT_START, signOut);\r\n}\r\n\r\nexport function* checkUserSession({ payload }) {\r\n  try {\r\n    const user = yield call(getUser, payload);\r\n    yield put(userAction.signInSuccess(user || payload));\r\n  } catch (error) {\r\n    yield put(userAction.signInFailure());\r\n  }\r\n}\r\n\r\nexport function* onCheckUserSessionStart() {\r\n  yield takeLatest(UserTypes.CHECK_USER_SESSION, checkUserSession);\r\n}\r\n\r\nexport function* changeProfile({ payload }) {\r\n  const { name, value } = payload;\r\n  yield put(userAction.changeProfileSuccess({ name, value }));\r\n}\r\n\r\nexport function* onChangeProfileStart() {\r\n  yield takeLatest(UserTypes.CHANGE_PROFILE_START, changeProfile);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(onGoogleSignInStart),\r\n    call(onSignOutStart),\r\n    call(onCheckUserSessionStart),\r\n    call(onChangeProfileStart),\r\n  ]);\r\n}\r\n","import { themeActionTypes } from './theme.type';\r\n\r\nexport const setThemeStart = () => ({\r\n  type: themeActionTypes.SET_COLOR_THEME_START,\r\n});\r\n\r\nexport const setTheme = () => ({\r\n  type: themeActionTypes.SET_COLOR_THEME,\r\n});\r\n\r\nexport const setThemeFailure = () => ({\r\n  type: themeActionTypes.SET_COLOR_THEME_FAILURE,\r\n});\r\n\r\nexport const setThemeLightStart = () => ({\r\n  type: themeActionTypes.SET_COLOR_THEME_LIGHT_START,\r\n});\r\n\r\nexport const setThemeLight = () => ({\r\n  type: themeActionTypes.SET_COLOR_THEME_LIGHT,\r\n});\r\n\r\nexport const setThemeLightFailure = () => ({\r\n  type: themeActionTypes.SET_COLOR_THEME_LIGHT_FAILURE,\r\n});\r\n","import { takeLatest, put, all, call } from 'redux-saga/effects';\r\nimport { themeActionTypes } from './theme.type';\r\nimport {\r\n  setTheme,\r\n  setThemeFailure,\r\n  setThemeLight,\r\n  setThemeLightFailure,\r\n} from './theme.action';\r\n\r\nexport function* setThemeDark() {\r\n  try {\r\n    yield put(setTheme());\r\n  } catch (e) {\r\n    yield put(setThemeFailure());\r\n  }\r\n}\r\n\r\nexport function* onChangeThemeStart() {\r\n  yield takeLatest(themeActionTypes.SET_COLOR_THEME_START, setThemeDark);\r\n}\r\n\r\nexport function* setLightTheme() {\r\n  try {\r\n    yield put(setThemeLight());\r\n  } catch (e) {\r\n    yield put(setThemeLightFailure());\r\n  }\r\n}\r\n\r\nexport function* onChangeThemeLightStart() {\r\n  yield takeLatest(themeActionTypes.SET_COLOR_THEME_LIGHT_START, setLightTheme);\r\n}\r\n\r\nexport function* themeSagas() {\r\n  yield all([call(onChangeThemeStart), call(onChangeThemeLightStart)]);\r\n}\r\n","import ChannelActionTypes from './channels.type';\r\n\r\nexport const displayChatListStart = (currentUserId) => ({\r\n  type: ChannelActionTypes.DISPLAY_USER_LIST_START,\r\n  payload: currentUserId,\r\n});\r\n\r\nexport const displayChatListSuccess = (channels) => ({\r\n  type: ChannelActionTypes.DISPLAY_USER_LIST_SUCCESS,\r\n  payload: channels,\r\n});\r\n\r\nexport const displayChatListFailure = () => ({\r\n  type: ChannelActionTypes.DISPLAY_USER_LIST_FAILURE,\r\n});\r\n\r\nexport const displayAddedChatStart = (currentUserId) => ({\r\n  type: ChannelActionTypes.DISPLAY_ADDED_CHANNEL_START,\r\n  payload: currentUserId,\r\n});\r\n\r\nexport const displayAddedChatSuccess = (channels) => ({\r\n  type: ChannelActionTypes.DISPLAY_ADDED_CHANNEL_SUCCESS,\r\n  payload: channels,\r\n});\r\n\r\nexport const displayAddedChatFailure = () => ({\r\n  type: ChannelActionTypes.DISPLAY_ADDED_CHANNEL_FAILURE,\r\n});\r\n\r\nexport const createChannelStart = (currentUserId, receiverId) => ({\r\n  type: ChannelActionTypes.CREATE_CHANNEL_START,\r\n  payload: { currentUserId, receiverId },\r\n});\r\n\r\nexport const createChannelSuccess = (channel) => ({\r\n  type: ChannelActionTypes.CREATE_CHANNEL_SUCCESS,\r\n  payload: channel,\r\n});\r\n\r\nexport const createChannelFailure = () => ({\r\n  type: ChannelActionTypes.CREATE_CHANNEL_FAILURE,\r\n});\r\n\r\nexport const setCurrentChannelStart = (channel) => ({\r\n  type: ChannelActionTypes.SET_CURRENT_CHANNEL_START,\r\n  payload: channel,\r\n});\r\n\r\nexport const setCurrentChannelSuccess = (channel) => ({\r\n  type: ChannelActionTypes.SET_CURRENT_CHANNEL_SUCCESS,\r\n  payload: channel,\r\n});\r\n\r\nexport const setCurrentChannelNullStart = () => ({\r\n  type: ChannelActionTypes.SET_CURRENT_CHANNEL_NULL_START,\r\n});\r\n\r\nexport const setCurrentChannelNullSuccess = () => ({\r\n  type: ChannelActionTypes.SET_CURRENT_CHANNEL_NULL_SUCCESS,\r\n});\r\n\r\nexport const getMessagesStart = (groupId) => ({\r\n  type: ChannelActionTypes.GET_MESSAGES_START,\r\n  payload: groupId,\r\n});\r\n","import { getRef, timestamp } from './firebase';\r\n\r\nexport const checkChannelExist = async (\r\n  currentId,\r\n  receiverId,\r\n  channelId = null\r\n) => {\r\n  const channelRef = getRef(`channels/${currentId}`);\r\n  const channel = await channelRef.child(receiverId).once('value');\r\n  console.log(channel.key, 'ex', channel.exists() && channel.key === channelId);\r\n  if (!channelId) return channel.exists();\r\n  return channel.exists() && channel.key === channelId;\r\n};\r\n\r\nexport const createChannel = async (currentUserId, receiverId) => {\r\n  try {\r\n    const groupRef = getRef('groups');\r\n    console.log('fu');\r\n    const currentUserChannel = getRef(`/channels/${currentUserId}`);\r\n    const receiverChannel = getRef(`/channels/${receiverId}`);\r\n\r\n    const { key } = groupRef.push();\r\n    await groupRef.child(key).set({\r\n      type: 'private',\r\n      createdBy: currentUserId,\r\n      receiver: receiverId,\r\n      messages: [],\r\n    });\r\n\r\n    await currentUserChannel.child(receiverId).set({\r\n      groupId: key,\r\n      userId: receiverId,\r\n      type: 'private',\r\n      createdAt: timestamp,\r\n    });\r\n\r\n    await receiverChannel.child(currentUserId).set({\r\n      groupId: key,\r\n      userId: currentUserId,\r\n      type: 'private',\r\n      createdAt: timestamp,\r\n    });\r\n    return key;\r\n  } catch (e) {\r\n    console.log(e, 'oops');\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const addMessages = async (\r\n  groupId,\r\n  currentUserId,\r\n  receiverId,\r\n  message\r\n) => {\r\n  const groupRef = getRef('groups');\r\n  const groupChild = groupRef.child(`${groupId}/messages`);\r\n  const { key } = groupChild.push();\r\n  const messageObject = {\r\n    seen: false,\r\n    createdBy: currentUserId,\r\n    message,\r\n    key,\r\n    createdAt: timestamp,\r\n    receiver: `${receiverId}false`,\r\n  };\r\n\r\n  const res = await groupChild.child(key).set(messageObject);\r\n  return res;\r\n};\r\n\r\nexport const getMessagesFromDb = async (groupId) => {\r\n  const groupRef = getRef(`groups/${groupId}`);\r\n  const groupMsg = await groupRef.child('messages').once('value');\r\n  const messages = groupMsg.val();\r\n  console.log(messages, '1');\r\n  if (!messages) return null;\r\n  const messagesKey = Object.keys(messages).map((val) => {\r\n    return { ...messages[val], key: val };\r\n  });\r\n  return messagesKey;\r\n};\r\n\r\nexport const setSeen = (channel, currentUserId) => {\r\n  const channelRef = getRef(`groups/${channel.groupId}`);\r\n  channelRef\r\n    .child('messages')\r\n    .orderByChild('receiver')\r\n    .equalTo(`${currentUserId}false`)\r\n    .once('value', (snapshot) => {\r\n      console.log(snapshot.val(), 'fu');\r\n\r\n      if (snapshot.val()) {\r\n        snapshot.forEach((child) => {\r\n          child.ref.update({\r\n            seen: true,\r\n            receiver: `${currentUserId}true`,\r\n          });\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\nexport const getNotifications = async (groupId, currentUserId) => {\r\n  const groupRef = getRef(`groups/${groupId}`);\r\n  const fetchNotification = await groupRef\r\n    .child('messages')\r\n    .orderByChild('receiver')\r\n    .equalTo(`${currentUserId}false`)\r\n    .once('value');\r\n  const notifications = fetchNotification.val();\r\n  console.log(notifications, 333);\r\n  return notifications ? Object.values(notifications) : [];\r\n};\r\n","import { takeLatest, all, call, put } from 'redux-saga/effects';\r\nimport ChannelActionTypes from './channels.type';\r\nimport {\r\n  displayChatListSuccess,\r\n  displayChatListFailure,\r\n  displayAddedChatSuccess,\r\n  displayAddedChatFailure,\r\n  createChannelSuccess,\r\n  createChannelFailure,\r\n  setCurrentChannelSuccess,\r\n  setCurrentChannelNullSuccess,\r\n} from './channels.action';\r\nimport { getChannelsList, addedChannelsList } from '../../firebase/firebase';\r\nimport { createChannel } from '../../firebase/channels';\r\n\r\nexport function* getChannel({ payload }) {\r\n  try {\r\n    yield console.log('payload', payload);\r\n    const channelLists = yield call(getChannelsList, payload);\r\n    yield console.log(11, channelLists);\r\n    yield put(displayChatListSuccess(channelLists));\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put(displayChatListFailure());\r\n  }\r\n}\r\n\r\nexport function* OnDisplayChannelLists() {\r\n  yield takeLatest(ChannelActionTypes.DISPLAY_USER_LIST_START, getChannel);\r\n}\r\n\r\nexport function* getAddedChannel({ payload }) {\r\n  try {\r\n    yield console.log('payload', payload);\r\n    const channelLists = yield call(addedChannelsList, payload);\r\n    yield console.log(11, channelLists);\r\n    yield put(displayAddedChatSuccess(channelLists));\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put(displayAddedChatFailure());\r\n  }\r\n}\r\n\r\nexport function* onDisplayAddedChannel() {\r\n  yield takeLatest(\r\n    ChannelActionTypes.DISPLAY_ADDED_CHANNEL_START,\r\n    getAddedChannel\r\n  );\r\n}\r\n\r\nexport function* OnCreateChannel({ payload }) {\r\n  try {\r\n    yield console.log(payload);\r\n    const { currentUserId, receiverId } = payload;\r\n    const groupId = yield call(createChannel, currentUserId, receiverId);\r\n    yield put(createChannelSuccess(groupId));\r\n  } catch (e) {\r\n    console.log(e, 'oo');\r\n    yield put(createChannelFailure());\r\n  }\r\n}\r\n\r\nexport function* onCreateChannelStart() {\r\n  yield takeLatest(ChannelActionTypes.CREATE_CHANNEL_START, OnCreateChannel);\r\n}\r\n\r\nexport function* setCurrentChannel({ payload }) {\r\n  console.log(payload, 'chann');\r\n  yield put(setCurrentChannelSuccess(payload));\r\n}\r\n\r\nexport function* OnSetCurrentChannelStart() {\r\n  yield takeLatest(\r\n    ChannelActionTypes.SET_CURRENT_CHANNEL_START,\r\n    setCurrentChannel\r\n  );\r\n}\r\n\r\nexport function* setCurrentChannelNull() {\r\n  yield put(setCurrentChannelNullSuccess());\r\n}\r\n\r\nexport function* OnSetCurrentChannelNullStart() {\r\n  yield takeLatest(\r\n    ChannelActionTypes.SET_CURRENT_CHANNEL_NULL_START,\r\n    setCurrentChannelNull\r\n  );\r\n}\r\n\r\nexport function* channelSagas() {\r\n  yield all([\r\n    call(OnDisplayChannelLists),\r\n    call(onDisplayAddedChannel),\r\n    call(OnSetCurrentChannelStart),\r\n    call(OnSetCurrentChannelNullStart),\r\n    call(onCreateChannelStart),\r\n  ]);\r\n}\r\n","import MessageActionTypes from './message.type';\r\n\r\nexport const getMessagesStart = (groupId) => ({\r\n  type: MessageActionTypes.GET_MESSAGES_START,\r\n  payload: groupId,\r\n});\r\n\r\nexport const getMessagesSuccess = (messages = null) => ({\r\n  type: MessageActionTypes.GET_MESSAGES_SUCCESS,\r\n  payload: messages,\r\n});\r\n\r\nexport const getMessagesFailure = () => ({\r\n  type: MessageActionTypes.GET_MESSAGES_FAILURE,\r\n});\r\n\r\nexport const addMessageStart = (message) => ({\r\n  type: MessageActionTypes.ADD_MESSAGES_START,\r\n  payload: message,\r\n});\r\n\r\nexport const addMessageSuccess = (message) => ({\r\n  type: MessageActionTypes.ADD_MESSAGES_SUCCESS,\r\n  payload: message,\r\n});\r\n\r\nexport const addMessageFailure = () => ({\r\n  type: MessageActionTypes.ADD_MESSAGES_FAILURE,\r\n});\r\n\r\nexport const getRealtimeMessagesStart = (groupId) => ({\r\n  type: MessageActionTypes.GET_REALTIME_MSG_START,\r\n  payload: groupId,\r\n});\r\n\r\nexport const getRealtimeMessagesSuccess = (messages = null) => ({\r\n  type: MessageActionTypes.GET_REALTIME_MSG_SUCCESS,\r\n  payload: messages,\r\n});\r\n\r\nexport const getRealtimeMessagesFailure = () => ({\r\n  type: MessageActionTypes.GET_REALTIME_MSG_FAILURE,\r\n});\r\n\r\nexport const setSeenStart = (id) => ({\r\n  type: MessageActionTypes.SET_MSG_SEEN_START,\r\n  payload: id,\r\n});\r\n\r\nexport const setSeenSuccess = (id) => ({\r\n  type: MessageActionTypes.SET_MSG_SEEN_SUCCESS,\r\n  payload: id,\r\n});\r\n\r\nexport const getNotificationStart = (groupId) => ({\r\n  type: MessageActionTypes.GET_NOTIFICATION_START,\r\n  payload: groupId,\r\n});\r\n\r\nexport const getNotificationSuccess = (msg) => ({\r\n  type: MessageActionTypes.GET_NOTIFICATION_SUCCESS,\r\n  payload: msg,\r\n});\r\n\r\nexport const getNotificationFailure = () => ({\r\n  type: MessageActionTypes.GET_NOTIFICATION_FAILURE,\r\n});\r\n\r\nexport const getRealtimeNotificationStart = (message) => ({\r\n  type: MessageActionTypes.ADD_REALTIME_NOTIFICATION_START,\r\n  payload: message,\r\n});\r\n\r\nexport const getRealtimeNotificationSuccess = (message) => ({\r\n  type: MessageActionTypes.ADD_REALTIME_NOTIFICATION_SUCCESS,\r\n  payload: message,\r\n});\r\n\r\nexport const deleteNotificationStart = (message) => ({\r\n  type: MessageActionTypes.DELETE_NOTIFICATION_START,\r\n  payload: message,\r\n});\r\n\r\nexport const deleteNotificationSuccess = (message) => ({\r\n  type: MessageActionTypes.DELETE_NOTIFICATION_SUCCESS,\r\n  payload: message,\r\n});\r\n","import { takeLatest, all, call, put, takeEvery } from 'redux-saga/effects';\r\nimport MessageActionTypes from './message.type';\r\nimport {\r\n  getMessagesSuccess,\r\n  getMessagesFailure,\r\n  addMessageSuccess,\r\n  addMessageFailure,\r\n  getRealtimeMessagesSuccess,\r\n  getRealtimeMessagesFailure,\r\n  setSeenSuccess,\r\n  getNotificationSuccess,\r\n  getNotificationFailure,\r\n  getRealtimeNotificationSuccess,\r\n  deleteNotificationSuccess,\r\n} from './message.action';\r\nimport {\r\n  addMessages as getMsgDb,\r\n  getMessagesFromDb,\r\n  getNotifications,\r\n} from '../../firebase/channels';\r\n\r\nexport function* getMessage({ payload }) {\r\n  try {\r\n    yield console.log(2, payload);\r\n    const msg = yield call(getMessagesFromDb, payload);\r\n    yield console.log(msg);\r\n    yield put(getMessagesSuccess(msg));\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put(getMessagesFailure());\r\n  }\r\n}\r\n\r\nexport function* onGetMessagesStart() {\r\n  yield takeLatest(MessageActionTypes.GET_MESSAGES_START, getMessage);\r\n}\r\n\r\nexport function* addMessage({ payload }) {\r\n  try {\r\n    const { groupId, currentUserId, receiverId, message } = payload;\r\n    console.log(groupId, currentUserId, receiverId, message, payload);\r\n    const res = yield call(\r\n      getMsgDb,\r\n      groupId,\r\n      currentUserId,\r\n      receiverId,\r\n      message\r\n    );\r\n    console.log(res);\r\n    yield put(addMessageSuccess());\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put(addMessageFailure());\r\n  }\r\n}\r\n\r\nexport function* OnaddMessageStart() {\r\n  yield takeLatest(MessageActionTypes.ADD_MESSAGES_START, addMessage);\r\n}\r\n\r\nexport function* getRealtimeMsg({ payload }) {\r\n  try {\r\n    yield put(getRealtimeMessagesSuccess(payload));\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put(getRealtimeMessagesFailure());\r\n  }\r\n}\r\n\r\nexport function* OnGetRealTimeMsgStart() {\r\n  yield takeLatest(MessageActionTypes.GET_REALTIME_MSG_START, getRealtimeMsg);\r\n}\r\n\r\nexport function* setMsgSeen({ payload }) {\r\n  yield put(setSeenSuccess(payload));\r\n}\r\n\r\nexport function* OnSetMsgSeen() {\r\n  yield takeLatest(MessageActionTypes.SET_MSG_SEEN_START, setMsgSeen);\r\n}\r\n\r\nexport function* fetchNotification({ payload }) {\r\n  try {\r\n    const { groupId, currentUserId } = payload;\r\n    const messages = yield call(getNotifications, groupId, currentUserId);\r\n    yield put(getNotificationSuccess({ groupId, messages }));\r\n  } catch (e) {\r\n    console.log(e, e?.message);\r\n    yield put(getNotificationFailure());\r\n  }\r\n}\r\n\r\nexport function* OnFetchNotificationStart() {\r\n  yield takeEvery(MessageActionTypes.GET_NOTIFICATION_START, fetchNotification);\r\n}\r\n\r\nexport function* addNotification({ payload }) {\r\n  const { groupId, message } = payload;\r\n  console.log(groupId, message);\r\n  yield put(getRealtimeNotificationSuccess({ groupId, message }));\r\n}\r\n\r\nexport function* OnAddNotificationStart() {\r\n  yield takeLatest(\r\n    MessageActionTypes.ADD_REALTIME_NOTIFICATION_START,\r\n    addNotification\r\n  );\r\n}\r\n\r\nexport function* deleteNotification({ payload }) {\r\n  yield put(deleteNotificationSuccess(payload));\r\n}\r\n\r\nexport function* OnDeleteNotificationStart() {\r\n  yield takeLatest(\r\n    MessageActionTypes.DELETE_NOTIFICATION_START,\r\n    deleteNotification\r\n  );\r\n}\r\nexport function* messageSagas() {\r\n  yield all([\r\n    call(onGetMessagesStart),\r\n    call(OnaddMessageStart),\r\n    call(OnGetRealTimeMsgStart),\r\n    call(OnSetMsgSeen),\r\n    call(OnFetchNotificationStart),\r\n    call(OnAddNotificationStart),\r\n    call(OnDeleteNotificationStart),\r\n  ]);\r\n}\r\n","import { all, call } from 'redux-saga/effects';\r\nimport { userSagas } from './user/user.saga';\r\nimport { themeSagas } from './theme/theme.saga';\r\nimport { channelSagas } from './channels/channels.saga';\r\nimport { messageSagas } from './message/message.saga';\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    call(userSagas),\r\n    call(themeSagas),\r\n    call(channelSagas),\r\n    call(messageSagas),\r\n  ]);\r\n}\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nimport rootSaga from './root-saga';\r\n\r\nconst sagasMiddleware = createSagaMiddleware();\r\n\r\nconst middlewares = [logger, sagasMiddleware];\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nsagasMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import { createSelector } from 'reselect';\r\n\r\nconst selectTheme = (state) => state.theme;\r\n\r\n// eslint-disable-next-line\r\nexport const selectBackground = createSelector(\r\n  [selectTheme],\r\n  (app) => app.theme\r\n);\r\n","import { createSelector } from 'reselect';\r\n\r\nconst selectUser = (state) => state.user;\r\n\r\nexport const selectIsUserAuthenticated = createSelector(\r\n  [selectUser],\r\n  (user) => !!user.currentUser\r\n);\r\n\r\nexport const selectIsLoading = createSelector(\r\n  [selectUser],\r\n  (user) => user.loading\r\n);\r\n\r\nexport const selectProfilePhoto = createSelector(\r\n  [selectUser],\r\n  (user) => user.currentUser?.photoURL\r\n);\r\n\r\nexport const selectCurrentUser = createSelector(\r\n  [selectUser],\r\n  (user) => user.currentUser\r\n);\r\n\r\nexport const selectUsername = createSelector(\r\n  [selectUser],\r\n  (user) => user.currentUser?.displayName\r\n);\r\n\r\nexport const selectIsUserLoaded = createSelector(\r\n  [selectUser],\r\n  (user) => user.userLoading\r\n);\r\n\r\nexport const selectUserId = createSelector(\r\n  [selectUser],\r\n  (user) => user.currentUser?.uid\r\n);\r\n","import styled from 'styled-components';\r\n\r\nconst HomeContainer = styled.main`\r\n  display: flex;\r\n  width: 100%;\r\n  min-height: 100vh;\r\n`;\r\n\r\nexport default HomeContainer;\r\n","import { createSelector } from 'reselect';\r\n\r\nconst selectChannels = (state) => state.channels;\r\n\r\nexport const selectChannelLoading = createSelector(\r\n  [selectChannels],\r\n  (channel) => channel.loading\r\n);\r\n\r\nexport const selectChatList = createSelector(\r\n  [selectChannels],\r\n  (channel) => channel.chatList\r\n);\r\n\r\nexport const selectCurrentChannelLoading = createSelector(\r\n  [selectChannels],\r\n  (channel) => channel.currentChannelLoading\r\n);\r\n\r\nexport const selectCurrentChannel = createSelector(\r\n  [selectChannels],\r\n  (channel) => channel.currentChannel\r\n);\r\n\r\nexport const selectCurrentChannelId = createSelector(\r\n  [selectChannels],\r\n  (channel) => channel.currentChannel.uid\r\n);\r\n\r\nexport const selectCurrentChannelGroupId = createSelector(\r\n  [selectChannels],\r\n  (channel) => channel.currentChannel?.groupId\r\n);\r\n","import { useState, useEffect, useRef } from 'react';\r\nimport { searchUser } from '../../firebase/firebase';\r\n\r\nconst ChatContainerState = () => {\r\n  const [searchField, setSearchField] = useState('');\r\n  const [chatList, setChatList] = useState({});\r\n  // const [isSearching, setIsSearching] = useState(false);\r\n  const intervalRef = useRef(null);\r\n  // const searchRef = useRef(null);\r\n  const input = useRef(null);\r\n  const onHandleChange = (e) => {\r\n    setSearchField(e.target.value);\r\n  };\r\n\r\n  const compareChatList = (res) => {\r\n    if (!res) return false;\r\n    console.log(chatList, res, 49);\r\n    const chatListKey = Object.keys(chatList).sort();\r\n    const responseKey = Object.keys(res).sort();\r\n    console.log(chatListKey, responseKey);\r\n    return JSON.stringify(chatListKey) === JSON.stringify(responseKey);\r\n  };\r\n  // eslint-disable-line\r\n\r\n  useEffect(() => {\r\n    if (searchField) {\r\n      // setIsSearching(true);\r\n\r\n      intervalRef.current = setTimeout(() => {\r\n        searchUser(searchField)\r\n          .then((res) => {\r\n            // setIsSearching(false);\r\n\r\n            console.log(res);\r\n            if (!compareChatList(res)) {\r\n              console.log('state changed');\r\n\r\n              setChatList(res);\r\n            }\r\n          })\r\n          .catch((e) => console.log(e));\r\n      }, 500);\r\n    } else {\r\n      setChatList({});\r\n\r\n      clearTimeout(intervalRef.current);\r\n    }\r\n\r\n    return () => {\r\n      clearTimeout(intervalRef.current);\r\n    };\r\n  }, [searchField]); // eslint-disable-line\r\n\r\n  return [searchField, onHandleChange, chatList, input];\r\n};\r\n\r\nexport default ChatContainerState;\r\n","import styled from 'styled-components';\r\n\r\nexport const ChatContainer = styled.div`\r\n  display: flex;\r\n  height: 8rem;\r\n  align-items: center;\r\n  padding: 0 1.3rem;\r\n  // justify-content: space-between;\r\n  border-bottom: 1px solid ${(props) => props.theme.border};\r\n  transition: all 500ms linear;\r\n  cursor: pointer;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background: ${(props) => props.theme.statusHover};\r\n  }\r\n`;\r\n\r\nexport const ImageContainer = styled.div`\r\n  margin-right: 2rem;\r\n`;\r\nexport const ChatDetail = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const ChatName = styled.span`\r\n  font-size: 2.2rem;\r\n  color: ${(props) => props.theme.color};\r\n  font-family: 'NimbusSanTW01Con';\r\n  font-weight: 500;\r\n  letter-spacing: 1px;\r\n  text-transform: capitalize;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nexport const Notification = styled.span`\r\n  font-size: 1.3rem;\r\n  color: #25d366;\r\n  font-family: sans-serif;\r\n`;\r\n\r\nexport const Unseen = styled.div`\r\n  height: 2rem;\r\n  width: 2rem;\r\n  border-radius: 50%;\r\n  background: #25d366;\r\n  /* padding: 1rem; */\r\n  margin-left: 0.8rem;\r\n  color: white;\r\n  display: inline-flex;\r\n  text-align: center;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const ImageContainer = styled.img`\r\n  width: ${(props) => props.height}rem;\r\n  height: ${(props) => props.height}rem;\r\n  border-radius: calc(${(props) => props.height}rem / 2);\r\n`;\r\n\r\nexport const test = styled.div``;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport PropTypes from 'prop-types';\r\nimport { selectProfilePhoto } from '../../../redux-sagas/user/user.selector';\r\nimport { ImageContainer } from './ProfileImage.style';\r\n\r\nconst ProfileImage = ({ profilePic, chatProfile = null, height = 4 }) => {\r\n  return (\r\n    <ImageContainer\r\n      src={chatProfile || profilePic}\r\n      alt='user-photo'\r\n      loading='lazy'\r\n      height={height}\r\n    />\r\n  );\r\n};\r\n\r\nProfileImage.propTypes = {\r\n  profilePic: PropTypes.string.isRequired,\r\n  chatProfile: PropTypes.string,\r\n  height: PropTypes.number,\r\n};\r\n\r\nProfileImage.defaultProps = {\r\n  chatProfile: null,\r\n  height: 4,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  profilePic: selectProfilePhoto,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ProfileImage);\r\n","import { createSelector } from 'reselect';\r\n\r\nconst selectMessages = (state) => state.messages;\r\n\r\nexport const selectIsLoading = createSelector(\r\n  [selectMessages],\r\n  (message) => message.loading\r\n);\r\n\r\nexport const selectMessage = createSelector(\r\n  [selectMessages],\r\n  (msg) => msg.messages\r\n);\r\n\r\nexport const selectNotification = (groupId) => createSelector(\r\n  [selectMessages],\r\n  (msg) => (msg.notifications ? msg.notifications[groupId] : null)\r\n);\r\n","import { useEffect } from 'react';\r\nimport { getRef } from '../../firebase/firebase';\r\n\r\nconst NotificationState = (\r\n  getNotification,\r\n  groupId,\r\n  uid = null,\r\n  currentGroup,\r\n  getRealtimeNotification\r\n) => {\r\n  useEffect(() => {\r\n    getNotification(groupId, uid);\r\n  }, [getNotification, groupId, uid]);\r\n\r\n  useEffect(() => {\r\n    const groupRef = getRef(`groups/${groupId}`);\r\n    let listenToMsg;\r\n    let listen;\r\n    if (currentGroup !== groupId) {\r\n      listenToMsg = groupRef\r\n        .child('messages')\r\n        .orderByChild('createdAt')\r\n        .startAt(Date.now());\r\n      listen = listenToMsg.on('child_added', (snapshot) => {\r\n        console.log(snapshot.val());\r\n        if (snapshot.val() && snapshot.val()?.createdBy !== uid) {\r\n          if (!snapshot.val().seen) {\r\n            getRealtimeNotification(groupId, snapshot.val());\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return () => listenToMsg && listenToMsg.off('child_added', listen);\r\n  }, [currentGroup, groupId, uid, getRealtimeNotification]);\r\n};\r\n\r\nexport default NotificationState;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n// import { createStructuredSelector } from 'reselect';\r\nimport { selectCurrentChannelGroupId } from '../../redux-sagas/channels/channels.selector';\r\nimport { selectNotification } from '../../redux-sagas/message/message.selector';\r\nimport {\r\n  getNotificationStart,\r\n  getRealtimeNotificationStart,\r\n} from '../../redux-sagas/message/message.action';\r\nimport { auth } from '../../firebase/firebase';\r\nimport { Notification as Notify, Unseen } from '../Chat/Chat.style';\r\nimport UseNotificationState from './Notification.state';\r\n\r\nconst Notification = ({\r\n  getNotificationStart: getNotification,\r\n  groupId,\r\n  currentGroup,\r\n  getRealtimeNotificationStart: getRealtimeNotify,\r\n  // eslint-disable-next-line\r\n  msg,\r\n}) => {\r\n  UseNotificationState(\r\n    getNotification,\r\n    groupId,\r\n    auth?.currentUser?.uid,\r\n    currentGroup,\r\n    getRealtimeNotify\r\n  );\r\n  console.log(msg, 7768);\r\n  /* eslint-disable */\r\n\r\n  return (\r\n    <Notify>\r\n      {msg && msg.length ? msg[msg.length - 1].message.substring(0, 5) : ''}\r\n      {msg && msg.length > 0 && <Unseen> {msg.length}</Unseen>}\r\n    </Notify>\r\n  );\r\n};\r\n\r\nNotification.propTypes = {\r\n  getNotificationStart: PropTypes.func.isRequired,\r\n  groupId: PropTypes.string.isRequired,\r\n  currentGroup: PropTypes.string,\r\n  getRealtimeNotificationStart: PropTypes.func.isRequired,\r\n};\r\n\r\nNotification.defaultProps = {\r\n  currentGroup: null,\r\n};\r\n/* eslint-disable */\r\nconst mapStateToProps = (state, otherProps) => ({\r\n  currentGroup: selectCurrentChannelGroupId(state),\r\n  msg: selectNotification(otherProps.groupId)(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getNotificationStart: (groupId, currentUserId) =>\r\n    dispatch(getNotificationStart({ groupId, currentUserId })),\r\n  getRealtimeNotificationStart: (groupId, message) =>\r\n    dispatch(getRealtimeNotificationStart({ groupId, message })),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Notification);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { setCurrentChannelStart } from '../../redux-sagas/channels/channels.action';\r\nimport {\r\n  ChatContainer,\r\n  ChatDetail,\r\n  ChatName,\r\n  ImageContainer,\r\n} from './Chat.style';\r\nimport ProfileImage from '../shared/ProfileImage/ProfileImage';\r\nimport Notification from '../Notification/Notification';\r\n\r\nconst Chat = ({\r\n  displayName,\r\n  uid,\r\n  photoURL,\r\n  groupId,\r\n  setCurrentChannelStart: setChannel,\r\n}) => {\r\n  const groupInfo = {\r\n    groupId,\r\n    displayName,\r\n    uid,\r\n    photoURL,\r\n  };\r\n  return (\r\n    <>\r\n      <ChatContainer onClick={() => setChannel(groupInfo)} tabindex='0'>\r\n        <ImageContainer>\r\n          <ProfileImage height={5} chatProfile={photoURL} />\r\n        </ImageContainer>\r\n        <ChatDetail>\r\n          <ChatName>{displayName}</ChatName>\r\n          <Notification groupId={groupId} />\r\n        </ChatDetail>\r\n      </ChatContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nChat.propTypes = {\r\n  displayName: PropTypes.string.isRequired,\r\n  uid: PropTypes.string.isRequired,\r\n  photoURL: PropTypes.string.isRequired,\r\n  groupId: PropTypes.string,\r\n  setCurrentChannelStart: PropTypes.func.isRequired,\r\n};\r\n\r\nChat.defaultProps = {\r\n  groupId: null,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setCurrentChannelStart: (channelInfo) =>\r\n    // eslint-disable-next-line\r\n    dispatch(setCurrentChannelStart(channelInfo)),\r\n});\r\n\r\nexport default React.memo(connect(null, mapDispatchToProps)(Chat));\r\n","const DisplayUsersState = (users, uid) => {\r\n  const filteredUsers = users.filter(([key]) => key !== uid);\r\n  return [filteredUsers];\r\n};\r\n\r\nexport default DisplayUsersState;\r\n","/* eslint-disable */\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUserId } from '../../redux-sagas/user/user.selector';\r\nimport Chat from '../Chat/Chat';\r\nimport UseDisplayState from './DisplayUsers.state';\r\n\r\nconst DisplayUsers = ({ users, uid, chatLists }) => {\r\n  console.log('DisplayUser');\r\n  const [filteredUsers] = UseDisplayState(users, uid);\r\n\r\n  return (\r\n    /* eslint-disable */\r\n    users.length > 0\r\n      ? filteredUsers.map(([key, value]) => (\r\n          <Chat\r\n            displayName={value.displayName}\r\n            uid={value.uid}\r\n            photoURL={value.photoURL}\r\n            key={key}\r\n          />\r\n        ))\r\n      : chatLists.length &&\r\n          chatLists.map(({ displayName, uid, photoURL, groupId }) => (\r\n            <Chat\r\n              displayName={displayName}\r\n              uid={uid}\r\n              photoURL={photoURL}\r\n              key={uid}\r\n              groupId={groupId}\r\n            />\r\n          ))\r\n  );\r\n};\r\n\r\nDisplayUsers.propTypes = {\r\n  // eslint-disable-next-line\r\n  users: PropTypes.array,\r\n  uid: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  uid: selectUserId,\r\n});\r\n\r\nexport default React.memo(connect(mapStateToProps)(DisplayUsers));\r\n","import styled from 'styled-components';\r\n\r\nexport const InputWrapper = styled.div`\r\n  padding: 1rem;\r\n  display: flex;\r\n  position: relative;\r\n  border-bottom: 0.5px solid ${(props) => props.theme.border};\r\n  /* margin-top: 6.7rem; */\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  width: ${(props) => props.width || 100}%;\r\n  padding: ${(props) => (props.icon ? 1 : 1.5)}rem;\r\n  position: relative;\r\n  border-radius: 25px;\r\n  background: ${(props) => props.theme.search};\r\n  outline: none;\r\n  border: none;\r\n  padding-left: ${(props) => (props.icon ? 6.5 : 2)}rem;\r\n  color: ${(props) => props.theme.textLight};\r\n\r\n  &::placeholder {\r\n    color: ${(props) => props.theme.textLight};\r\n    // padding-left: 8rem;\r\n    font-family: sans-serif;\r\n    font-weight: 300;\r\n    font-size: 1.4rem;\r\n  }\r\n`;\r\n\r\nexport const Icon = styled.i`\r\n  color: ${(props) => props.theme.Icon};\r\n  font-size: 1.8rem;\r\n  position: absolute;\r\n  left: 6%;\r\n  top: 33%;\r\n`;\r\n","/* eslint-disable */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Input, Icon } from './Input.style';\r\n\r\nconst InputContainer = (props, ref) => {\r\n  console.log(props);\r\n  return (\r\n    <>\r\n      <Input {...props} ref={ref} />\r\n      {props.icon && <Icon className='fas fa-search' />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.forwardRef(InputContainer);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  selectChatList,\r\n  selectChannelLoading,\r\n} from '../../redux-sagas/channels/channels.selector';\r\nimport UseChatState from './ChatContainer.state';\r\nimport DisplayUsers from './DisplayUsers';\r\nimport Input from '../shared/Input/Input';\r\nimport { InputWrapper } from '../shared/Input/Input.style';\r\n\r\nconst ChatContainer = ({ channels, isLoading }) => {\r\n  const [searchField, onHandleChange, chatList, input] = UseChatState();\r\n  console.log('chatContainer');\r\n  return (\r\n    <>\r\n      <InputWrapper>\r\n        <Input\r\n          value={searchField}\r\n          onChange={onHandleChange}\r\n          name='search'\r\n          icon\r\n          placeholder='Search users'\r\n          autoComplete='off'\r\n          ref={input}\r\n        />\r\n      </InputWrapper>\r\n      {!isLoading && (\r\n        <DisplayUsers\r\n          users={Object.entries(chatList) && Object.entries(chatList)}\r\n          chatLists={channels}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nChatContainer.propTypes = {\r\n  channels: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      displayName: PropTypes.string.isRequired,\r\n      uid: PropTypes.string.isRequired,\r\n      photoURL: PropTypes.string.isRequired,\r\n      groupId: PropTypes.string,\r\n    })\r\n  ).isRequired,\r\n  isLoading: PropTypes.bool.isRequired,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  channels: selectChatList,\r\n  isLoading: selectChannelLoading,\r\n});\r\n\r\nexport default React.memo(connect(mapStateToProps)(ChatContainer));\r\n","/* eslint-disable */\r\nimport styled from 'styled-components';\r\nimport { ChatDetail } from '../../Chat/Chat.style';\r\n\r\nexport const ChatDetailWrapper = styled(ChatDetail)`\r\n  margin-left: 2rem;\r\n  display: flex;\r\n  /* align-items: center; */\r\n`;\r\n\r\nexport const HeaderContainer = styled.header`\r\n  padding: 1rem 1.6rem;\r\n  background: ${(props) => props.theme.header};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: calc(100% - 3.2rem);\r\n  z-index: 1000;\r\n`;\r\n\r\nexport const OptionsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Menu = styled.button`\r\n  background: transparent;\r\n  border: none;\r\n  outline: none;\r\n`;\r\n\r\nexport const ImageContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n","import styled from 'styled-components';\r\n/* eslint-disable */\r\nconst Icon = styled.i`\r\n  color: ${(props) =>\r\n    (props.color && props.theme.mode && '#707477') || props.theme.Icon};\r\n  font-size: ${(props) => props.fontSize}rem;\r\n  margin-right: ${(props) => props.marginRight}rem;\r\n  cursor: pointer;\r\n  -webkit-text-stroke: 0px ${(props) => props.color || props.theme.Icon};\r\n\r\n  &:hover {\r\n    color: ${(props) =>\r\n      props.theme.mode ? 'rgba(255,255,255,.8)' : '#212529'};\r\n  }\r\n`;\r\n\r\nexport default Icon;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Icon from './Icon.style';\r\n\r\nconst IconContainer = ({ fontSize, marginRight, className }) => {\r\n  return (\r\n    <Icon fontSize={fontSize} marginRight={marginRight} className={className} />\r\n  );\r\n};\r\n\r\nIconContainer.propTypes = {\r\n  fontSize: PropTypes.number,\r\n  marginRight: PropTypes.number,\r\n  className: PropTypes.string.isRequired,\r\n};\r\n\r\nIconContainer.defaultProps = {\r\n  fontSize: 2.3,\r\n  marginRight: 2.8,\r\n};\r\n\r\nexport default IconContainer;\r\n","import { useState, useEffect } from 'react';\r\nimport { getRef } from '../../firebase/firebase';\r\n/* eslint-disable */\r\nconst ActiveUserState = (id) => {\r\n  const [status, setStatus] = useState(null);\r\n  console.log(id, 'user state');\r\n  useEffect(() => {\r\n    const statusRef = getRef(`status/${id}`);\r\n    const listen = statusRef.on('value', (snapshot) => {\r\n      if (snapshot.val()) {\r\n        console.log(snapshot.val());\r\n        setStatus(snapshot.val());\r\n        return;\r\n      }\r\n      setStatus(null);\r\n    });\r\n    return () => statusRef.off('value', listen);\r\n  }, [id]);\r\n  return status;\r\n};\r\n\r\nexport default ActiveUserState;\r\n","import React from 'react';\r\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { selectCurrentChannelId } from '../../redux-sagas/channels/channels.selector';\r\nimport { Notification } from '../Chat/Chat.style';\r\nimport useActiveState from './ActiveUser.state';\r\n\r\nconst ActiveUser = ({ id }) => {\r\n  const status = useActiveState(id);\r\n  console.log(status, 'status');\r\n  return (\r\n    <Notification>\r\n      {/* eslint-disable-next-line */}\r\n      {status &&\r\n        (status.state === 'online'\r\n          ? status.state\r\n          : formatDistanceToNow(status.last_changed))}\r\n    </Notification>\r\n  );\r\n};\r\n\r\nActiveUser.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  id: selectCurrentChannelId,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ActiveUser);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport Icon from '../Icon/Icon';\r\n\r\nconst Navigate = ({ navigateTo, iconName }) => {\r\n  return (\r\n    <Link to={navigateTo}>\r\n      <Icon className={iconName} />\r\n    </Link>\r\n  );\r\n};\r\n\r\nNavigate.propTypes = {\r\n  navigateTo: PropTypes.string.isRequired,\r\n  iconName: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Navigate;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  HeaderContainer,\r\n  OptionsContainer,\r\n  Menu,\r\n  ImageContainer,\r\n  ChatDetailWrapper,\r\n} from './Header.style';\r\nimport ProfileImage from '../ProfileImage/ProfileImage';\r\nimport IconContainer from '../Icon/Icon';\r\nimport { ChatName } from '../../Chat/Chat.style';\r\nimport ActiveUser from '../../ActiveUser/ActiveUser';\r\nimport Navigate from '../Navigate/Navigate';\r\n\r\nconst Header = ({\r\n  icon1,\r\n  icon2,\r\n  text,\r\n  label,\r\n  chatProfile,\r\n  position,\r\n  onClick,\r\n}) => {\r\n  console.log('Header');\r\n  return (\r\n    <HeaderContainer position={position}>\r\n      <ImageContainer>\r\n        <ProfileImage chatProfile={chatProfile} />\r\n        {text && (\r\n          <ChatDetailWrapper>\r\n            <ChatName>{label}</ChatName>\r\n            <ActiveUser />\r\n          </ChatDetailWrapper>\r\n        )}\r\n      </ImageContainer>\r\n      <OptionsContainer>\r\n        <Navigate navigateTo='/edit' iconName={icon1} />\r\n        <Menu as='button' onClick={onClick}>\r\n          <IconContainer as='button' className={icon2} />\r\n        </Menu>\r\n      </OptionsContainer>\r\n    </HeaderContainer>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  icon1: PropTypes.string,\r\n  icon2: PropTypes.string,\r\n  text: PropTypes.bool,\r\n  label: PropTypes.string,\r\n  chatProfile: PropTypes.string,\r\n  position: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nHeader.defaultProps = {\r\n  text: false,\r\n  label: null,\r\n  chatProfile: null,\r\n  icon1: 'none',\r\n  icon2: 'none',\r\n  onClick: () => {},\r\n};\r\n\r\nexport default React.memo(Header);\r\n","import styled from 'styled-components';\r\n\r\nconst ChatListContainer = styled.section`\r\n  display: flex;\r\n  background: ${(props) => props.theme.chatContainer};\r\n  width: 30%;\r\n  min-height: 100vh;\r\n  flex-direction: column;\r\n  position: relative;\r\n\r\n  @media (max-width: 650px) {\r\n    width: 100vw;\r\n  }\r\n`;\r\n\r\nexport default ChatListContainer;\r\n","import React from 'react';\r\nimport ChatContainer from '../ChatContainer/ChatContainer';\r\nimport Header from '../shared/Header/Header';\r\nimport ChatListContainer from './ChatList.style';\r\n\r\nconst ChatList = () => {\r\n  console.log('chatList');\r\n  return (\r\n    <ChatListContainer>\r\n      <Header\r\n        icon1='fas fa-circle-notch'\r\n        icon2='fas fa-ellipsis-v'\r\n        position='left'\r\n      />\r\n      <ChatContainer />\r\n    </ChatListContainer>\r\n  );\r\n};\r\n\r\nexport default ChatList;\r\n","import styled from 'styled-components';\r\n\r\nconst TestPanelContainer = styled.section`\r\n  display: flex;\r\n  min-height: 100%;\r\n  width: 70%;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: ${(props) => props.theme.sideContainer};\r\n\r\n  @media(max-width: 650px){\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport default TestPanelContainer;\r\n","/* eslint-disable */\r\nimport { connect } from 'react-redux';\r\nimport { signOutStart } from '../../redux-sagas/user/user.action';\r\nimport {\r\n  setThemeStart,\r\n  setThemeLightStart,\r\n} from '../../redux-sagas/theme/theme.action';\r\nimport TestPanelContainer from './TestPanel.style';\r\n\r\nconst TestPanel = ({ signOutStart, setThemeStart, setThemeLightStart }) => (\r\n  <TestPanelContainer>\r\n    <button onClick={signOutStart}>Sign out </button>\r\n    <button onClick={setThemeStart}>Dark </button>\r\n    <button onClick={setThemeLightStart}>Light</button>\r\n  </TestPanelContainer>\r\n);\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  signOutStart: () => dispatch(signOutStart()),\r\n  setThemeStart: () => dispatch(setThemeStart()),\r\n  setThemeLightStart: () => dispatch(setThemeLightStart()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(TestPanel);\r\n","import styled from 'styled-components';\r\n\r\nexport const SpinnerOverlay = styled.div`\r\n  height: 100vh !important;\r\n  width: 100% !important;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: ${(props) => props.theme.chatContainer};\r\n`;\r\n\r\nexport const SpinnerContainer = styled.div`\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 3px solid #25d366;\r\n  border-radius: 50%;\r\n  border-top-color: #fff;\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 3s ease-in-out infinite;\r\n  @keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport {\r\n  SpinnerContainer,\r\n  // SpinnerOverlay\r\n} from './Spinner.style';\r\n\r\nconst SpinnerComponent = () => (\r\n  // <SpinnerOverlay>\r\n  <SpinnerContainer />\r\n  // </SpinnerOverlay>\r\n);\r\n\r\nexport default SpinnerComponent;\r\n","import React from 'react';\r\nimport { SpinnerOverlay as SpinnerWrapper } from './Spinner.style';\r\nimport Spinner from './SpinnerComponent';\r\n\r\nconst SpinnerOverlay = () => {\r\n  return (\r\n    <SpinnerWrapper>\r\n      <Spinner />\r\n    </SpinnerWrapper>\r\n  );\r\n};\r\n\r\nexport default SpinnerOverlay;\r\n","/*eslint-disable */\r\nimport React from 'react';\r\nimport SpinnerOverlay from './SpinnerOverlay';\r\n\r\nconst WithSpinner = (WrappedComponent) => ({ isLoading, ...otherProps }) => {\r\n  console.log(isLoading, 100);\r\n  return isLoading ? <SpinnerOverlay /> : <WrappedComponent {...otherProps} />;\r\n};\r\n\r\nexport default WithSpinner;\r\n","import PropTypes from 'prop-types';\r\n\r\nexport const ChannelPropTypes = PropTypes.shape({\r\n  groupId: PropTypes.string,\r\n  displayName: PropTypes.string,\r\n  uid: PropTypes.string,\r\n  photoURL: PropTypes.string,\r\n});\r\n\r\nexport const CurrentUserIdPropTypes = PropTypes.string.isRequired;\r\n","import { useEffect } from 'react';\r\nimport { getRef } from '../../firebase/firebase';\r\nimport { setSeen as updateSeen } from '../../firebase/channels';\r\n\r\nconst MessageState = (\r\n  channel,\r\n  currentUserId,\r\n  createChannel,\r\n  getMessages,\r\n  getRealtime,\r\n  setSeen,\r\n  deleteNotification\r\n) => {\r\n  const { groupId, uid } = channel;\r\n  useEffect(() => {\r\n    if (!groupId) {\r\n      createChannel(currentUserId, uid);\r\n    } else {\r\n      getMessages(groupId);\r\n      deleteNotification(groupId);\r\n    }\r\n  }, [\r\n    createChannel,\r\n    groupId,\r\n    uid,\r\n    currentUserId,\r\n    getMessages,\r\n    deleteNotification,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const groupRef = getRef('groups');\r\n    console.log('err');\r\n    let listen;\r\n    if (groupId) {\r\n      listen = groupRef\r\n        .child(`${groupId}/messages`)\r\n        .orderByChild('createdAt')\r\n        .startAt(Date.now())\r\n        .on('child_added', (snap) => {\r\n          if (snap.val()) {\r\n            getRealtime({\r\n              [snap.key]: snap.val(),\r\n            });\r\n            updateSeen(channel, currentUserId);\r\n          }\r\n        });\r\n    }\r\n    return () =>\r\n      // eslint-disable-next-line\r\n      groupId &&\r\n      groupRef.child(`${groupId}/messages`).off('child_added', listen);\r\n  }, [channel, groupId, getRealtime, currentUserId]);\r\n\r\n  useEffect(() => {\r\n    const groupRef = getRef(`groups/${groupId}/messages`);\r\n    console.log('err');\r\n    let listen;\r\n    if (groupId) {\r\n      listen = groupRef.orderByChild('seen').on('child_changed', (snap) => {\r\n        console.log(snap.val(), 'ooops');\r\n        if (snap.val()?.seen) {\r\n          setSeen(snap.val().key);\r\n        }\r\n      });\r\n    }\r\n    return () =>\r\n      // eslint-disable-next-line\r\n      groupId &&\r\n      groupRef.child(`${groupId}/messages`).off('child_changed', listen);\r\n  }, [channel, groupId, getRealtime, setSeen]);\r\n};\r\n\r\nexport default MessageState;\r\n","export default __webpack_public_path__ + \"static/media/chat-light.bded4f44.png\";","export default __webpack_public_path__ + \"static/media/chat-dark.8cbc68b3.png\";","import styled from 'styled-components';\r\nimport chatLight from '../../assets/chat-light.png';\r\nimport chatDark from '../../assets/chat-dark.png';\r\n/* eslint-disable*/\r\nconst MessageContainer = styled.section`\r\n  min-height: 100%;\r\n  width: 70%;\r\n  background: url(${(props) => (props.theme.mode ? chatDark : chatLight)});\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-left: ${(props) =>\r\n    props.theme.mode ? '1px solid #EDEDED' : '1px solid #2A2F32'};\r\n  /* position: relative; */\r\n  background-position: center;\r\n  background-size: contain;\r\n  opacity: 1;\r\n  transition: all 500ms linear;\r\n\r\n  @media (max-width: 650px) {\r\n    ${({ channel }) =>\r\n      channel\r\n        ? `\r\n      position: absolute;\r\n      width: 100vw;\r\n      opacity: 1;\r\n  transition: all 500ms linear;\r\n\r\n    `\r\n        : `\r\n  transition: all 500ms linear;\r\n\r\n    opacity: 0;\r\n      display: none;\r\n    `}\r\n  }\r\n`;\r\n\r\nexport default MessageContainer;\r\n","import styled from 'styled-components';\r\n\r\nexport const Footer = styled.footer`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 1.6rem 1.6rem;\r\n  background: ${(props) => props.theme.header};\r\n  width: calc(100% - 3.2rem);\r\n  margin-top: auto;\r\n  z-index: 100;\r\n`;\r\n\r\nexport const SendMessage = styled.button`\r\n  outline: none;\r\n  border: none;\r\n  margin-left: 1rem;\r\n  background: transparent;\r\n`;\r\n\r\nexport const InputContainer = styled.div``;\r\nexport const IconContainer = styled.i``;\r\n","import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const uploadFileType = ['jpeg', 'jpg', 'png'];\r\n\r\nexport const metaData = {\r\n  contentType: 'image/png',\r\n};\r\nexport const generateUniqueUid = () => uuidv4();\r\n","import { useRef } from 'react';\r\nimport {\r\n  uploadFileType,\r\n  generateUniqueUid,\r\n  metaData,\r\n} from '../../helpers/helpers';\r\nimport { storage } from '../../firebase/firebase';\r\n// TODO - Emoji\r\nconst MessageInputState = (\r\n  channel,\r\n  currentUserId,\r\n  addMessageStart,\r\n  setModal,\r\n  editor,\r\n  setImage,\r\n  setLoading,\r\n  imageFile,\r\n  unMountModal\r\n) => {\r\n  const message = useRef(null);\r\n  const { groupId, uid } = channel;\r\n\r\n  // const [emojiToggle, setEmojiToggle] = useState(true);\r\n  const submitHandler = () => {\r\n    if (message?.current?.value) {\r\n      addMessageStart(groupId, currentUserId, uid, message.current.value);\r\n      message.current.value = '';\r\n    }\r\n  };\r\n\r\n  const handleFileChange = (e) => {\r\n    const file = e.target.files[0];\r\n    const fileType = file?.name.split('.')[1];\r\n    const reader = new FileReader();\r\n    if (file && uploadFileType.includes(fileType)) {\r\n      reader.readAsDataURL(file);\r\n      reader.addEventListener('load', () => {\r\n        setModal(true, reader.result);\r\n      });\r\n    } else {\r\n      // eslint-disable-next-line\r\n      alert('Please select jpeg/png file');\r\n    }\r\n  };\r\n\r\n  const handleCroppedImage = () => {\r\n    if (editor) {\r\n      console.log(editor.current);\r\n      editor.current.getImageScaledToCanvas().toBlob((blob) => {\r\n        console.log(blob);\r\n        const imageURL = URL.createObjectURL(blob);\r\n        setImage(imageURL, blob);\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendImageFile = () => {\r\n    const id = generateUniqueUid();\r\n    const storageRef = storage\r\n      .ref()\r\n      .child(`public/${id}`)\r\n      .put(imageFile, metaData);\r\n    storageRef.on(\r\n      'state_changed',\r\n      () => {\r\n        setLoading();\r\n      },\r\n      () => {\r\n        // eslint-disable-next-line\r\n        alert('Image upload Failed.Please try again');\r\n        setLoading();\r\n        unMountModal();\r\n      },\r\n      () => {\r\n        storageRef.snapshot.ref.getDownloadURL().then((downloadURL) => {\r\n          addMessageStart(groupId, currentUserId, uid, downloadURL);\r\n          setLoading();\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  return [\r\n    message,\r\n    submitHandler,\r\n    handleFileChange,\r\n    handleCroppedImage,\r\n    sendImageFile,\r\n  ];\r\n};\r\n\r\nexport default MessageInputState;\r\n","import { useState, useRef } from 'react';\r\n\r\nconst ImageEditorState = () => {\r\n  const [modal, setModal] = useState({\r\n    visible: false,\r\n    file: null,\r\n    croppedImage: null,\r\n    loading: false,\r\n    blob: null,\r\n  });\r\n  const editor = useRef();\r\n  const { visible, file, loading, croppedImage, blob } = modal;\r\n  const onMountModal = (isVisible, photo) => {\r\n    console.log(isVisible, 'aaa');\r\n    setModal({\r\n      ...modal,\r\n      visible: isVisible,\r\n      file: photo,\r\n    });\r\n  };\r\n  console.log(modal);\r\n\r\n  const OnUnMountModal = () => {\r\n    setModal({\r\n      ...modal,\r\n      visible: false,\r\n      file: null,\r\n      croppedImage: null,\r\n      loading: false,\r\n    });\r\n  };\r\n\r\n  const setImage = (img, info) => {\r\n    setModal({\r\n      ...modal,\r\n      croppedImage: img,\r\n      blob: info,\r\n    });\r\n  };\r\n\r\n  const setLoading = () => {\r\n    setModal((IsLoading) => !IsLoading);\r\n  };\r\n\r\n  return [\r\n    visible,\r\n    file,\r\n    onMountModal,\r\n    OnUnMountModal,\r\n    editor,\r\n    setImage,\r\n    loading,\r\n    croppedImage,\r\n    setLoading,\r\n    blob,\r\n  ];\r\n};\r\n\r\nexport default ImageEditorState;\r\n","import styled from 'styled-components';\r\n\r\nexport const ModalContainer = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  box-shadow: 0.5px 0.5px 0.5px rgb(49, 46, 46);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 10000;\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport const Editor = styled.div`\r\n  width: 50%;\r\n  border-radius: 8px;\r\n  z-index: 100000;\r\n  box-shadow: 0.5px 0.5px 0.5px rgb(0, 0, 0);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n`;\r\n\r\nexport const CloseButton = styled.button`\r\n  position: absolute;\r\n  top: 5%;\r\n  right: 5%;\r\n  outline: none;\r\n  border: none;\r\n  background: #121212;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const Close = styled.span`\r\n  font-size: 1.8rem;\r\n  font-weight: 500;\r\n  color: #bb86fc;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  padding: 0.7rem;\r\n  background: ${(props) => (props.danger ? '#CC0000' : '#00C851')};\r\n  color: #fff;\r\n  font-family: 'Open Sans Condensed';\r\n  font-size: 1.6rem;\r\n  font-weight: 600;\r\n  transition: all 500ms linear;\r\n  margin: 1.5rem 1.5rem;\r\n  outline: none;\r\n  border: none;\r\n  width: 10rem;\r\n  cursor: pointer;\r\n  border-radius: 8px;\r\n  &:hover {\r\n    font-weight: 600;\r\n    background: black;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ButtonContainer from './Button.styles';\r\n\r\nconst Button = ({ content, danger, onClick }) => (\r\n  <ButtonContainer danger={danger} onClick={onClick}>\r\n    {content}\r\n  </ButtonContainer>\r\n);\r\n\r\nButton.propTypes = {\r\n  content: PropTypes.string.isRequired,\r\n  danger: PropTypes.bool,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nButton.defaultProps = {\r\n  danger: false,\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport AvatarEditor from 'react-avatar-editor';\r\nimport {\r\n  ModalContainer,\r\n  Editor,\r\n  CloseButton,\r\n  Close,\r\n  ButtonContainer,\r\n} from './ImageEditor.style';\r\nimport Button from '../Button/Button';\r\nimport Spinner from '../../Spinner/SpinnerComponent';\r\n/* eslint-disable */\r\n\r\nconst ImageEditor = ({\r\n  visible,\r\n  closeModal,\r\n  image,\r\n  content,\r\n  editorRef,\r\n  handleCrop,\r\n  loading,\r\n  croppedImage,\r\n  sendImage,\r\n}) => {\r\n  console.log(visible, loading);\r\n  return (\r\n    <CSSTransition in={visible} timeout={500} classNames='fade' unmountOnExit>\r\n      <ModalContainer>\r\n        <Editor>\r\n          {loading ? (\r\n            <Spinner />\r\n          ) : (\r\n            <>\r\n              {!croppedImage ? (\r\n                <AvatarEditor\r\n                  ref={editorRef}\r\n                  image={image}\r\n                  width={200}\r\n                  height={200}\r\n                  border={50}\r\n                  scale={1.5}\r\n                />\r\n              ) : (\r\n                <img\r\n                  src={croppedImage}\r\n                  width='200'\r\n                  height='200'\r\n                  alt='croppedImage'\r\n                />\r\n              )}\r\n              <ButtonContainer>\r\n                <Button danger content='CLOSE' onClick={closeModal} />\r\n                <Button content='CROP' onClick={handleCrop} />\r\n                {croppedImage && (\r\n                  <Button content={content} onClick={sendImage} />\r\n                )}\r\n              </ButtonContainer>\r\n              <CloseButton onClick={closeModal}>\r\n                <Close>&#10006;</Close>\r\n              </CloseButton>\r\n            </>\r\n          )}\r\n        </Editor>\r\n      </ModalContainer>\r\n    </CSSTransition>\r\n  );\r\n};\r\nImageEditor.propTypes = {\r\n  visible: PropTypes.bool.isRequired,\r\n  closeModal: PropTypes.func.isRequired,\r\n  image: PropTypes.string,\r\n  content: PropTypes.string.isRequired,\r\n  handleCrop: PropTypes.func.isRequired,\r\n  loading: PropTypes.bool.isRequired,\r\n  croppedImage: PropTypes.string,\r\n  sendImage: PropTypes.func.isRequired,\r\n};\r\n\r\nImageEditor.defaultProps = {\r\n  image: null,\r\n  croppedImage: null,\r\n};\r\n\r\nexport default ImageEditor;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { addMessageStart } from '../../redux-sagas/message/message.action';\r\nimport { ChannelPropTypes } from '../../helpers/PropTypeValues';\r\nimport { Footer, SendMessage } from './MessageInput.style';\r\nimport Icon from '../shared/Icon/Icon';\r\nimport Input from '../shared/Input/Input';\r\nimport UseMessageInputState from './MessageInput.state';\r\nimport UseEditorState from '../shared/ImageEditor/Image.state';\r\nimport ImageEditor from '../shared/ImageEditor/ImageEditor';\r\n\r\nconst MessageInput = ({\r\n  channel,\r\n  currentUserId,\r\n  addMessageStart: addMessage,\r\n}) => {\r\n  const [\r\n    visible,\r\n    file,\r\n    OnMountModal,\r\n    OnUnMountModal,\r\n    editor,\r\n    setImage,\r\n    loading,\r\n    croppedImage,\r\n    setLoading,\r\n    blob,\r\n  ] = UseEditorState();\r\n  const [\r\n    message,\r\n    submitHandler,\r\n    handleFileChange,\r\n    handleCroppedImage,\r\n    sendImageFile,\r\n  ] = UseMessageInputState(\r\n    channel,\r\n    currentUserId,\r\n    addMessage,\r\n    OnMountModal,\r\n    editor,\r\n    setImage,\r\n    setLoading,\r\n    blob,\r\n    OnUnMountModal\r\n  );\r\n  console.log('MessageInput');\r\n  return (\r\n    <Footer>\r\n      <Icon as='button' className='far fa-laugh' />\r\n      {/* eslint-disable-next-line */}\r\n      <label htmlFor='send_file'>\r\n        <Icon className='fas fa-paperclip' />\r\n      </label>\r\n      <input id='send_file' type='file' onChange={handleFileChange} />\r\n      <Input\r\n        name='message'\r\n        placeholder='Type a message'\r\n        ref={message}\r\n        autoComplete='off'\r\n      />\r\n      <SendMessage onClick={submitHandler}>\r\n        <Icon className='fas fa-paper-plane' />\r\n      </SendMessage>\r\n      <ImageEditor\r\n        visible={visible}\r\n        closeModal={OnUnMountModal}\r\n        image={file}\r\n        content='SEND'\r\n        editorRef={editor}\r\n        handleCrop={handleCroppedImage}\r\n        loading={loading}\r\n        croppedImage={croppedImage}\r\n        sendImage={sendImageFile}\r\n      />\r\n    </Footer>\r\n  );\r\n};\r\n\r\nMessageInput.propTypes = {\r\n  channel: ChannelPropTypes,\r\n  currentUserId: PropTypes.string.isRequired,\r\n  addMessageStart: PropTypes.func.isRequired,\r\n};\r\n\r\nMessageInput.defaultProps = {\r\n  channel: null,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addMessageStart: (groupId, currentUserId, receiverId, message) =>\r\n    // eslint-disable-next-line\r\n    dispatch(addMessageStart({ groupId, currentUserId, receiverId, message })),\r\n});\r\n\r\nexport default React.memo(connect(null, mapDispatchToProps)(MessageInput));\r\n","import { useEffect, useRef } from 'react';\r\nimport { setSeen } from '../../firebase/channels';\r\n\r\nconst MessageState = (channel, currentUserId, messages) => {\r\n  const messagesEndRef = useRef(null);\r\n  useEffect(() => {\r\n    setSeen(channel, currentUserId);\r\n  }, [currentUserId, channel]);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef?.current?.scrollIntoView({\r\n      behaviour: 'smooth',\r\n      block: 'end',\r\n      inline: 'nearest',\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages.length]);\r\n\r\n  return [messagesEndRef];\r\n};\r\n\r\nexport default MessageState;\r\n","import styled from 'styled-components';\r\nimport Icon from '../shared/Icon/Icon';\r\n/* eslint-disable */\r\n\r\nexport const SeenIcon = styled(Icon)`\r\n  color: ${(props) => (props.seen ? '#00acef' : '#ccc')};\r\n  font-size: 1.2rem;\r\n  margin-left: 1rem;\r\n  margin-right: 0;\r\n  cursor: default;\r\n`;\r\n\r\nexport const ChatContainer = styled.div`\r\n  overflow-y: scroll;\r\n  margin: 2rem 0 1rem 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 200px;\r\n  flex-grow: 1;\r\n`;\r\n\r\nexport const MessageContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 0 7%;\r\n  margin-top: 5px;\r\n  align-items: flex-end;\r\n  ${(props) =>\r\n    !props.position &&\r\n    `\r\n      align-items: flex-start;\r\n    `}\r\n`;\r\nexport const Message = styled.div`\r\n  font-size: 1.42rem;\r\n  line-height: 1.9rem;\r\n  position: relative;\r\n  border-radius: 7.5px;\r\n  min-width: 20%;\r\n  padding: 0.5rem;\r\n  background: ${(props) =>\r\n    props.position ? props.theme.currentUserChat : props.theme.receiverChat};\r\n`;\r\n\r\nexport const Tail = styled.span`\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 15px;\r\n  font-size: 1.2rem;\r\n  color: ${(props) => props.theme.color};\r\n`;\r\n\r\nexport const Chat = styled.span`\r\n  display: block;\r\n  font-size: 1.8rem;\r\n  color: ${(props) => props.theme.color};\r\n  font-family: 'NimbusSanTW01Con';\r\n  word-wrap: break-word;\r\n  // text-transform: capitalize;\r\n  margin-bottom: 1.3rem;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nconst Image = styled.img`\r\n  height: ${(props) => props.height}rem;\r\n  width: ${(props) => props.width}rem;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nexport default Image;\r\n","/* eslint-disable */\r\nimport React from 'react';\r\nimport ImageContainer from './Image.style';\r\n\r\nconst Image =({ height=20, width=20, src }) => (\r\n  <ImageContainer height={height} width={width} src={src} />\r\n);\r\n\r\nexport default Image;\r\n","import React from 'react';\r\nimport formatISO from 'date-fns/formatISO';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  MessageContainer,\r\n  Tail,\r\n  Message as MessageWrap,\r\n  Chat,\r\n  SeenIcon,\r\n} from './Message.style';\r\nimport Image from '../shared/Image/Image';\r\n\r\nconst MessageList = ({ message, position, timestamp, seen }) => {\r\n  console.log(position, seen);\r\n  return (\r\n    <MessageContainer position={position}>\r\n      <MessageWrap position={position}>\r\n        <Tail>\r\n          {formatISO(timestamp, { representation: 'time' }).slice(0, 5)}\r\n          {seen !== null && <SeenIcon className='fas fa-check' seen={seen} />}\r\n        </Tail>\r\n        {message.includes('http') ? (\r\n          <Image src={message} />\r\n        ) : (\r\n          <Chat>{message}</Chat>\r\n        )}\r\n      </MessageWrap>\r\n    </MessageContainer>\r\n  );\r\n};\r\n\r\nMessageList.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n  position: PropTypes.bool.isRequired,\r\n  timestamp: PropTypes.number.isRequired,\r\n  seen: PropTypes.bool,\r\n};\r\n\r\nMessageList.defaultProps = {\r\n  seen: null,\r\n};\r\n\r\nexport default MessageList;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { generateUniqueUid as id } from '../../helpers/helpers';\r\nimport { ChannelPropTypes } from '../../helpers/PropTypeValues';\r\nimport { selectMessage } from '../../redux-sagas/message/message.selector';\r\nimport UseMsgState from './Message.state';\r\nimport { ChatContainer } from './Message.style';\r\nimport MessageList from './MessageList';\r\n/* eslint-disable */\r\n\r\nconst Message = ({ channel, currentUserId, messages }) => {\r\n  const messagesArray = messages ? Object.values(messages) : [];\r\n  const [messagesEndRef] = UseMsgState(channel, currentUserId, messagesArray);\r\n  return (\r\n    <ChatContainer>\r\n      {messages &&\r\n        messagesArray.map((val) => (\r\n          <div key={val.key + id()}>\r\n            <MessageList\r\n              message={val.message}\r\n              position={val.createdBy === currentUserId}\r\n              timestamp={val.createdAt}\r\n              seen={val.createdBy === currentUserId ? val.seen : null}\r\n            />\r\n            <div ref={messagesEndRef} />\r\n          </div>\r\n        ))}\r\n    </ChatContainer>\r\n  );\r\n};\r\n\r\nMessage.propTypes = {\r\n  channel: ChannelPropTypes,\r\n  currentUserId: PropTypes.string.isRequired,\r\n};\r\n\r\nMessage.defaultProps = {\r\n  channel: null,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  messages: selectMessage,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Message);\r\n","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectIsLoading } from '../../redux-sagas/message/message.selector';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport Messages from './Message';\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  isLoading: selectIsLoading,\r\n});\r\n\r\nconst MessagesContainer = compose(connect(mapStateToProps), Spinner)(Messages);\r\n\r\nexport default MessagesContainer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  createChannelStart,\r\n  setCurrentChannelNullStart,\r\n} from '../../redux-sagas/channels/channels.action';\r\nimport {\r\n  getMessagesStart,\r\n  getRealtimeMessagesStart,\r\n  setSeenStart,\r\n  deleteNotificationStart,\r\n} from '../../redux-sagas/message/message.action';\r\nimport { ChannelPropTypes } from '../../helpers/PropTypeValues';\r\nimport UseMessageState from './Messages.state';\r\nimport Header from '../../components/shared/Header/Header';\r\nimport MessageContainer from './Messages.style';\r\nimport MessageInput from '../../components/MessageInput/MessageInput';\r\nimport Message from '../../components/Message/Message.container';\r\n\r\nconst Messages = ({\r\n  channel,\r\n  currentUserId,\r\n  createChannelStart: createChannel,\r\n  getMessagesStart: getMessages,\r\n  getRealtimeMessagesStart: getRealtimeMsg,\r\n  setSeenStart: setSeen,\r\n  deleteNotificationStart: deleteNotification,\r\n  setCurrentChannelNullStart: setChannelNull,\r\n}) => {\r\n  console.log('Message', channel, currentUserId);\r\n  UseMessageState(\r\n    channel,\r\n    currentUserId,\r\n    createChannel,\r\n    getMessages,\r\n    getRealtimeMsg,\r\n    setSeen,\r\n    deleteNotification\r\n  );\r\n  return (\r\n    <MessageContainer channel={!!channel}>\r\n      <Header\r\n        icon2='fas fa-home'\r\n        onClick={setChannelNull}\r\n        text\r\n        label={channel?.displayName}\r\n        chatProfile={channel?.photoURL}\r\n        position='right'\r\n      />\r\n      <Message channel={channel} currentUserId={currentUserId} />\r\n      <MessageInput channel={channel} currentUserId={currentUserId} />\r\n    </MessageContainer>\r\n  );\r\n};\r\n\r\nMessages.propTypes = {\r\n  channel: ChannelPropTypes,\r\n  currentUserId: PropTypes.string.isRequired,\r\n  createChannelStart: PropTypes.func.isRequired,\r\n  getMessagesStart: PropTypes.func.isRequired,\r\n  getRealtimeMessagesStart: PropTypes.func.isRequired,\r\n  setSeenStart: PropTypes.func.isRequired,\r\n  deleteNotificationStart: PropTypes.func.isRequired,\r\n  setCurrentChannelNullStart: PropTypes.func.isRequired,\r\n};\r\n\r\nMessages.defaultProps = {\r\n  channel: null,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  createChannelStart: (currentUserId, receiverId) =>\r\n    // eslint-disable-next-line\r\n    dispatch(createChannelStart(currentUserId, receiverId)),\r\n  getMessagesStart: (id) => dispatch(getMessagesStart(id)),\r\n  getRealtimeMessagesStart: (chat) => dispatch(getRealtimeMessagesStart(chat)),\r\n  setSeenStart: (id) => dispatch(setSeenStart(id)),\r\n  deleteNotificationStart: (groupId) =>\r\n    // eslint-disable-next-line\r\n    dispatch(deleteNotificationStart(groupId)),\r\n  setCurrentChannelNullStart: () => dispatch(setCurrentChannelNullStart()),\r\n});\r\nexport default connect(null, mapDispatchToProps)(Messages);\r\n","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectCurrentChannelLoading } from '../../redux-sagas/channels/channels.selector';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport Messages from './Messages';\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  isLoading: selectCurrentChannelLoading,\r\n});\r\n\r\nconst MessagesContainer = compose(connect(mapStateToProps), Spinner)(Messages);\r\n\r\nexport default MessagesContainer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUserId } from '../../redux-sagas/user/user.selector';\r\nimport { selectCurrentChannel } from '../../redux-sagas/channels/channels.selector';\r\n// import { setCurrentChannelNullStart } from '../../redux-sagas/channels/channels.action';\r\nimport TestPanel from '../../components/TestPanel/TestPanel';\r\nimport Messages from '../Messages/Messages.container';\r\nimport { ChannelPropTypes } from '../../helpers/PropTypeValues';\r\n\r\nconst ChatPanel = ({\r\n  currentUserId,\r\n  // setCurrentChannelNullStart: currentChannelToNull,\r\n  channel,\r\n}) => {\r\n  console.log('ChatPanels');\r\n  return channel ? (\r\n    <Messages channel={channel} currentUserId={currentUserId} />\r\n  ) : (\r\n    <TestPanel />\r\n  );\r\n};\r\n\r\nChatPanel.propTypes = {\r\n  currentUserId: PropTypes.string.isRequired,\r\n  // setCurrentChannelNullStart: PropTypes.func.isRequired,\r\n  channel: ChannelPropTypes,\r\n};\r\n\r\nChatPanel.defaultProps = {\r\n  channel: null,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  currentUserId: selectUserId,\r\n  channel: selectCurrentChannel,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ChatPanel);\r\n","import { useEffect } from 'react';\r\nimport {\r\n  getRef,\r\n  isOfflineForDatabase,\r\n  isOnlineForDatabase,\r\n} from '../../firebase/firebase';\r\n\r\nconst Home = (userId, displayChat) => {\r\n  useEffect(() => {\r\n    const userStatusDatabaseRef = getRef(`status/${userId}`);\r\n    const listenToRef = getRef('.info/connected');\r\n    const listen = listenToRef.on('value', (snapshot) => {\r\n      if (snapshot.val()) {\r\n        userStatusDatabaseRef\r\n          .onDisconnect()\r\n          .set(isOfflineForDatabase)\r\n          .then(() => {\r\n            userStatusDatabaseRef.set(isOnlineForDatabase);\r\n          });\r\n      }\r\n    });\r\n    return () => listenToRef.off('value', listen);\r\n  }, [userId]);\r\n\r\n  useEffect(() => {\r\n    const channelRef = getRef('channels');\r\n    const listen = channelRef\r\n      .child(userId)\r\n      .orderByChild('createdAt')\r\n      .startAt(Date.now())\r\n      .on('child_added', (snap) => {\r\n        console.log(snap.val(), 'ooo');\r\n        if (snap.val()) {\r\n          console.log('saga');\r\n          displayChat([snap.val()]);\r\n        }\r\n      });\r\n    return () => channelRef.child(userId).off('child_added', listen);\r\n  }, [userId, displayChat]);\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUserId } from '../../redux-sagas/user/user.selector';\r\nimport { displayChatListStart } from '../../redux-sagas/channels/channels.action';\r\nimport HomeContainer from './Home.style';\r\nimport ChatList from '../../components/ChatList/ChatList';\r\nimport ChatPanel from '../ChatPanel/ChatPanel';\r\n\r\nimport UseHomeState from './Home.state';\r\n\r\nconst Home = ({ userId, displayChatListStart: displayChat }) => {\r\n  UseHomeState(userId, displayChat);\r\n  console.log('Home render');\r\n  return (\r\n    <HomeContainer>\r\n      <ChatList />\r\n      <ChatPanel />\r\n    </HomeContainer>\r\n  );\r\n};\r\n\r\nHome.propTypes = {\r\n  userId: PropTypes.string.isRequired,\r\n  displayChatListStart: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  displayChatListStart: (chatList) => dispatch(displayChatListStart(chatList)),\r\n});\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  userId: selectUserId,\r\n});\r\n\r\nexport default React.memo(connect(mapStateToProps, mapDispatchToProps)(Home));\r\n","import styled from 'styled-components';\r\n\r\nexport const AuthContainer = styled.main`\r\n  min-height: 100vh;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: #ededed;\r\n`;\r\n\r\nexport const AuthBox = styled.section`\r\n  min-height: 40vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background: #fff;\r\n  width: 30%;\r\n\r\n  @media (max-width: 850px) {\r\n    width: 100%;\r\n    background: none;\r\n  }\r\n`;\r\n\r\nexport const ImageContainer = styled.figure`\r\n  margin: 1.3rem 0rem 2.5rem 0;\r\n`;\r\n\r\nexport const ImageWrapper = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  height: 8rem;\r\n`;\r\n\r\nexport const ImageText = styled.figcaption`\r\n  font-family: 'Open Sans Condensed';\r\n  font-size: 2.3rem;\r\n  font-weight: 600;\r\n  margin-top: 2.5rem;\r\n`;\r\n\r\nexport const SigninButton = styled.button`\r\n  padding: 8px 8px;\r\n  background: #25d366;\r\n  font-family: 'Open Sans Condensed', sans-serif;\r\n  font-size: 1.7rem;\r\n  color: white;\r\n  font-weight: 500;\r\n  outline: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n  transition: all 500ms;\r\n  margin-bottom: 2rem;\r\n\r\n  &:hover {\r\n    background: #128c7e;\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/Whatsapp.02a723ea.png\";","const AuthState = (isAuthenticated, history) => {\r\n  console.log(isAuthenticated);\r\n  if (isAuthenticated) history.push('/');\r\n};\r\n\r\nexport default AuthState;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport {\r\n  AuthContainer,\r\n  AuthBox,\r\n  ImageContainer,\r\n  Image,\r\n  ImageText,\r\n  ImageWrapper,\r\n  SigninButton,\r\n} from './Auth.style';\r\nimport { googleSignInStart } from '../../redux-sagas/user/user.action';\r\nimport WhatsappIcon from '../../assets/Whatsapp.png';\r\nimport { selectIsUserAuthenticated } from '../../redux-sagas/user/user.selector';\r\nimport AuthState from './Auth.state';\r\n/* eslint-disable */\r\nconst Auth = ({\r\n  googleSignInStart: googleSignIn,\r\n  isAuthenticated,\r\n  history,\r\n}) => {\r\n  // eslint-disable-next-line\r\n  AuthState(isAuthenticated, history);\r\n  return (\r\n    <>\r\n      {isAuthenticated && <Redirect to='/' />}\r\n      <AuthContainer>\r\n        <AuthBox>\r\n          <ImageContainer>\r\n            <ImageWrapper>\r\n              <Image src={WhatsappIcon} />\r\n            </ImageWrapper>\r\n            <ImageText>SIGN IN TO WHATSAPP</ImageText>\r\n          </ImageContainer>\r\n          <SigninButton onClick={googleSignIn}>\r\n            SIGN IN WITH GOOGLE\r\n          </SigninButton>\r\n        </AuthBox>\r\n      </AuthContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nAuth.propTypes = {\r\n  googleSignInStart: PropTypes.func.isRequired,\r\n  isAuthenticated: PropTypes.bool.isRequired,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  isAuthenticated: selectIsUserAuthenticated,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  googleSignInStart: () => dispatch(googleSignInStart()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectIsUserLoaded } from '../../redux-sagas/user/user.selector';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport Auth from './Auth';\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  isLoading: selectIsUserLoaded,\r\n});\r\n\r\nconst AuthContainer = compose(connect(mapStateToProps), Spinner)(Auth);\r\n\r\nexport default AuthContainer;\r\n","/* eslint-disable */\r\nimport React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport PropTypes from 'prop-types';\r\nimport { selectIsUserAuthenticated } from '../redux-sagas/user/user.selector';\r\n\r\nconst PrivateRoute = ({ component: Component, isAuthenticated, ...rest }) => {\r\n  console.log(isAuthenticated, 'auth');\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        isAuthenticated ? <Component {...props} /> : <Redirect to='/signin' />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nPrivateRoute.propTypes = {\r\n  // component: PropTypes.func.isRequired,\r\n  isAuthenticated: PropTypes.bool.isRequired,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  isAuthenticated: selectIsUserAuthenticated,\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import styled from 'styled-components';\r\n\r\nconst ChangeImageText = styled.label`\r\n  font-size: 2.1rem;\r\n  font-weight: 400;\r\n  font-family: 'Open Sans Condensed';\r\n  margin: 1.5rem 0;\r\n  color: #25d366;\r\n  cursor: pointer;\r\n  text-decoration: underline;\r\n`;\r\n\r\nexport default ChangeImageText;\r\n","import React from 'react';\r\nimport ImageText from './EditImage.style';\r\n\r\nconst EditImage = () => {\r\n  return (\r\n    <>\r\n      <ImageText htmlFor='send'>Change Profile Image</ImageText>\r\n      <input id='send' type='file' accept='image/*' />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditImage;\r\n","import { useRef } from 'react';\r\nimport { getRef } from '../../../firebase/firebase';\r\n\r\nconst UsernameState = (currentUserId, username) => {\r\n  const inputRef = useRef(null);\r\n\r\n  const updateUsername = () => {\r\n    if (username === inputRef?.current?.value) {\r\n      alert('Updated successfully');\r\n      return false;\r\n    }\r\n    if (!inputRef?.current?.value) {\r\n      alert('Name should not be empty');\r\n      return false;\r\n    }\r\n    const userRef = getRef('users');\r\n    userRef\r\n      .child(currentUserId)\r\n      .update({\r\n        displayName: inputRef?.current?.value,\r\n      })\r\n      .then()\r\n      .catch(() => {\r\n        alert('Something went wrong!Please try again');\r\n      });\r\n    return true;\r\n  };\r\n  return [inputRef, updateUsername];\r\n};\r\n\r\nexport default UsernameState;\r\n","import styled from 'styled-components';\r\nimport SharedInput from '../../shared/Input/Input';\r\n\r\nexport const LabelText = styled.label`\r\n  font-family: 'Open Sans Condensed';\r\n  font-size: 2.1rem;\r\n  color: ${(props) => props.theme.color};\r\n  margin-bottom: 1.4rem;\r\n`;\r\n\r\nexport const Input = styled(SharedInput)`\r\n  border: none;\r\n  outline: none;\r\n  width: 20rem;\r\n  padding: 0.9rem;\r\n`;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport {\r\n  selectUsername,\r\n  selectUserId,\r\n} from '../../../redux-sagas/user/user.selector';\r\nimport Button from '../../shared/Button/Button';\r\nimport UsernameState from './Username.state';\r\nimport { Input, LabelText } from './Username.style';\r\n\r\nconst Username = ({ username, currentUserId }) => {\r\n  const [inputRef, updateUsername] = UsernameState(currentUserId, username);\r\n  return (\r\n    <>\r\n      <LabelText>Name</LabelText>\r\n      <Input\r\n        placeholder='Username'\r\n        autoComplete='off'\r\n        name='username'\r\n        defaultValue={username}\r\n        ref={inputRef}\r\n      />\r\n      <Button onClick={updateUsername} content='UPDATE' />\r\n    </>\r\n  );\r\n};\r\n\r\nUsername.propTypes = {\r\n  username: PropTypes.string.isRequired,\r\n  currentUserId: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  username: selectUsername,\r\n  currentUserId: selectUserId,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Username);\r\n","const radioButton = [\r\n  {\r\n    id: 'theme-light',\r\n    name: 'Light',\r\n  },\r\n  {\r\n    id: 'theme-dark',\r\n    name: 'Dark',\r\n  },\r\n];\r\n\r\nexport default radioButton;\r\n","import styled from 'styled-components';\r\n/* eslint-disable */\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n`;\r\nexport const RadioButton = styled.label`\r\n  display: inline-flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  margin-right: 1rem;\r\n`;\r\n\r\nexport const Selection = styled.div`\r\n  width: 1.7rem;\r\n  height: 1.7rem;\r\n  border: ${(props) =>\r\n    props.theme.mode ? '2px solid #d8e4e2' : '2px solid #212529'};\r\n  border-radius: 50%;\r\n  margin-right: 1rem;\r\n  box-sizing: border-box;\r\n  padding: 0.3rem;\r\n  &::after {\r\n    content: '';\r\n    width: 100%;\r\n    height: 100%;\r\n    display: block;\r\n    background: #009879;\r\n    border-radius: 50%;\r\n    transform: scale(0);\r\n\r\n    transition: all 500ms linear;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  &:checked + ${Selection}::after {\r\n    transform: scale(1);\r\n  }\r\n`;\r\n","const UseThemeState = (setDark, setLight) => {\r\n  const handleTheme = (e) => {\r\n    const theme = e.target.id;\r\n    if (theme.includes('dark')) {\r\n      setDark();\r\n    } else {\r\n      setLight();\r\n    }\r\n  };\r\n  return [handleTheme];\r\n};\r\n\r\nexport default UseThemeState;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport {\r\n  setThemeStart,\r\n  setThemeLightStart,\r\n} from '../../../redux-sagas/theme/theme.action';\r\n\r\nimport { selectBackground } from '../../../redux-sagas/theme/theme.selector';\r\nimport data from './data';\r\nimport { RadioButton, Selection, Input, Wrapper } from './Theme.style';\r\nimport { LabelText } from '../EditUsername/Username.style';\r\nimport UseThemeState from './Theme.state';\r\n\r\nconst Theme = ({\r\n  setThemeStart: setDark,\r\n  setThemeLightStart: setLight,\r\n  theme,\r\n}) => {\r\n  const [handleTheme] = UseThemeState(setDark, setLight);\r\n  return (\r\n    <>\r\n      <LabelText>Theme</LabelText>\r\n      <Wrapper>\r\n        {data.map((radio) => (\r\n          <RadioButton htmlFor={radio.id} key={radio.name}>\r\n            <Input\r\n              type='radio'\r\n              id={radio.id}\r\n              name='radio'\r\n              onChange={handleTheme}\r\n              checked={theme === radio.name.toLowerCase()}\r\n            />\r\n            <Selection />\r\n            <LabelText style={{ margin: 0, fontSize: '1.8rem' }}>\r\n              {radio.name}\r\n            </LabelText>\r\n          </RadioButton>\r\n        ))}\r\n      </Wrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nTheme.propTypes = {\r\n  setThemeStart: PropTypes.func.isRequired,\r\n  setThemeLightStart: PropTypes.func.isRequired,\r\n  theme: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  theme: selectBackground,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setThemeStart: () => dispatch(setThemeStart()),\r\n  setThemeLightStart: () => dispatch(setThemeLightStart()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Theme);\r\n","import { useEffect } from 'react';\r\nimport { getRef } from '../../firebase/firebase';\r\n\r\nconst ProfileState = (changeProfile, userId) => {\r\n  useEffect(() => {\r\n    const userRef = getRef('users');\r\n    const modifiedUser = userRef.child(userId);\r\n    const listen = modifiedUser.on('child_changed', (snapshot) => {\r\n      const modifiedValue = snapshot.val();\r\n      if (modifiedValue) {\r\n        const name = modifiedValue.includes('http')\r\n          ? 'photoURL'\r\n          : 'displayName';\r\n        changeProfile({\r\n          name,\r\n          value: modifiedValue,\r\n        });\r\n      }\r\n    });\r\n    return () => {\r\n      modifiedUser.off('child_changed', listen);\r\n    };\r\n  }, [userId, changeProfile]);\r\n};\r\n\r\nexport default ProfileState;\r\n","import styled from 'styled-components';\r\n\r\nexport const ProfileContainer = styled.main`\r\n  min-height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: ${(props) => props.theme.chatContainer};\r\n  position: relative;\r\n`;\r\n\r\nexport const NavigateContainer = styled.div`\r\n  position: absolute;\r\n  top:5%;\r\n  left: 5%;\r\n`;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectUserId } from '../../redux-sagas/user/user.selector';\r\nimport { changeProfileStart } from '../../redux-sagas/user/user.action';\r\nimport Navigate from '../../components/shared/Navigate/Navigate';\r\nimport ProfileImage from '../../components/shared/ProfileImage/ProfileImage';\r\nimport EditImage from '../../components/Profile/EditImage/EditImage';\r\nimport EditUsername from '../../components/Profile/EditUsername/Username';\r\nimport Theme from '../../components/Profile/Theme/Theme';\r\nimport UseProfileState from './Profile.state';\r\nimport { ProfileContainer, NavigateContainer } from './Profile.style';\r\n\r\nconst Profile = ({ changeProfileStart: changeProfile, userId }) => {\r\n  UseProfileState(changeProfile, userId);\r\n  return (\r\n    <ProfileContainer>\r\n      <ProfileImage height={8} />\r\n      <EditImage />\r\n      <EditUsername />\r\n      <NavigateContainer>\r\n        <Navigate navigateTo='/' iconName='fas fa-arrow-left' />\r\n      </NavigateContainer>\r\n      <Theme />\r\n    </ProfileContainer>\r\n  );\r\n};\r\n\r\nProfile.propTypes = {\r\n  userId: PropTypes.string.isRequired,\r\n  changeProfileStart: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  changeProfileStart: (profile) => dispatch(changeProfileStart(profile)),\r\n});\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  userId: selectUserId,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Home from '../pages/Home/Home';\r\nimport Auth from '../pages/Auth/Auth.container';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport Profile from '../pages/EditProfile/Profile';\r\n\r\nconst AppRoute = () => (\r\n  <Switch>\r\n    <PrivateRoute exact path='/' component={Home} />\r\n    <Route exact path='/signin' component={Auth} />\r\n    <PrivateRoute path='/edit' component={Profile} />\r\n  </Switch>\r\n);\r\n\r\nexport default AppRoute;\r\n","export const lightTheme = {\r\n  mode: 0,\r\n  header: '#EDEDED',\r\n  chatContainer: '#F5F5F5',\r\n  sideContainer: '#F8F9FA',\r\n  status: '#EDEDED',\r\n  statusHover: '#EDEDED',\r\n  search: '#EDEDED',\r\n  textLight: '#636363',\r\n  color: '#000',\r\n  Icon: '#000',\r\n  border: '#999',\r\n  currentUserChat: '#DCF8C6',\r\n  receiverChat: '#fff',\r\n};\r\n\r\nexport const darkTheme = {\r\n  mode: 1,\r\n  header: '#2A2F32',\r\n  chatContainer: '#131C21',\r\n  chatList: '#131C21',\r\n  sideContainer: '#262D31',\r\n  status: '#1414141',\r\n  statusHover: '#242424',\r\n  search: '#323739',\r\n  textLight: '#758C8C',\r\n  color: '#fff',\r\n  Icon: '#B1B3B5',\r\n  border: '#2D3134',\r\n  currentUserChat: '#056162',\r\n  receiverChat: '#262D31',\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { auth } from './firebase/firebase';\r\nimport { lightTheme, darkTheme } from './helpers/theme';\r\nimport { getTheme } from './helpers/localstorage';\r\n// import { getChannelsList } from './helpers/firebaseQuery';\r\n\r\nconst AppState = (checkUserSession, setThemeLight, theme, history, displayChat) => {\r\n  const [AppLoading, setAppLoading] = useState(true);\r\n  // const [id, setId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const listenToAuth = auth.onAuthStateChanged((snap) => {\r\n      console.log(11, snap);\r\n      if (snap && snap.uid) {\r\n        const {\r\n          uid, email, photoURL, displayName,\r\n        } = snap;\r\n        checkUserSession({\r\n          uid,\r\n          email,\r\n          photoURL,\r\n          displayName,\r\n        });\r\n        displayChat(uid);\r\n\r\n        setAppLoading(false);\r\n      } else {\r\n        setAppLoading(false);\r\n        history.push('/signin');\r\n      }\r\n    });\r\n    return () => {\r\n      listenToAuth();\r\n    };\r\n  }, [checkUserSession, history, displayChat]);\r\n\r\n  useEffect(() => {\r\n    const userPreferredTheme = getTheme();\r\n    console.log(222, userPreferredTheme);\r\n    if (userPreferredTheme && userPreferredTheme === 'light') {\r\n      console.log('light');\r\n      setThemeLight();\r\n    }\r\n  }, [setThemeLight]);\r\n\r\n  const AppTheme = () => (theme === 'dark' ? darkTheme : lightTheme);\r\n  return [AppTheme(), AppLoading];\r\n};\r\n\r\nexport default AppState;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport PropTypes from 'prop-types';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { ThemeProvider } from 'styled-components';\r\n\r\nimport { displayAddedChatStart } from './redux-sagas/channels/channels.action';\r\nimport { checkUserSession } from './redux-sagas/user/user.action';\r\nimport { setThemeLightStart } from './redux-sagas/theme/theme.action';\r\nimport { selectBackground } from './redux-sagas/theme/theme.selector';\r\nimport AppRoute from './Route/Route';\r\nimport UseAppState from './App.state';\r\nimport './styles.css';\r\nimport Spinner from './components/Spinner/SpinnerOverlay';\r\n\r\nconst App = ({\r\n  checkUserSession: userSession,\r\n  setThemeLightStart: setLightTheme,\r\n  AppTheme: theme,\r\n  history = {},\r\n  displayAddedChatStart: displayChatList,\r\n}) => {\r\n  const [AppTheme, AppLoading] = UseAppState(\r\n    userSession,\r\n    setLightTheme,\r\n    theme,\r\n    history,\r\n    displayChatList\r\n  );\r\n  return AppLoading ? (\r\n    <Spinner />\r\n  ) : (\r\n    <ThemeProvider theme={AppTheme}>\r\n      <AppRoute />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nApp.propTypes = {\r\n  checkUserSession: PropTypes.func.isRequired,\r\n  setThemeLightStart: PropTypes.func.isRequired,\r\n  AppTheme: PropTypes.string.isRequired,\r\n  // eslint-disable-next-line\r\n  history: PropTypes.object,\r\n  displayAddedChatStart: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  checkUserSession: (user) => dispatch(checkUserSession(user)),\r\n  setThemeLightStart: () => dispatch(setThemeLightStart()),\r\n  displayAddedChatStart: (userId) => dispatch(displayAddedChatStart(userId)),\r\n});\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  AppTheme: selectBackground,\r\n});\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux-sagas/store';\r\n\r\nimport App from './App';\r\n\r\nconst rootElement = document.getElementById('root');\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </Provider>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}